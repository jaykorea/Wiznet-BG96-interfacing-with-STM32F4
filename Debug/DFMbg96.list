
DFMbg96.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024d4  0800ccb0  0800ccb0  0001ccb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f184  0800f184  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800f184  0800f184  0001f184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f18c  0800f18c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800f18c  0800f18c  0001f18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800f194  0800f194  0001f194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800f19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001620  20000244  0800f3e0  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  0800f3e0  00021864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c62  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004374  00000000  00000000  00048ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0004d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0004e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4a8  00000000  00000000  0004fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbfc  00000000  00000000  0006e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6af  00000000  00000000  0008ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012841b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  00128470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000244 	.word	0x20000244
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc98 	.word	0x0800cc98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000248 	.word	0x20000248
 80001dc:	0800cc98 	.word	0x0800cc98

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001004:	1d39      	adds	r1, r7, #4
 8001006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800100a:	2201      	movs	r2, #1
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <__io_putchar+0x20>)
 800100e:	f005 f8ca 	bl	80061a6 <HAL_UART_Transmit>

    return ch;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20001640 	.word	0x20001640

08001020 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <Ringbuf_init+0x3c>)
 8001026:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <Ringbuf_init+0x40>)
 8001028:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <Ringbuf_init+0x44>)
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <Ringbuf_init+0x48>)
 800102e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <Ringbuf_init+0x4c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	695a      	ldr	r2, [r3, #20]
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <Ringbuf_init+0x4c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 0201 	orr.w	r2, r2, #1
 800103e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <Ringbuf_init+0x4c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <Ringbuf_init+0x4c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0220 	orr.w	r2, r2, #32
 800104e:	60da      	str	r2, [r3, #12]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200016e4 	.word	0x200016e4
 8001060:	20000260 	.word	0x20000260
 8001064:	200016e0 	.word	0x200016e0
 8001068:	20000468 	.word	0x20000468
 800106c:	20001684 	.word	0x20001684

08001070 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001082:	3301      	adds	r3, #1
 8001084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001088:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	429a      	cmp	r2, r3
 8001094:	d009      	beq.n	80010aa <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	79f9      	ldrb	r1, [r7, #7]
 80010a0:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80010aa:	bf00      	nop
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <Uart_read+0x54>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <Uart_read+0x54>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d102      	bne.n	80010d8 <Uart_read+0x20>
  {
    return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e013      	b.n	8001100 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <Uart_read+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <Uart_read+0x54>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010e4:	5cd3      	ldrb	r3, [r2, r3]
 80010e6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <Uart_read+0x54>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <Uart_read+0x54>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200016e4 	.word	0x200016e4

08001110 <Uart_write>:

/* writes a single character to the uart and increments head
 */
int Uart_write(int c)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db27      	blt.n	800116e <Uart_write+0x5e>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <Uart_write+0x70>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001126:	3301      	adds	r3, #1
 8001128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800112c:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800112e:	bf00      	nop
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <Uart_write+0x70>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	429a      	cmp	r2, r3
 800113c:	d0f8      	beq.n	8001130 <Uart_write+0x20>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <Uart_write+0x70>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <Uart_write+0x70>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	b2c9      	uxtb	r1, r1
 800114e:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <Uart_write+0x70>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <Uart_write+0x74>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <Uart_write+0x74>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001168:	60da      	str	r2, [r3, #12]
		return 0;
 800116a:	2300      	movs	r3, #0
 800116c:	e001      	b.n	8001172 <Uart_write+0x62>
	}
	return -1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200016e0 	.word	0x200016e0
 8001184:	20001684 	.word	0x20001684

08001188 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <IsDataAvailable+0x30>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <IsDataAvailable+0x30>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800119e:	b29b      	uxth	r3, r3
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	200016e4 	.word	0x200016e4

080011bc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <Uart_isr+0x4a>
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00e      	beq.n	8001206 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <Uart_isr+0xb4>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff36 	bl	8001070 <store_char>
        return;
 8001204:	e031      	b.n	800126a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120c:	2b00      	cmp	r3, #0
 800120e:	d02c      	beq.n	800126a <Uart_isr+0xae>
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	d027      	beq.n	800126a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <Uart_isr+0xb8>)
 800121c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <Uart_isr+0xb8>)
 8001222:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001226:	429a      	cmp	r2, r3
 8001228:	d108      	bne.n	800123c <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001238:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800123a:	e015      	b.n	8001268 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800123c:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <Uart_isr+0xb8>)
 800123e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <Uart_isr+0xb8>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <Uart_isr+0xb8>)
 800124a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800124e:	3301      	adds	r3, #1
 8001250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001254:	4a07      	ldr	r2, [pc, #28]	; (8001274 <Uart_isr+0xb8>)
 8001256:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	7bba      	ldrb	r2, [r7, #14]
 8001266:	605a      	str	r2, [r3, #4]
    	return;
 8001268:	bf00      	nop
    }
}
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200016e4 	.word	0x200016e4
 8001274:	20000468 	.word	0x20000468

08001278 <_ZN11ATCmdParser6p_putcEc>:
static char *Advance( char *bufp );
int vsscanf_avr( char *buf, char *format, va_list argp );

//  /putc handling with timeouts
int ATCmdParser::p_putc(char c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
//    return Uart_write(c);
    //return _serial->write(&c,1);
    return Uart_write(c);
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff42 	bl	8001110 <Uart_write>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZN11ATCmdParser6p_getcEv>:
}
*/


int ATCmdParser::p_getc()
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b084      	sub	sp, #16
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
    int recved_byte;

    unsigned long start = millis();
 800129e:	f002 fdbd 	bl	8003e1c <HAL_GetTick>
 80012a2:	60f8      	str	r0, [r7, #12]

    while( (millis() - start < (unsigned long)_timeout) ) {
 80012a4:	f002 fdba 	bl	8003e1c <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	bf34      	ite	cc
 80012b6:	2301      	movcc	r3, #1
 80012b8:	2300      	movcs	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00e      	beq.n	80012de <_ZN11ATCmdParser6p_getcEv+0x48>
        if( IsDataAvailable() ) {
 80012c0:	f7ff ff62 	bl	8001188 <IsDataAvailable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0e7      	beq.n	80012a4 <_ZN11ATCmdParser6p_getcEv+0xe>
            recved_byte = Uart_read();
 80012d4:	f7ff fef0 	bl	80010b8 <Uart_read>
 80012d8:	60b8      	str	r0, [r7, #8]
            //LOGDEBUG0((char)recved_byte);
            return recved_byte;
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	e001      	b.n	80012e2 <_ZN11ATCmdParser6p_getcEv+0x4c>
        }
    }

    return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_ZN11ATCmdParser5flushEv>:

void ATCmdParser::flush()
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
    unsigned char ch;
    while (IsDataAvailable())
 80012f2:	f7ff ff49 	bl	8001188 <IsDataAvailable>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <_ZN11ATCmdParser5flushEv+0x26>
    {
        ch = Uart_read();
 8001306:	f7ff fed7 	bl	80010b8 <Uart_read>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
    while (IsDataAvailable())
 800130e:	e7f0      	b.n	80012f2 <_ZN11ATCmdParser5flushEv+0x8>
    }
    // sekim 20200514 Remove Warning    
    ch;
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_ZN11ATCmdParser5writeEPKci>:

// read/write handling with timeouts
int ATCmdParser::write(const char *data, int size)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
    for ( ; i < size; i++) {
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	da13      	bge.n	8001358 <_ZN11ATCmdParser5writeEPKci+0x40>
        if (p_putc(data[i]) < 0) {
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff ff9c 	bl	8001278 <_ZN11ATCmdParser6p_putcEc>
 8001340:	4603      	mov	r3, r0
 8001342:	0fdb      	lsrs	r3, r3, #31
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <_ZN11ATCmdParser5writeEPKci+0x38>
            return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	e004      	b.n	800135a <_ZN11ATCmdParser5writeEPKci+0x42>
    for ( ; i < size; i++) {
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	e7e7      	b.n	8001328 <_ZN11ATCmdParser5writeEPKci+0x10>
        }
    }
    return i;
 8001358:	697b      	ldr	r3, [r7, #20]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_ZN11ATCmdParser4readEPci>:

int ATCmdParser::read(char *data, int size)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
    int i = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
    for ( ; i < size; i++) {
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	da13      	bge.n	80013a2 <_ZN11ATCmdParser4readEPci+0x40>
        int c = p_getc();
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ff8b 	bl	8001296 <_ZN11ATCmdParser6p_getcEv>
 8001380:	6138      	str	r0, [r7, #16]
        if (c < 0) {
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	da02      	bge.n	800138e <_ZN11ATCmdParser4readEPci+0x2c>
            return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	e00a      	b.n	80013a4 <_ZN11ATCmdParser4readEPci+0x42>
        }
        data[i] = c;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	4413      	add	r3, r2
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
    for ( ; i < size; i++) {
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e7e7      	b.n	8001372 <_ZN11ATCmdParser4readEPci+0x10>
    }
    return i;
 80013a2:	697b      	ldr	r3, [r7, #20]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_ZN11ATCmdParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATCmdParser::vsend(const char *command, va_list args)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
    if (vsprintf(_buffer, command, args) < 0) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	68b9      	ldr	r1, [r7, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f008 faaf 	bl	8009924 <vsiprintf>
 80013c6:	4603      	mov	r3, r0
 80013c8:	0fdb      	lsrs	r3, r3, #31
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x28>
        return false;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e03a      	b.n	800144a <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x9e>
    }

    for (int i = 0; _buffer[i]; i++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x62>
        if (p_putc(_buffer[i]) < 0) {
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff ff40 	bl	8001278 <_ZN11ATCmdParser6p_putcEc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	0fdb      	lsrs	r3, r3, #31
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x5a>
            return false;
 8001402:	2300      	movs	r3, #0
 8001404:	e021      	b.n	800144a <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x9e>
    for (int i = 0; _buffer[i]; i++) {
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e7e4      	b.n	80013d8 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x2c>
        }
    }

    // Finish with newline
    for (size_t i = 0; _output_delimiter[i]; i++) {
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x9c>
        if (p_putc(_output_delimiter[i]) < 0) {
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff ff23 	bl	8001278 <_ZN11ATCmdParser6p_putcEc>
 8001432:	4603      	mov	r3, r0
 8001434:	0fdb      	lsrs	r3, r3, #31
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x94>
            return false;
 800143c:	2300      	movs	r3, #0
 800143e:	e004      	b.n	800144a <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x9e>
    for (size_t i = 0; _output_delimiter[i]; i++) {
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	3301      	adds	r3, #1
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e7e4      	b.n	8001412 <_ZN11ATCmdParser5vsendEPKcSt9__va_list+0x66>
        }
    }

//    LOGDEBUG1(F("AT> "),_buffer);
    return true;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list>:

bool ATCmdParser::vrecv(const char *response, va_list args)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b08a      	sub	sp, #40	; 0x28
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
// sekim 20200514 Remove Warning    
//restart:
    _aborted = false;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2200      	movs	r2, #0
 8001462:	759a      	strb	r2, [r3, #22]
    // Iterate through each line in the expected response
    while (response[0]) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8103 	beq.w	8001674 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x222>
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
        int offset = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
        bool whole_line_wanted = false;
 8001476:	2300      	movs	r3, #0
 8001478:	77fb      	strb	r3, [r7, #31]

        while (response[i]) {
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d051      	beq.n	800152a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0xd8>
            if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b25      	cmp	r3, #37	; 0x25
 8001490:	d121      	bne.n	80014d6 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x84>
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b25      	cmp	r3, #37	; 0x25
 800149e:	d01a      	beq.n	80014d6 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x84>
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b2a      	cmp	r3, #42	; 0x2a
 80014ac:	d013      	beq.n	80014d6 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x84>
                _buffer[offset++] = '%';
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	1c59      	adds	r1, r3, #1
 80014b6:	6239      	str	r1, [r7, #32]
 80014b8:	4413      	add	r3, r2
 80014ba:	2225      	movs	r2, #37	; 0x25
 80014bc:	701a      	strb	r2, [r3, #0]
                _buffer[offset++] = '*';
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	1c59      	adds	r1, r3, #1
 80014c6:	6239      	str	r1, [r7, #32]
 80014c8:	4413      	add	r3, r2
 80014ca:	222a      	movs	r2, #42	; 0x2a
 80014cc:	701a      	strb	r2, [r3, #0]
                i++;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	3301      	adds	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
 80014d4:	e028      	b.n	8001528 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0xd6>
            } else {
                _buffer[offset++] = response[i++];
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	627a      	str	r2, [r7, #36]	; 0x24
 80014dc:	461a      	mov	r2, r3
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	441a      	add	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6819      	ldr	r1, [r3, #0]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	1c58      	adds	r0, r3, #1
 80014ea:	6238      	str	r0, [r7, #32]
 80014ec:	440b      	add	r3, r1
 80014ee:	7812      	ldrb	r2, [r2, #0]
 80014f0:	701a      	strb	r2, [r3, #0]
                // Find linebreaks, taking care not to be fooled if they're in a %[^\n] conversion specification
                if (response[i - 1] == '\n' && !(i >= 3 && response[i-3] == '[' && response[i-2] == '^')) {
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	3b01      	subs	r3, #1
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	4413      	add	r3, r2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b0a      	cmp	r3, #10
 80014fe:	d1bc      	bne.n	800147a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x28>
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	2b02      	cmp	r3, #2
 8001504:	dd0d      	ble.n	8001522 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0xd0>
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3b03      	subs	r3, #3
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b5b      	cmp	r3, #91	; 0x5b
 8001512:	d106      	bne.n	8001522 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0xd0>
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3b02      	subs	r3, #2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b5e      	cmp	r3, #94	; 0x5e
 8001520:	d0ab      	beq.n	800147a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x28>
                    whole_line_wanted = true;
 8001522:	2301      	movs	r3, #1
 8001524:	77fb      	strb	r3, [r7, #31]
                    break;
 8001526:	e000      	b.n	800152a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0xd8>
        while (response[i]) {
 8001528:	e7a7      	b.n	800147a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x28>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	1c59      	adds	r1, r3, #1
 8001532:	6239      	str	r1, [r7, #32]
 8001534:	4413      	add	r3, r2
 8001536:	2225      	movs	r2, #37	; 0x25
 8001538:	701a      	strb	r2, [r3, #0]
        _buffer[offset++] = 'n';
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	1c59      	adds	r1, r3, #1
 8001542:	6239      	str	r1, [r7, #32]
 8001544:	4413      	add	r3, r2
 8001546:	226e      	movs	r2, #110	; 0x6e
 8001548:	701a      	strb	r2, [r3, #0]
        _buffer[offset++] = 0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	1c59      	adds	r1, r3, #1
 8001552:	6239      	str	r1, [r7, #32]
 8001554:	4413      	add	r3, r2
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]

        while (true) {
            // Receive next character
        //    int c = (char)p_getc();
            int c = p_getc();
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fe99 	bl	8001296 <_ZN11ATCmdParser6p_getcEv>
 8001564:	6178      	str	r0, [r7, #20]
            if (c < 0) {
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da01      	bge.n	8001570 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x11e>
//                LOGDEBUG(F("AT(Timeout)"));
                return false;
 800156c:	2300      	movs	r3, #0
 800156e:	e082      	b.n	8001676 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x224>
            }
            // Simplify newlines (borrowed from retarget.cpp)
            if ((c == CR && _in_prev != LF) ||
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b0d      	cmp	r3, #13
 8001574:	d103      	bne.n	800157e <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x12c>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	7d1b      	ldrb	r3, [r3, #20]
 800157a:	2b0a      	cmp	r3, #10
 800157c:	d106      	bne.n	800158c <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x13a>
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b0a      	cmp	r3, #10
 8001582:	d10a      	bne.n	800159a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x148>
                (c == LF && _in_prev != CR)) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	7d1b      	ldrb	r3, [r3, #20]
 8001588:	2b0d      	cmp	r3, #13
 800158a:	d006      	beq.n	800159a <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x148>
                _in_prev = (char)c;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	751a      	strb	r2, [r3, #20]
                c = '\n';
 8001594:	230a      	movs	r3, #10
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e016      	b.n	80015c8 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x176>
            } else if ((c == CR && _in_prev == LF) ||
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b0d      	cmp	r3, #13
 800159e:	d103      	bne.n	80015a8 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x156>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	7d1b      	ldrb	r3, [r3, #20]
 80015a4:	2b0a      	cmp	r3, #10
 80015a6:	d006      	beq.n	80015b6 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x164>
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d108      	bne.n	80015c0 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x16e>
                       (c == LF && _in_prev == CR)) {
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	7d1b      	ldrb	r3, [r3, #20]
 80015b2:	2b0d      	cmp	r3, #13
 80015b4:	d104      	bne.n	80015c0 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x16e>
                _in_prev = c;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	751a      	strb	r2, [r3, #20]
 80015be:	e7ce      	b.n	800155e <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x10c>
                // onto next character
                continue;
            } else {
                _in_prev = c;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	751a      	strb	r2, [r3, #20]
            }
            _buffer[offset + j++] = c;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1c59      	adds	r1, r3, #1
 80015d0:	61b9      	str	r1, [r7, #24]
 80015d2:	6a39      	ldr	r1, [r7, #32]
 80015d4:	440b      	add	r3, r1
 80015d6:	4413      	add	r3, r2
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]
            _buffer[offset + j] = 0;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a39      	ldr	r1, [r7, #32]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	440a      	add	r2, r1
 80015e8:	4413      	add	r3, r2
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
//                    goto restart;
//                }
//            }

            // Check for match
            int count = -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	613b      	str	r3, [r7, #16]
            if (whole_line_wanted && c != '\n') {
 80015f4:	7ffb      	ldrb	r3, [r7, #31]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x1ae>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b0a      	cmp	r3, #10
 80015fe:	d10a      	bne.n	8001616 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x1c4>
                // Don't attempt scanning until we get delimiter if they included it in format
                // This allows recv("Foo: %s\n") to work, and not match with just the first character of a string
                // (scanf does not itself match whitespace in its format string, so \n is not significant to it)
            } else {
                sscanf(_buffer+offset, _buffer, &count);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	18d0      	adds	r0, r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f107 0210 	add.w	r2, r7, #16
 8001610:	4619      	mov	r1, r3
 8001612:	f007 fa25 	bl	8008a60 <siscanf>

            }

            // We only succeed if all characters in the response are matched
            if (count == j) {
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	429a      	cmp	r2, r3
 800161c:	d11b      	bne.n	8001656 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x204>
//                LOGDEBUG1(F("AT= "),_buffer+offset);
                // Reuse the front end of the buffer
                memcpy(_buffer, response, i);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4618      	mov	r0, r3
 8001628:	f006 f9d8 	bl	80079dc <memcpy>
                _buffer[i] = 0;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	4413      	add	r3, r2
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
                char *ptr3 = va_arg(args,char*); char *ptr4 = va_arg(args,char*);
                char *ptr5 = va_arg(args,char*); char *ptr6 = va_arg(args,char*);

                sscanf(_buffer+offset,_buffer,ptr1,ptr2,ptr3,ptr4,ptr5,ptr6);
#else
                vsscanf(_buffer+offset,_buffer, args);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	18d0      	adds	r0, r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4619      	mov	r1, r3
 8001648:	f008 f99a 	bl	8009980 <vsiscanf>
#endif

                // Jump to next line and continue parsing
                response += i;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
    while (response[0]) {
 8001654:	e706      	b.n	8001464 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x12>
                break;
            }

            // Clear the buffer when we hit a newline or ran out of space
            // running out of space usually means we ran into binary data
            if (c == '\n' || j+1 >= _buffer_size - offset) {
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2b0a      	cmp	r3, #10
 800165a:	d008      	beq.n	800166e <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x21c>
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	1acb      	subs	r3, r1, r3
 8001668:	429a      	cmp	r2, r3
 800166a:	f6ff af78 	blt.w	800155e <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x10c>
//                LOGDEBUG1(F("AT< "),_buffer+offset);
                j = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
            }
        }
 8001672:	e774      	b.n	800155e <_ZN11ATCmdParser5vrecvEPKcSt9__va_list+0x10c>
    }

    return true;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZN11ATCmdParser4sendEPKcz>:
//
//    return true;
//}

bool ATCmdParser::send(const char *command, ...)
{
 800167e:	b40e      	push	{r1, r2, r3}
 8001680:	b580      	push	{r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, command);
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	60bb      	str	r3, [r7, #8]
    bool res = vsend(command, args);
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	69f9      	ldr	r1, [r7, #28]
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fe8a 	bl	80013ac <_ZN11ATCmdParser5vsendEPKcSt9__va_list>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]
    va_end(args);
    return res;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a8:	b003      	add	sp, #12
 80016aa:	4770      	bx	lr

080016ac <_ZN11ATCmdParser4recvEPKcz>:
//    return res;
//}


bool ATCmdParser::recv(const char *response, ...)
{
 80016ac:	b40e      	push	{r1, r2, r3}
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
    va_list args;
    va_start(args, response);
 80016b6:	f107 0320 	add.w	r3, r7, #32
 80016ba:	60bb      	str	r3, [r7, #8]
    bool res = vrecv(response, args);
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	69f9      	ldr	r1, [r7, #28]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fec6 	bl	8001452 <_ZN11ATCmdParser5vrecvEPKcSt9__va_list>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
    va_end(args);
    return res;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016d6:	b003      	add	sp, #12
 80016d8:	4770      	bx	lr
	...

080016dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <MX_GPIO_Init+0xd0>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <MX_GPIO_Init+0xd0>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a25      	ldr	r2, [pc, #148]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_GPIO_Init+0xd0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_GPIO_Init+0xd0>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_GPIO_Init+0xd0>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, bg96_rst_Pin|bg96_pwr_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	2123      	movs	r1, #35	; 0x23
 8001766:	4812      	ldr	r0, [pc, #72]	; (80017b0 <MX_GPIO_Init+0xd4>)
 8001768:	f002 feb0 	bl	80044cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_GPIO_Init+0xd8>)
 8001784:	f002 fd1e 	bl	80041c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = bg96_rst_Pin|bg96_pwr_Pin|LD2_Pin;
 8001788:	2323      	movs	r3, #35	; 0x23
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	4804      	ldr	r0, [pc, #16]	; (80017b0 <MX_GPIO_Init+0xd4>)
 80017a0:	f002 fd10 	bl	80041c4 <HAL_GPIO_Init>

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40020800 	.word	0x40020800

080017b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x50>)
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_I2C1_Init+0x58>)
 80017c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f6:	f002 fe83 	bl	8004500 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f001 fe86 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	200016ec 	.word	0x200016ec
 800180c:	40005400 	.word	0x40005400
 8001810:	000186a0 	.word	0x000186a0

08001814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_I2C_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12b      	bne.n	800188e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_I2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_I2C_MspInit+0x88>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_I2C_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <HAL_I2C_MspInit+0x8c>)
 800186e:	f002 fca9 	bl	80041c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_I2C_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_I2C_MspInit+0x88>)
 800187c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_I2C_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40005400 	.word	0x40005400
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020400 	.word	0x40020400

080018a4 <_ZN11ATCmdParserC1EPKciib>:
     * @param output_delimiter end of command line termination
     * @param buffer_size size of internal buffer for transaction
     * @param timeout timeout of the connection
     * @param debug turns on/off debug output for AT commands
     */
    ATCmdParser(const char *output_delimiter = "\r",
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
             int buffer_size = 256, int timeout = 8000, bool debug = false)
            :  _buffer_size(buffer_size), _in_prev(0), _oobs(NULL)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	751a      	strb	r2, [r3, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	621a      	str	r2, [r3, #32]
    {
        _buffer = new char[buffer_size];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 f82f 	bl	8007936 <_Znaj>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	601a      	str	r2, [r3, #0]
        set_timeout(timeout);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f833 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>
        set_delimiter(output_delimiter);
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f84c 	bl	800198a <_ZN11ATCmdParser13set_delimiterEPKc>
        debug_on(debug);
 80018f2:	7e3b      	ldrb	r3, [r7, #24]
 80018f4:	4619      	mov	r1, r3
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f85a 	bl	80019b0 <_ZN11ATCmdParser8debug_onEh>
    }
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <_ZN11ATCmdParserD1Ev>:

    /**
     * Destructor
     */
    ~ATCmdParser()
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
    {
        while (_oobs) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00e      	beq.n	8001934 <_ZN11ATCmdParserD1Ev+0x2e>
            struct oob *oob = _oobs;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	60fb      	str	r3, [r7, #12]
            _oobs = oob->next;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	621a      	str	r2, [r3, #32]
            delete oob;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f1      	beq.n	800190e <_ZN11ATCmdParserD1Ev+0x8>
 800192a:	2110      	movs	r1, #16
 800192c:	4618      	mov	r0, r3
 800192e:	f005 ffed 	bl	800790c <_ZdlPvj>
        while (_oobs) {
 8001932:	e7ec      	b.n	800190e <_ZN11ATCmdParserD1Ev+0x8>
        }
        delete[] _buffer;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <_ZN11ATCmdParserD1Ev+0x40>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f005 ffe5 	bl	8007910 <_ZdaPv>
    }
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN11ATCmdParser11set_timeoutEm>:
    /**
     * Allows timeout to be changed between commands
     *
     * @param timeout timeout of the connection
     */
    int set_timeout(uint32_t timeout)
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
    {
        _timeout = timeout;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	609a      	str	r2, [r3, #8]
        //_serial->setTimeout(_timeout);
    	currentTime = millis();
 8001960:	f002 fa5c 	bl	8003e1c <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	61da      	str	r2, [r3, #28]
    	if ((currentTime - previousTime) >= _timeout)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69da      	ldr	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	1ad2      	subs	r2, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d301      	bcc.n	8001980 <_ZN11ATCmdParser11set_timeoutEm+0x30>
    		return true;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <_ZN11ATCmdParser11set_timeoutEm+0x32>
    	return false;
 8001980:	2300      	movs	r3, #0
    }
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_ZN11ATCmdParser13set_delimiterEPKc>:
    /**
     * Sets string of characters to use as line delimiters
     *
     * @param output_delimiter string of characters to use as line delimiters
     */
    void set_delimiter(const char *output_delimiter)
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	6039      	str	r1, [r7, #0]
    {
        _output_delimiter = output_delimiter;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	60da      	str	r2, [r3, #12]
        _output_delim_size = strlen(output_delimiter);
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f7fe fc20 	bl	80001e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	611a      	str	r2, [r3, #16]
    }
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN11ATCmdParser8debug_onEh>:
    /**
     * Allows traces from modem to be turned on or off
     *
     * @param on set as 1 to turn on traces and vice versa.
     */
    void debug_on(uint8_t on)
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
    {
        _dbg_on = (on) ? 1 : 0;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	755a      	strb	r2, [r3, #21]
    }
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_Z18setEchoStatus_BG96b>:
//{
//  Serial2.begin(WM_N400MSE_DEFAULT_BAUD_RATE,SERIAL_8N1,16,17);
//}

int8_t setEchoStatus_BG96(bool onoff)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ( onoff == true )
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12b      	bne.n	8001a40 <_Z18setEchoStatus_BG96b+0x68>
  {
    if ( !(m_parser.send("ATE1") && m_parser.recv(RESP_OK)) ) {
 80019e8:	492f      	ldr	r1, [pc, #188]	; (8001aa8 <_Z18setEchoStatus_BG96b+0xd0>)
 80019ea:	4830      	ldr	r0, [pc, #192]	; (8001aac <_Z18setEchoStatus_BG96b+0xd4>)
 80019ec:	f7ff fe47 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <_Z18setEchoStatus_BG96b+0x38>
 80019fc:	492c      	ldr	r1, [pc, #176]	; (8001ab0 <_Z18setEchoStatus_BG96b+0xd8>)
 80019fe:	482b      	ldr	r0, [pc, #172]	; (8001aac <_Z18setEchoStatus_BG96b+0xd4>)
 8001a00:	f7ff fe54 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <_Z18setEchoStatus_BG96b+0x3c>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <_Z18setEchoStatus_BG96b+0x3e>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <_Z18setEchoStatus_BG96b+0x56>
      LOGDEBUG("Echo On: Failed\r\n");
 8001a1a:	4926      	ldr	r1, [pc, #152]	; (8001ab4 <_Z18setEchoStatus_BG96b+0xdc>)
 8001a1c:	4826      	ldr	r0, [pc, #152]	; (8001ab8 <_Z18setEchoStatus_BG96b+0xe0>)
 8001a1e:	f006 ff17 	bl	8008850 <iprintf>
 8001a22:	4826      	ldr	r0, [pc, #152]	; (8001abc <_Z18setEchoStatus_BG96b+0xe4>)
 8001a24:	f006 ff9a 	bl	800895c <puts>
      return RET_NOK;
 8001a28:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2c:	e037      	b.n	8001a9e <_Z18setEchoStatus_BG96b+0xc6>
    }
    else
    {
      LOGDEBUG("Echo On: Success\r\n");
 8001a2e:	4921      	ldr	r1, [pc, #132]	; (8001ab4 <_Z18setEchoStatus_BG96b+0xdc>)
 8001a30:	4821      	ldr	r0, [pc, #132]	; (8001ab8 <_Z18setEchoStatus_BG96b+0xe0>)
 8001a32:	f006 ff0d 	bl	8008850 <iprintf>
 8001a36:	4822      	ldr	r0, [pc, #136]	; (8001ac0 <_Z18setEchoStatus_BG96b+0xe8>)
 8001a38:	f006 ff90 	bl	800895c <puts>
      return RET_OK;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e02e      	b.n	8001a9e <_Z18setEchoStatus_BG96b+0xc6>
    }

  }
  else if ( onoff == false )
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d12b      	bne.n	8001a9e <_Z18setEchoStatus_BG96b+0xc6>
  {
    if ( !(m_parser.send("ATE0") && m_parser.recv(RESP_OK)) ) {
 8001a46:	491f      	ldr	r1, [pc, #124]	; (8001ac4 <_Z18setEchoStatus_BG96b+0xec>)
 8001a48:	4818      	ldr	r0, [pc, #96]	; (8001aac <_Z18setEchoStatus_BG96b+0xd4>)
 8001a4a:	f7ff fe18 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <_Z18setEchoStatus_BG96b+0x96>
 8001a5a:	4915      	ldr	r1, [pc, #84]	; (8001ab0 <_Z18setEchoStatus_BG96b+0xd8>)
 8001a5c:	4813      	ldr	r0, [pc, #76]	; (8001aac <_Z18setEchoStatus_BG96b+0xd4>)
 8001a5e:	f7ff fe25 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f083 0301 	eor.w	r3, r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_Z18setEchoStatus_BG96b+0x9a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <_Z18setEchoStatus_BG96b+0x9c>
 8001a72:	2300      	movs	r3, #0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <_Z18setEchoStatus_BG96b+0xb4>
      LOGDEBUG("Echo Off: Failed\r\n");
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <_Z18setEchoStatus_BG96b+0xdc>)
 8001a7a:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <_Z18setEchoStatus_BG96b+0xe0>)
 8001a7c:	f006 fee8 	bl	8008850 <iprintf>
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <_Z18setEchoStatus_BG96b+0xf0>)
 8001a82:	f006 ff6b 	bl	800895c <puts>
      return RET_NOK;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e008      	b.n	8001a9e <_Z18setEchoStatus_BG96b+0xc6>
    }
    else
    {
      LOGDEBUG("Echo Off: Success\r\n");
 8001a8c:	4909      	ldr	r1, [pc, #36]	; (8001ab4 <_Z18setEchoStatus_BG96b+0xdc>)
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <_Z18setEchoStatus_BG96b+0xe0>)
 8001a90:	f006 fede 	bl	8008850 <iprintf>
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <_Z18setEchoStatus_BG96b+0xf4>)
 8001a96:	f006 ff61 	bl	800895c <puts>
      return RET_OK;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e7ff      	b.n	8001a9e <_Z18setEchoStatus_BG96b+0xc6>
    }
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800ccb0 	.word	0x0800ccb0
 8001aac:	20000670 	.word	0x20000670
 8001ab0:	0800ccb8 	.word	0x0800ccb8
 8001ab4:	0800ccc0 	.word	0x0800ccc0
 8001ab8:	0800ccc8 	.word	0x0800ccc8
 8001abc:	0800ccd0 	.word	0x0800ccd0
 8001ac0:	0800cce4 	.word	0x0800cce4
 8001ac4:	0800ccf8 	.word	0x0800ccf8
 8001ac8:	0800cd00 	.word	0x0800cd00
 8001acc:	0800cd14 	.word	0x0800cd14

08001ad0 <_Z18getUsimStatus_BG96v>:



int8_t getUsimStatus_BG96(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b090      	sub	sp, #64	; 0x40
 8001ad4:	af00      	add	r7, sp, #0
  char usim_stat[10], detail[10];
  char buf[40];

  if ( m_parser.send("AT+CPIN?") &&
 8001ad6:	492c      	ldr	r1, [pc, #176]	; (8001b88 <_Z18getUsimStatus_BG96v+0xb8>)
 8001ad8:	482c      	ldr	r0, [pc, #176]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001ada:	f7ff fdd0 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001ade:	4603      	mov	r3, r0
       m_parser.recv("+CPIN: READY\n") &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00f      	beq.n	8001b04 <_Z18getUsimStatus_BG96v+0x34>
 8001ae4:	492a      	ldr	r1, [pc, #168]	; (8001b90 <_Z18getUsimStatus_BG96v+0xc0>)
 8001ae6:	4829      	ldr	r0, [pc, #164]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001ae8:	f7ff fde0 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001aec:	4603      	mov	r3, r0
  if ( m_parser.send("AT+CPIN?") &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <_Z18getUsimStatus_BG96v+0x34>
       m_parser.recv(RESP_OK) ) {
 8001af2:	4928      	ldr	r1, [pc, #160]	; (8001b94 <_Z18getUsimStatus_BG96v+0xc4>)
 8001af4:	4825      	ldr	r0, [pc, #148]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001af6:	f7ff fdd9 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001afa:	4603      	mov	r3, r0
       m_parser.recv("+CPIN: READY\n") &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <_Z18getUsimStatus_BG96v+0x34>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <_Z18getUsimStatus_BG96v+0x36>
 8001b04:	2300      	movs	r3, #0
  if ( m_parser.send("AT+CPIN?") &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <_Z18getUsimStatus_BG96v+0x4c>
    LOGDEBUG("USIM Status: READY\r\n");
 8001b0a:	4923      	ldr	r1, [pc, #140]	; (8001b98 <_Z18getUsimStatus_BG96v+0xc8>)
 8001b0c:	4823      	ldr	r0, [pc, #140]	; (8001b9c <_Z18getUsimStatus_BG96v+0xcc>)
 8001b0e:	f006 fe9f 	bl	8008850 <iprintf>
 8001b12:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <_Z18getUsimStatus_BG96v+0xd0>)
 8001b14:	f006 ff22 	bl	800895c <puts>
    return RET_OK;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e030      	b.n	8001b7e <_Z18getUsimStatus_BG96v+0xae>
  }

  else if ( m_parser.send("AT+CPIN?") &&
 8001b1c:	491a      	ldr	r1, [pc, #104]	; (8001b88 <_Z18getUsimStatus_BG96v+0xb8>)
 8001b1e:	481b      	ldr	r0, [pc, #108]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001b20:	f7ff fdad 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001b24:	4603      	mov	r3, r0
    m_parser.recv("+CPIN: %[^,],%[^\n]\n", usim_stat, detail) &&
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d013      	beq.n	8001b52 <_Z18getUsimStatus_BG96v+0x82>
 8001b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b32:	491c      	ldr	r1, [pc, #112]	; (8001ba4 <_Z18getUsimStatus_BG96v+0xd4>)
 8001b34:	4815      	ldr	r0, [pc, #84]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001b36:	f7ff fdb9 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001b3a:	4603      	mov	r3, r0
  else if ( m_parser.send("AT+CPIN?") &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d008      	beq.n	8001b52 <_Z18getUsimStatus_BG96v+0x82>
    m_parser.recv(RESP_OK) ) {
 8001b40:	4914      	ldr	r1, [pc, #80]	; (8001b94 <_Z18getUsimStatus_BG96v+0xc4>)
 8001b42:	4812      	ldr	r0, [pc, #72]	; (8001b8c <_Z18getUsimStatus_BG96v+0xbc>)
 8001b44:	f7ff fdb2 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001b48:	4603      	mov	r3, r0
    m_parser.recv("+CPIN: %[^,],%[^\n]\n", usim_stat, detail) &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <_Z18getUsimStatus_BG96v+0x82>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <_Z18getUsimStatus_BG96v+0x84>
 8001b52:	2300      	movs	r3, #0
  else if ( m_parser.send("AT+CPIN?") &&
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d012      	beq.n	8001b7e <_Z18getUsimStatus_BG96v+0xae>
    sprintf((char *)buf, "USIM Satatus: %s, %s", usim_stat, detail);
 8001b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b5c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b60:	4638      	mov	r0, r7
 8001b62:	4911      	ldr	r1, [pc, #68]	; (8001ba8 <_Z18getUsimStatus_BG96v+0xd8>)
 8001b64:	f006 ff5c 	bl	8008a20 <siprintf>
    LOGDEBUG(buf);
 8001b68:	490b      	ldr	r1, [pc, #44]	; (8001b98 <_Z18getUsimStatus_BG96v+0xc8>)
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <_Z18getUsimStatus_BG96v+0xcc>)
 8001b6c:	f006 fe70 	bl	8008850 <iprintf>
 8001b70:	463b      	mov	r3, r7
 8001b72:	4618      	mov	r0, r3
 8001b74:	f006 fe6c 	bl	8008850 <iprintf>
    return RET_NOK;
 8001b78:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7c:	e7ff      	b.n	8001b7e <_Z18getUsimStatus_BG96v+0xae>
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3740      	adds	r7, #64	; 0x40
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	0800cd28 	.word	0x0800cd28
 8001b8c:	20000670 	.word	0x20000670
 8001b90:	0800cd34 	.word	0x0800cd34
 8001b94:	0800ccb8 	.word	0x0800ccb8
 8001b98:	0800ccc0 	.word	0x0800ccc0
 8001b9c:	0800ccc8 	.word	0x0800ccc8
 8001ba0:	0800cd44 	.word	0x0800cd44
 8001ba4:	0800cd58 	.word	0x0800cd58
 8001ba8:	0800cd6c 	.word	0x0800cd6c

08001bac <_Z21getNetworkStatus_BG96v>:

int8_t getNetworkStatus_BG96(void)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b09f      	sub	sp, #124	; 0x7c
 8001bb0:	af00      	add	r7, sp, #0
  char mode[40], stat[40];
  char buf[40];

  if ( m_parser.send("AT+CEREG?") &&
 8001bb2:	4935      	ldr	r1, [pc, #212]	; (8001c88 <_Z21getNetworkStatus_BG96v+0xdc>)
 8001bb4:	4835      	ldr	r0, [pc, #212]	; (8001c8c <_Z21getNetworkStatus_BG96v+0xe0>)
 8001bb6:	f7ff fd62 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001bba:	4603      	mov	r3, r0
       m_parser.recv("+CEREG: %[^,],%[^\n]\n", mode, stat) &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <_Z21getNetworkStatus_BG96v+0x3c>
 8001bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bc4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001bc8:	4931      	ldr	r1, [pc, #196]	; (8001c90 <_Z21getNetworkStatus_BG96v+0xe4>)
 8001bca:	4830      	ldr	r0, [pc, #192]	; (8001c8c <_Z21getNetworkStatus_BG96v+0xe0>)
 8001bcc:	f7ff fd6e 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001bd0:	4603      	mov	r3, r0
  if ( m_parser.send("AT+CEREG?") &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d008      	beq.n	8001be8 <_Z21getNetworkStatus_BG96v+0x3c>
       m_parser.recv(RESP_OK) ) {
 8001bd6:	492f      	ldr	r1, [pc, #188]	; (8001c94 <_Z21getNetworkStatus_BG96v+0xe8>)
 8001bd8:	482c      	ldr	r0, [pc, #176]	; (8001c8c <_Z21getNetworkStatus_BG96v+0xe0>)
 8001bda:	f7ff fd67 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001bde:	4603      	mov	r3, r0
       m_parser.recv("+CEREG: %[^,],%[^\n]\n", mode, stat) &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_Z21getNetworkStatus_BG96v+0x3c>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <_Z21getNetworkStatus_BG96v+0x3e>
 8001be8:	2300      	movs	r3, #0
  if ( m_parser.send("AT+CEREG?") &&
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d046      	beq.n	8001c7c <_Z21getNetworkStatus_BG96v+0xd0>

    if ( (atoi(mode) == 0) && (atoi(stat) == 1) ) {
 8001bee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f005 feb3 	bl	800795e <atoi>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <_Z21getNetworkStatus_BG96v+0x66>
 8001bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c02:	4618      	mov	r0, r3
 8001c04:	f005 feab 	bl	800795e <atoi>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <_Z21getNetworkStatus_BG96v+0x66>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <_Z21getNetworkStatus_BG96v+0x68>
 8001c12:	2300      	movs	r3, #0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <_Z21getNetworkStatus_BG96v+0x7e>
      LOGDEBUG("Network Status: Attach\r\n");
 8001c18:	491f      	ldr	r1, [pc, #124]	; (8001c98 <_Z21getNetworkStatus_BG96v+0xec>)
 8001c1a:	4820      	ldr	r0, [pc, #128]	; (8001c9c <_Z21getNetworkStatus_BG96v+0xf0>)
 8001c1c:	f006 fe18 	bl	8008850 <iprintf>
 8001c20:	481f      	ldr	r0, [pc, #124]	; (8001ca0 <_Z21getNetworkStatus_BG96v+0xf4>)
 8001c22:	f006 fe9b 	bl	800895c <puts>
      return RET_OK;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e02a      	b.n	8001c80 <_Z21getNetworkStatus_BG96v+0xd4>
    }

    else if (( atoi(stat) != 1 )) {
 8001c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fe95 	bl	800795e <atoi>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <_Z21getNetworkStatus_BG96v+0xd0>
      sprintf((char *)buf, "Network Status: %d, %d", atoi(mode), atoi(stat));
 8001c44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fe88 	bl	800795e <atoi>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c54:	4618      	mov	r0, r3
 8001c56:	f005 fe82 	bl	800795e <atoi>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	4622      	mov	r2, r4
 8001c60:	4910      	ldr	r1, [pc, #64]	; (8001ca4 <_Z21getNetworkStatus_BG96v+0xf8>)
 8001c62:	f006 fedd 	bl	8008a20 <siprintf>
      LOGDEBUG(buf);
 8001c66:	490c      	ldr	r1, [pc, #48]	; (8001c98 <_Z21getNetworkStatus_BG96v+0xec>)
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <_Z21getNetworkStatus_BG96v+0xf0>)
 8001c6a:	f006 fdf1 	bl	8008850 <iprintf>
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4618      	mov	r0, r3
 8001c72:	f006 fded 	bl	8008850 <iprintf>
      return RET_NOK;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e001      	b.n	8001c80 <_Z21getNetworkStatus_BG96v+0xd4>
    }
  }
  return RET_NOK;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	377c      	adds	r7, #124	; 0x7c
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	0800cd84 	.word	0x0800cd84
 8001c8c:	20000670 	.word	0x20000670
 8001c90:	0800cd90 	.word	0x0800cd90
 8001c94:	0800ccb8 	.word	0x0800ccb8
 8001c98:	0800ccc0 	.word	0x0800ccc0
 8001c9c:	0800ccc8 	.word	0x0800ccc8
 8001ca0:	0800cda8 	.word	0x0800cda8
 8001ca4:	0800cdc0 	.word	0x0800cdc0

08001ca8 <_Z18serialAtParserInitv>:

void serialAtParserInit()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  m_parser.set_timeout(1000);
 8001cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb0:	4804      	ldr	r0, [pc, #16]	; (8001cc4 <_Z18serialAtParserInitv+0x1c>)
 8001cb2:	f7ff fe4d 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>
  m_parser.set_delimiter("\r");
 8001cb6:	4904      	ldr	r1, [pc, #16]	; (8001cc8 <_Z18serialAtParserInitv+0x20>)
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <_Z18serialAtParserInitv+0x1c>)
 8001cba:	f7ff fe66 	bl	800198a <_ZN11ATCmdParser13set_delimiterEPKc>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000670 	.word	0x20000670
 8001cc8:	0800cdd8 	.word	0x0800cdd8

08001ccc <_Z15catm1DeviceInitv>:
void catm1DeviceInit()
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
//  serialDeviceInit();
  serialAtParserInit();
 8001cd0:	f7ff ffea 	bl	8001ca8 <_Z18serialAtParserInitv>
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_Z14waitCatM1Readyv>:
// ----------------------------------------------------------------
// Functions: Cat.M1 Status
// ----------------------------------------------------------------

int8_t waitCatM1Ready()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  while (1)
  {
    if (m_parser.recv("RDY")) {
 8001cdc:	4915      	ldr	r1, [pc, #84]	; (8001d34 <_Z14waitCatM1Readyv+0x5c>)
 8001cde:	4816      	ldr	r0, [pc, #88]	; (8001d38 <_Z14waitCatM1Readyv+0x60>)
 8001ce0:	f7ff fce4 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <_Z14waitCatM1Readyv+0x22>
      MYPRINTF("BG96 ready\r\n");
 8001cea:	4814      	ldr	r0, [pc, #80]	; (8001d3c <_Z14waitCatM1Readyv+0x64>)
 8001cec:	f006 fdb0 	bl	8008850 <iprintf>
 8001cf0:	4813      	ldr	r0, [pc, #76]	; (8001d40 <_Z14waitCatM1Readyv+0x68>)
 8001cf2:	f006 fe33 	bl	800895c <puts>
      return RET_OK;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e019      	b.n	8001d2e <_Z14waitCatM1Readyv+0x56>
    }
    else if (m_parser.send("AT") && m_parser.recv(RESP_OK))
 8001cfa:	4912      	ldr	r1, [pc, #72]	; (8001d44 <_Z14waitCatM1Readyv+0x6c>)
 8001cfc:	480e      	ldr	r0, [pc, #56]	; (8001d38 <_Z14waitCatM1Readyv+0x60>)
 8001cfe:	f7ff fcbe 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <_Z14waitCatM1Readyv+0x42>
 8001d08:	490f      	ldr	r1, [pc, #60]	; (8001d48 <_Z14waitCatM1Readyv+0x70>)
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <_Z14waitCatM1Readyv+0x60>)
 8001d0c:	f7ff fcce 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <_Z14waitCatM1Readyv+0x42>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <_Z14waitCatM1Readyv+0x44>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0dd      	beq.n	8001cdc <_Z14waitCatM1Readyv+0x4>
    {
      MYPRINTF("BG96 already available\r\n");
 8001d20:	4806      	ldr	r0, [pc, #24]	; (8001d3c <_Z14waitCatM1Readyv+0x64>)
 8001d22:	f006 fd95 	bl	8008850 <iprintf>
 8001d26:	4809      	ldr	r0, [pc, #36]	; (8001d4c <_Z14waitCatM1Readyv+0x74>)
 8001d28:	f006 fe18 	bl	800895c <puts>
      return RET_OK;
 8001d2c:	2301      	movs	r3, #1
    }
  }
  return RET_NOK;
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	0800cddc 	.word	0x0800cddc
 8001d38:	20000670 	.word	0x20000670
 8001d3c:	0800cde0 	.word	0x0800cde0
 8001d40:	0800cdec 	.word	0x0800cdec
 8001d44:	0800cdf8 	.word	0x0800cdf8
 8001d48:	0800ccb8 	.word	0x0800ccb8
 8001d4c:	0800cdfc 	.word	0x0800cdfc

08001d50 <_Z17checknSetApn_BG96PKc>:
}



int8_t checknSetApn_BG96(const char * apn) // Configure Parameters of a TCP/IP Context
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b0ac      	sub	sp, #176	; 0xb0
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  char resp_str[100];
  char buf[25];
  char buf1[25];

  uint16_t i = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  char * search_pt;

  memset(resp_str, 0, sizeof(resp_str));
 8001d5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d62:	2264      	movs	r2, #100	; 0x64
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fe46 	bl	80079f8 <memset>

  LOGDEBUG("Checking APN...\r\n");
 8001d6c:	493e      	ldr	r1, [pc, #248]	; (8001e68 <_Z17checknSetApn_BG96PKc+0x118>)
 8001d6e:	483f      	ldr	r0, [pc, #252]	; (8001e6c <_Z17checknSetApn_BG96PKc+0x11c>)
 8001d70:	f006 fd6e 	bl	8008850 <iprintf>
 8001d74:	483e      	ldr	r0, [pc, #248]	; (8001e70 <_Z17checknSetApn_BG96PKc+0x120>)
 8001d76:	f006 fdf1 	bl	800895c <puts>


  m_parser.send("AT+QICSGP=1");
 8001d7a:	493e      	ldr	r1, [pc, #248]	; (8001e74 <_Z17checknSetApn_BG96PKc+0x124>)
 8001d7c:	483e      	ldr	r0, [pc, #248]	; (8001e78 <_Z17checknSetApn_BG96PKc+0x128>)
 8001d7e:	f7ff fc7e 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
  while (1)
  {
    m_parser.read(&resp_str[i++], 1);
 8001d82:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d92:	4413      	add	r3, r2
 8001d94:	2201      	movs	r2, #1
 8001d96:	4619      	mov	r1, r3
 8001d98:	4837      	ldr	r0, [pc, #220]	; (8001e78 <_Z17checknSetApn_BG96PKc+0x128>)
 8001d9a:	f7ff fae2 	bl	8001362 <_ZN11ATCmdParser4readEPci>
    search_pt = strstr(resp_str, "OK\r\n");
 8001d9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da2:	4936      	ldr	r1, [pc, #216]	; (8001e7c <_Z17checknSetApn_BG96PKc+0x12c>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f006 fed4 	bl	8008b52 <strstr>
 8001daa:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    if (search_pt != 0)
 8001dae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d100      	bne.n	8001db8 <_Z17checknSetApn_BG96PKc+0x68>
    m_parser.read(&resp_str[i++], 1);
 8001db6:	e7e4      	b.n	8001d82 <_Z17checknSetApn_BG96PKc+0x32>
    {
      break;
 8001db8:	bf00      	nop
    }
  }

  search_pt = strstr(resp_str, apn);
 8001dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f006 fec6 	bl	8008b52 <strstr>
 8001dc6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  if (search_pt == 0)
 8001dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d13e      	bne.n	8001e50 <_Z17checknSetApn_BG96PKc+0x100>
  {
    sprintf((char *)buf, "Mismatched APN: %s\r\n", resp_str);
 8001dd2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dda:	4929      	ldr	r1, [pc, #164]	; (8001e80 <_Z17checknSetApn_BG96PKc+0x130>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f006 fe1f 	bl	8008a20 <siprintf>
    sprintf((char *)buf1, "Storing APN %s...\r\n", apn);
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4926      	ldr	r1, [pc, #152]	; (8001e84 <_Z17checknSetApn_BG96PKc+0x134>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f006 fe18 	bl	8008a20 <siprintf>
    LOGDEBUG(buf);
 8001df0:	491d      	ldr	r1, [pc, #116]	; (8001e68 <_Z17checknSetApn_BG96PKc+0x118>)
 8001df2:	481e      	ldr	r0, [pc, #120]	; (8001e6c <_Z17checknSetApn_BG96PKc+0x11c>)
 8001df4:	f006 fd2c 	bl	8008850 <iprintf>
 8001df8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 fd27 	bl	8008850 <iprintf>
    LOGDEBUG(buf1);
 8001e02:	4919      	ldr	r1, [pc, #100]	; (8001e68 <_Z17checknSetApn_BG96PKc+0x118>)
 8001e04:	4819      	ldr	r0, [pc, #100]	; (8001e6c <_Z17checknSetApn_BG96PKc+0x11c>)
 8001e06:	f006 fd23 	bl	8008850 <iprintf>
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f006 fd1e 	bl	8008850 <iprintf>

    if (!(m_parser.send("AT+QICSGP=1,%d,\"%s\",\"\",\"\",0", BG96_APN_PROTOCOL, apn) && m_parser.recv("OK")))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	491b      	ldr	r1, [pc, #108]	; (8001e88 <_Z17checknSetApn_BG96PKc+0x138>)
 8001e1a:	4817      	ldr	r0, [pc, #92]	; (8001e78 <_Z17checknSetApn_BG96PKc+0x128>)
 8001e1c:	f7ff fc2f 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f083 0301 	eor.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d109      	bne.n	8001e40 <_Z17checknSetApn_BG96PKc+0xf0>
 8001e2c:	4917      	ldr	r1, [pc, #92]	; (8001e8c <_Z17checknSetApn_BG96PKc+0x13c>)
 8001e2e:	4812      	ldr	r0, [pc, #72]	; (8001e78 <_Z17checknSetApn_BG96PKc+0x128>)
 8001e30:	f7ff fc3c 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <_Z17checknSetApn_BG96PKc+0xf4>
 8001e40:	2301      	movs	r3, #1
 8001e42:	e000      	b.n	8001e46 <_Z17checknSetApn_BG96PKc+0xf6>
 8001e44:	2300      	movs	r3, #0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <_Z17checknSetApn_BG96PKc+0x100>
    {
      return RET_NOK; // failed
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e007      	b.n	8001e60 <_Z17checknSetApn_BG96PKc+0x110>
    }
  }
  LOGDEBUG("APN Check Done\r\n");
 8001e50:	4905      	ldr	r1, [pc, #20]	; (8001e68 <_Z17checknSetApn_BG96PKc+0x118>)
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <_Z17checknSetApn_BG96PKc+0x11c>)
 8001e54:	f006 fcfc 	bl	8008850 <iprintf>
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <_Z17checknSetApn_BG96PKc+0x140>)
 8001e5a:	f006 fd7f 	bl	800895c <puts>

  return RET_OK;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	37b0      	adds	r7, #176	; 0xb0
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	0800ccc0 	.word	0x0800ccc0
 8001e6c:	0800ccc8 	.word	0x0800ccc8
 8001e70:	0800ce14 	.word	0x0800ce14
 8001e74:	0800ce28 	.word	0x0800ce28
 8001e78:	20000670 	.word	0x20000670
 8001e7c:	0800ccb8 	.word	0x0800ccb8
 8001e80:	0800ce34 	.word	0x0800ce34
 8001e84:	0800ce4c 	.word	0x0800ce4c
 8001e88:	0800ce60 	.word	0x0800ce60
 8001e8c:	0800ce7c 	.word	0x0800ce7c
 8001e90:	0800ce80 	.word	0x0800ce80

08001e94 <_Z23setContextActivate_BG96v>:
// ----------------------------------------------------------------
// Functions: Cat.M1 PDP context activate / deactivate
// ----------------------------------------------------------------

void setContextActivate_BG96(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  if ( (m_parser.send("AT+QIACT=1")
 8001e98:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <_Z23setContextActivate_BG96v+0x3c>)
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <_Z23setContextActivate_BG96v+0x40>)
 8001e9c:	f7ff fbef 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001ea0:	4603      	mov	r3, r0
        && m_parser.recv(RESP_OK)) ) {
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <_Z23setContextActivate_BG96v+0x24>
 8001ea6:	490c      	ldr	r1, [pc, #48]	; (8001ed8 <_Z23setContextActivate_BG96v+0x44>)
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <_Z23setContextActivate_BG96v+0x40>)
 8001eaa:	f7ff fbff 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <_Z23setContextActivate_BG96v+0x24>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <_Z23setContextActivate_BG96v+0x26>
 8001eb8:	2300      	movs	r3, #0
  if ( (m_parser.send("AT+QIACT=1")
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <_Z23setContextActivate_BG96v+0x38>
    LOGDEBUG("PDP Context Activation: Success\r\n");
 8001ebe:	4907      	ldr	r1, [pc, #28]	; (8001edc <_Z23setContextActivate_BG96v+0x48>)
 8001ec0:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <_Z23setContextActivate_BG96v+0x4c>)
 8001ec2:	f006 fcc5 	bl	8008850 <iprintf>
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <_Z23setContextActivate_BG96v+0x50>)
 8001ec8:	f006 fd48 	bl	800895c <puts>
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800cf34 	.word	0x0800cf34
 8001ed4:	20000670 	.word	0x20000670
 8001ed8:	0800ccb8 	.word	0x0800ccb8
 8001edc:	0800ccc0 	.word	0x0800ccc0
 8001ee0:	0800ccc8 	.word	0x0800ccc8
 8001ee4:	0800cf40 	.word	0x0800cf40

08001ee8 <_Z19openMqttBroker_BG96Pci>:
// ----------------------------------------------------------------
// Functions: Cat.M1 MQTT Publish & Subscribe
// ----------------------------------------------------------------

int8_t openMqttBroker_BG96(char * url, int port)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  int8_t ret = RET_NOK;
 8001ef2:	23ff      	movs	r3, #255	; 0xff
 8001ef4:	77fb      	strb	r3, [r7, #31]
  int id = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  int result = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  unsigned long lastOpenedTime = 0;         // last time you connected to the server, in milliseconds
 8001efe:	2300      	movs	r3, #0
 8001f00:	61bb      	str	r3, [r7, #24]
  bool done = false;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
  //Timer t;

  //t.start();
  lastOpenedTime = millis();
 8001f06:	f001 ff89 	bl	8003e1c <HAL_GetTick>
 8001f0a:	61b8      	str	r0, [r7, #24]

  if (m_parser.send("AT+QMTOPEN=%d,\"%s\",%d", id, url, port) && m_parser.recv("OK")) {
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	493e      	ldr	r1, [pc, #248]	; (8002010 <_Z19openMqttBroker_BG96Pci+0x128>)
 8001f16:	483f      	ldr	r0, [pc, #252]	; (8002014 <_Z19openMqttBroker_BG96Pci+0x12c>)
 8001f18:	f7ff fbb1 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <_Z19openMqttBroker_BG96Pci+0x4c>
 8001f22:	493d      	ldr	r1, [pc, #244]	; (8002018 <_Z19openMqttBroker_BG96Pci+0x130>)
 8001f24:	483b      	ldr	r0, [pc, #236]	; (8002014 <_Z19openMqttBroker_BG96Pci+0x12c>)
 8001f26:	f7ff fbc1 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_Z19openMqttBroker_BG96Pci+0x4c>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <_Z19openMqttBroker_BG96Pci+0x4e>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d061      	beq.n	8001ffe <_Z19openMqttBroker_BG96Pci+0x116>
    do {
      done = (m_parser.recv("+QMTOPEN: %d,%d", &id, &result) && (result == 0));
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	f107 0210 	add.w	r2, r7, #16
 8001f42:	4936      	ldr	r1, [pc, #216]	; (800201c <_Z19openMqttBroker_BG96Pci+0x134>)
 8001f44:	4833      	ldr	r0, [pc, #204]	; (8002014 <_Z19openMqttBroker_BG96Pci+0x12c>)
 8001f46:	f7ff fbb1 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <_Z19openMqttBroker_BG96Pci+0x72>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <_Z19openMqttBroker_BG96Pci+0x72>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <_Z19openMqttBroker_BG96Pci+0x74>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	75fb      	strb	r3, [r7, #23]

      // MQTT Open: result code sample, refer to BG96_MQTT_Application_Note
      if (result == 1) {
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d107      	bne.n	8001f74 <_Z19openMqttBroker_BG96Pci+0x8c>
        LOGDEBUG("AT+QMTOPEN result[1]: Wrong parameter");
 8001f64:	492e      	ldr	r1, [pc, #184]	; (8002020 <_Z19openMqttBroker_BG96Pci+0x138>)
 8001f66:	482f      	ldr	r0, [pc, #188]	; (8002024 <_Z19openMqttBroker_BG96Pci+0x13c>)
 8001f68:	f006 fc72 	bl	8008850 <iprintf>
 8001f6c:	482e      	ldr	r0, [pc, #184]	; (8002028 <_Z19openMqttBroker_BG96Pci+0x140>)
 8001f6e:	f006 fc6f 	bl	8008850 <iprintf>
 8001f72:	e02a      	b.n	8001fca <_Z19openMqttBroker_BG96Pci+0xe2>
      } else if (result == 2) {
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <_Z19openMqttBroker_BG96Pci+0xa2>
        LOGDEBUG("AT+QMTOPEN result[2]: MQTT identifier is occupied");
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <_Z19openMqttBroker_BG96Pci+0x138>)
 8001f7c:	4829      	ldr	r0, [pc, #164]	; (8002024 <_Z19openMqttBroker_BG96Pci+0x13c>)
 8001f7e:	f006 fc67 	bl	8008850 <iprintf>
 8001f82:	482a      	ldr	r0, [pc, #168]	; (800202c <_Z19openMqttBroker_BG96Pci+0x144>)
 8001f84:	f006 fc64 	bl	8008850 <iprintf>
 8001f88:	e01f      	b.n	8001fca <_Z19openMqttBroker_BG96Pci+0xe2>
      } else if (result == 3) {
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d107      	bne.n	8001fa0 <_Z19openMqttBroker_BG96Pci+0xb8>
        LOGDEBUG("AT+QMTOPEN result[3]: Failed to activate PDP");
 8001f90:	4923      	ldr	r1, [pc, #140]	; (8002020 <_Z19openMqttBroker_BG96Pci+0x138>)
 8001f92:	4824      	ldr	r0, [pc, #144]	; (8002024 <_Z19openMqttBroker_BG96Pci+0x13c>)
 8001f94:	f006 fc5c 	bl	8008850 <iprintf>
 8001f98:	4825      	ldr	r0, [pc, #148]	; (8002030 <_Z19openMqttBroker_BG96Pci+0x148>)
 8001f9a:	f006 fc59 	bl	8008850 <iprintf>
 8001f9e:	e014      	b.n	8001fca <_Z19openMqttBroker_BG96Pci+0xe2>
      } else if (result == 4) {
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d107      	bne.n	8001fb6 <_Z19openMqttBroker_BG96Pci+0xce>
        LOGDEBUG("AT+QMTOPEN result[4]: Failed to parse domain name");
 8001fa6:	491e      	ldr	r1, [pc, #120]	; (8002020 <_Z19openMqttBroker_BG96Pci+0x138>)
 8001fa8:	481e      	ldr	r0, [pc, #120]	; (8002024 <_Z19openMqttBroker_BG96Pci+0x13c>)
 8001faa:	f006 fc51 	bl	8008850 <iprintf>
 8001fae:	4821      	ldr	r0, [pc, #132]	; (8002034 <_Z19openMqttBroker_BG96Pci+0x14c>)
 8001fb0:	f006 fc4e 	bl	8008850 <iprintf>
 8001fb4:	e009      	b.n	8001fca <_Z19openMqttBroker_BG96Pci+0xe2>
      } else if (result == 5) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d106      	bne.n	8001fca <_Z19openMqttBroker_BG96Pci+0xe2>
        LOGDEBUG("AT+QMTOPEN result[5]: Network disconnection error");
 8001fbc:	4918      	ldr	r1, [pc, #96]	; (8002020 <_Z19openMqttBroker_BG96Pci+0x138>)
 8001fbe:	4819      	ldr	r0, [pc, #100]	; (8002024 <_Z19openMqttBroker_BG96Pci+0x13c>)
 8001fc0:	f006 fc46 	bl	8008850 <iprintf>
 8001fc4:	481c      	ldr	r0, [pc, #112]	; (8002038 <_Z19openMqttBroker_BG96Pci+0x150>)
 8001fc6:	f006 fc43 	bl	8008850 <iprintf>
      }
    } while (!done && (millis() - lastOpenedTime) < BG96_CONNECT_TIMEOUT);
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00a      	beq.n	8001fec <_Z19openMqttBroker_BG96Pci+0x104>
 8001fd6:	f001 ff21 	bl	8003e1c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d801      	bhi.n	8001fec <_Z19openMqttBroker_BG96Pci+0x104>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <_Z19openMqttBroker_BG96Pci+0x106>
 8001fec:	2300      	movs	r3, #0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d000      	beq.n	8001ff4 <_Z19openMqttBroker_BG96Pci+0x10c>
    do {
 8001ff2:	e7a2      	b.n	8001f3a <_Z19openMqttBroker_BG96Pci+0x52>

    if (done) {
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <_Z19openMqttBroker_BG96Pci+0x116>
      ret = RET_OK;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	77fb      	strb	r3, [r7, #31]
    }
  }
  m_parser.flush();
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <_Z19openMqttBroker_BG96Pci+0x12c>)
 8002000:	f7ff f973 	bl	80012ea <_ZN11ATCmdParser5flushEv>

  return ret;
 8002004:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3720      	adds	r7, #32
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	0800cfc0 	.word	0x0800cfc0
 8002014:	20000670 	.word	0x20000670
 8002018:	0800ce7c 	.word	0x0800ce7c
 800201c:	0800cfd8 	.word	0x0800cfd8
 8002020:	0800ccc0 	.word	0x0800ccc0
 8002024:	0800ccc8 	.word	0x0800ccc8
 8002028:	0800cfe8 	.word	0x0800cfe8
 800202c:	0800d010 	.word	0x0800d010
 8002030:	0800d044 	.word	0x0800d044
 8002034:	0800d074 	.word	0x0800d074
 8002038:	0800d0a8 	.word	0x0800d0a8

0800203c <_Z22connectMqttBroker_BG96PcS_S_>:

int8_t connectMqttBroker_BG96(char * clientid, char * userid, char * password)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0a6      	sub	sp, #152	; 0x98
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  int8_t ret = RET_NOK;
 8002048:	23ff      	movs	r3, #255	; 0xff
 800204a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int id = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int result = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	67fb      	str	r3, [r7, #124]	; 0x7c
  int ret_code = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	67bb      	str	r3, [r7, #120]	; 0x78

  unsigned long lastConnectedTime = 0;         // last time you connected to the server, in milliseconds
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  char buf[100];

  bool done = false;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  //Timer t;

  if ((userid != NULL) && (password != NULL)) {
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00e      	beq.n	800208c <_Z22connectMqttBroker_BG96PcS_S_+0x50>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <_Z22connectMqttBroker_BG96PcS_S_+0x50>
    m_parser.send("AT+QMTCONN=%d,\"%s\",\"%s\",\"%s\"", id, clientid, userid, password);
 8002074:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4952      	ldr	r1, [pc, #328]	; (80021cc <_Z22connectMqttBroker_BG96PcS_S_+0x190>)
 8002084:	4852      	ldr	r0, [pc, #328]	; (80021d0 <_Z22connectMqttBroker_BG96PcS_S_+0x194>)
 8002086:	f7ff fafa 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 800208a:	e006      	b.n	800209a <_Z22connectMqttBroker_BG96PcS_S_+0x5e>
  } else {
    m_parser.send("AT+QMTCONN=%d,\"%s\"", id, clientid);
 800208c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4950      	ldr	r1, [pc, #320]	; (80021d4 <_Z22connectMqttBroker_BG96PcS_S_+0x198>)
 8002094:	484e      	ldr	r0, [pc, #312]	; (80021d0 <_Z22connectMqttBroker_BG96PcS_S_+0x194>)
 8002096:	f7ff faf2 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
  }

  //t.start();
  lastConnectedTime = millis();
 800209a:	f001 febf 	bl	8003e1c <HAL_GetTick>
 800209e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

  if (m_parser.recv("OK"))
 80020a2:	494d      	ldr	r1, [pc, #308]	; (80021d8 <_Z22connectMqttBroker_BG96PcS_S_+0x19c>)
 80020a4:	484a      	ldr	r0, [pc, #296]	; (80021d0 <_Z22connectMqttBroker_BG96PcS_S_+0x194>)
 80020a6:	f7ff fb01 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8083 	beq.w	80021b8 <_Z22connectMqttBroker_BG96PcS_S_+0x17c>
  {
    do {
      done = (m_parser.recv("+QMTCONN: %d,%d,%d", &id, &result, &ret_code)
 80020b2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80020b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	460b      	mov	r3, r1
 80020c2:	4946      	ldr	r1, [pc, #280]	; (80021dc <_Z22connectMqttBroker_BG96PcS_S_+0x1a0>)
 80020c4:	4842      	ldr	r0, [pc, #264]	; (80021d0 <_Z22connectMqttBroker_BG96PcS_S_+0x194>)
 80020c6:	f7ff faf1 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80020ca:	4603      	mov	r3, r0
      && (result == 0) && (ret_code == 0));
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <_Z22connectMqttBroker_BG96PcS_S_+0xa4>
 80020d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d104      	bne.n	80020e0 <_Z22connectMqttBroker_BG96PcS_S_+0xa4>
 80020d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <_Z22connectMqttBroker_BG96PcS_S_+0xa4>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <_Z22connectMqttBroker_BG96PcS_S_+0xa6>
 80020e0:	2300      	movs	r3, #0
      done = (m_parser.recv("+QMTCONN: %d,%d,%d", &id, &result, &ret_code)
 80020e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

      // MQTT Connect: result sample, refer to BG96_MQTT_Application_Note
      if (result == 1) {
 80020e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d107      	bne.n	80020fc <_Z22connectMqttBroker_BG96PcS_S_+0xc0>
        LOGDEBUG("AT+QMTCONN result[1]: Packet retransmission");
 80020ec:	493c      	ldr	r1, [pc, #240]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 80020ee:	483d      	ldr	r0, [pc, #244]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 80020f0:	f006 fbae 	bl	8008850 <iprintf>
 80020f4:	483c      	ldr	r0, [pc, #240]	; (80021e8 <_Z22connectMqttBroker_BG96PcS_S_+0x1ac>)
 80020f6:	f006 fbab 	bl	8008850 <iprintf>
 80020fa:	e009      	b.n	8002110 <_Z22connectMqttBroker_BG96PcS_S_+0xd4>
      } else if (result == 2) {
 80020fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d106      	bne.n	8002110 <_Z22connectMqttBroker_BG96PcS_S_+0xd4>
        LOGDEBUG("AT+QMTCONN result[2]: Failed to send packet");
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 8002104:	4837      	ldr	r0, [pc, #220]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 8002106:	f006 fba3 	bl	8008850 <iprintf>
 800210a:	4838      	ldr	r0, [pc, #224]	; (80021ec <_Z22connectMqttBroker_BG96PcS_S_+0x1b0>)
 800210c:	f006 fba0 	bl	8008850 <iprintf>
      }

      // MQTT Connect: ret_code sample, refer to BG96_MQTT_Application_Note
      if (result == 1) {
 8002110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <_Z22connectMqttBroker_BG96PcS_S_+0xea>
        LOGDEBUG("AT+QMTCONN ret_code[1]: Connection Refused: Unacceptable Protocol Version");
 8002116:	4932      	ldr	r1, [pc, #200]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 8002118:	4832      	ldr	r0, [pc, #200]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 800211a:	f006 fb99 	bl	8008850 <iprintf>
 800211e:	4834      	ldr	r0, [pc, #208]	; (80021f0 <_Z22connectMqttBroker_BG96PcS_S_+0x1b4>)
 8002120:	f006 fb96 	bl	8008850 <iprintf>
 8002124:	e02a      	b.n	800217c <_Z22connectMqttBroker_BG96PcS_S_+0x140>
      } else if (result == 2) {
 8002126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002128:	2b02      	cmp	r3, #2
 800212a:	d107      	bne.n	800213c <_Z22connectMqttBroker_BG96PcS_S_+0x100>
        LOGDEBUG("AT+QMTCONN ret_code[2]: Connection Refused: Identifier Rejected");
 800212c:	492c      	ldr	r1, [pc, #176]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 800212e:	482d      	ldr	r0, [pc, #180]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 8002130:	f006 fb8e 	bl	8008850 <iprintf>
 8002134:	482f      	ldr	r0, [pc, #188]	; (80021f4 <_Z22connectMqttBroker_BG96PcS_S_+0x1b8>)
 8002136:	f006 fb8b 	bl	8008850 <iprintf>
 800213a:	e01f      	b.n	800217c <_Z22connectMqttBroker_BG96PcS_S_+0x140>
      } else if (result == 3) {
 800213c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800213e:	2b03      	cmp	r3, #3
 8002140:	d107      	bne.n	8002152 <_Z22connectMqttBroker_BG96PcS_S_+0x116>
        LOGDEBUG("AT+QMTCONN ret_code[3]: Connection Refused: Server Unavailable");
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 8002144:	4827      	ldr	r0, [pc, #156]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 8002146:	f006 fb83 	bl	8008850 <iprintf>
 800214a:	482b      	ldr	r0, [pc, #172]	; (80021f8 <_Z22connectMqttBroker_BG96PcS_S_+0x1bc>)
 800214c:	f006 fb80 	bl	8008850 <iprintf>
 8002150:	e014      	b.n	800217c <_Z22connectMqttBroker_BG96PcS_S_+0x140>
      } else if (result == 4) {
 8002152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002154:	2b04      	cmp	r3, #4
 8002156:	d107      	bne.n	8002168 <_Z22connectMqttBroker_BG96PcS_S_+0x12c>
        LOGDEBUG("AT+QMTCONN ret_code[4]: Connection Refused: Bad User Name or Password");
 8002158:	4921      	ldr	r1, [pc, #132]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 800215a:	4822      	ldr	r0, [pc, #136]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 800215c:	f006 fb78 	bl	8008850 <iprintf>
 8002160:	4826      	ldr	r0, [pc, #152]	; (80021fc <_Z22connectMqttBroker_BG96PcS_S_+0x1c0>)
 8002162:	f006 fb75 	bl	8008850 <iprintf>
 8002166:	e009      	b.n	800217c <_Z22connectMqttBroker_BG96PcS_S_+0x140>
      } else if (result == 5) {
 8002168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800216a:	2b05      	cmp	r3, #5
 800216c:	d106      	bne.n	800217c <_Z22connectMqttBroker_BG96PcS_S_+0x140>
        LOGDEBUG("AT+QMTCONN ret_code[5]: Connection Refused: Not Authorized");
 800216e:	491c      	ldr	r1, [pc, #112]	; (80021e0 <_Z22connectMqttBroker_BG96PcS_S_+0x1a4>)
 8002170:	481c      	ldr	r0, [pc, #112]	; (80021e4 <_Z22connectMqttBroker_BG96PcS_S_+0x1a8>)
 8002172:	f006 fb6d 	bl	8008850 <iprintf>
 8002176:	4822      	ldr	r0, [pc, #136]	; (8002200 <_Z22connectMqttBroker_BG96PcS_S_+0x1c4>)
 8002178:	f006 fb6a 	bl	8008850 <iprintf>
      }
    } while (!done &&(millis() - lastConnectedTime) < BG96_CONNECT_TIMEOUT * 2);
 800217c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <_Z22connectMqttBroker_BG96PcS_S_+0x166>
 800218a:	f001 fe47 	bl	8003e1c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f247 522f 	movw	r2, #29999	; 0x752f
 800219a:	4293      	cmp	r3, r2
 800219c:	d801      	bhi.n	80021a2 <_Z22connectMqttBroker_BG96PcS_S_+0x166>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <_Z22connectMqttBroker_BG96PcS_S_+0x168>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <_Z22connectMqttBroker_BG96PcS_S_+0x16e>
    do {
 80021a8:	e783      	b.n	80020b2 <_Z22connectMqttBroker_BG96PcS_S_+0x76>

    if (done) {
 80021aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <_Z22connectMqttBroker_BG96PcS_S_+0x17c>
      ret = RET_OK;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }
  }
  m_parser.flush();
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <_Z22connectMqttBroker_BG96PcS_S_+0x194>)
 80021ba:	f7ff f896 	bl	80012ea <_ZN11ATCmdParser5flushEv>

  return ret;
 80021be:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3790      	adds	r7, #144	; 0x90
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800d0dc 	.word	0x0800d0dc
 80021d0:	20000670 	.word	0x20000670
 80021d4:	0800d0fc 	.word	0x0800d0fc
 80021d8:	0800ce7c 	.word	0x0800ce7c
 80021dc:	0800d110 	.word	0x0800d110
 80021e0:	0800ccc0 	.word	0x0800ccc0
 80021e4:	0800ccc8 	.word	0x0800ccc8
 80021e8:	0800d124 	.word	0x0800d124
 80021ec:	0800d150 	.word	0x0800d150
 80021f0:	0800d17c 	.word	0x0800d17c
 80021f4:	0800d1c8 	.word	0x0800d1c8
 80021f8:	0800d208 	.word	0x0800d208
 80021fc:	0800d248 	.word	0x0800d248
 8002200:	0800d290 	.word	0x0800d290

08002204 <_Z20closeMqttBroker_BG96v>:

int8_t closeMqttBroker_BG96(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
  int8_t ret = RET_NOK;
 800220a:	23ff      	movs	r3, #255	; 0xff
 800220c:	75fb      	strb	r3, [r7, #23]
  int id = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
  int result = 0;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  unsigned long lastClosedTime = 0;    // last time you connected to the server, in milliseconds
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]

  bool done = false;
 800221a:	2300      	movs	r3, #0
 800221c:	73fb      	strb	r3, [r7, #15]
  //Timer t;

  //t.start();
  lastClosedTime = millis();
 800221e:	f001 fdfd 	bl	8003e1c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

  if (m_parser.send("AT+QMTDISC=%d", id) && m_parser.recv("OK")) {
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	461a      	mov	r2, r3
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <_Z20closeMqttBroker_BG96v+0xa4>)
 800222a:	4820      	ldr	r0, [pc, #128]	; (80022ac <_Z20closeMqttBroker_BG96v+0xa8>)
 800222c:	f7ff fa27 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <_Z20closeMqttBroker_BG96v+0x44>
 8002236:	491e      	ldr	r1, [pc, #120]	; (80022b0 <_Z20closeMqttBroker_BG96v+0xac>)
 8002238:	481c      	ldr	r0, [pc, #112]	; (80022ac <_Z20closeMqttBroker_BG96v+0xa8>)
 800223a:	f7ff fa37 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <_Z20closeMqttBroker_BG96v+0x44>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <_Z20closeMqttBroker_BG96v+0x46>
 8002248:	2300      	movs	r3, #0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d022      	beq.n	8002294 <_Z20closeMqttBroker_BG96v+0x90>
    do {
      done = (m_parser.recv("+QMTDISC: %d,%d", &id, &result));
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	f107 0208 	add.w	r2, r7, #8
 8002254:	4917      	ldr	r1, [pc, #92]	; (80022b4 <_Z20closeMqttBroker_BG96v+0xb0>)
 8002256:	4815      	ldr	r0, [pc, #84]	; (80022ac <_Z20closeMqttBroker_BG96v+0xa8>)
 8002258:	f7ff fa28 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
    } while (!done && (millis() - lastClosedTime) < BG96_CONNECT_TIMEOUT * 2);
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <_Z20closeMqttBroker_BG96v+0x7e>
 800226c:	f001 fdd6 	bl	8003e1c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f247 522f 	movw	r2, #29999	; 0x752f
 800227a:	4293      	cmp	r3, r2
 800227c:	d801      	bhi.n	8002282 <_Z20closeMqttBroker_BG96v+0x7e>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <_Z20closeMqttBroker_BG96v+0x80>
 8002282:	2300      	movs	r3, #0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d000      	beq.n	800228a <_Z20closeMqttBroker_BG96v+0x86>
    do {
 8002288:	e7e1      	b.n	800224e <_Z20closeMqttBroker_BG96v+0x4a>

    if (done) {
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_Z20closeMqttBroker_BG96v+0x90>
      ret = RET_OK;
 8002290:	2301      	movs	r3, #1
 8002292:	75fb      	strb	r3, [r7, #23]
    }
  }
  m_parser.flush();
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <_Z20closeMqttBroker_BG96v+0xa8>)
 8002296:	f7ff f828 	bl	80012ea <_ZN11ATCmdParser5flushEv>

  return ret;
 800229a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	0800d2cc 	.word	0x0800d2cc
 80022ac:	20000670 	.word	0x20000670
 80022b0:	0800ce7c 	.word	0x0800ce7c
 80022b4:	0800d2dc 	.word	0x0800d2dc

080022b8 <_Z27sendMqttPublishMessage_BG96PciiS_i>:


int8_t sendMqttPublishMessage_BG96(char * topic, int qos, int retain, char * msg, int len)
{
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b0a9      	sub	sp, #164	; 0xa4
 80022bc:	af04      	add	r7, sp, #16
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  int8_t ret = RET_NOK;
 80022c6:	23ff      	movs	r3, #255	; 0xff
 80022c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int id = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  int result = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  int sent_msgid = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	67bb      	str	r3, [r7, #120]	; 0x78
  static int msgid = 0;

  unsigned long lastSentTime = 0;    // last time you connected to the server, in milliseconds
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  char buf[100];

  bool done = false;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  //Timer t;

  if (qos != 0) {
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <_Z27sendMqttPublishMessage_BG96PciiS_i+0x52>
    if (msgid < 0xffff)
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x158>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80022f4:	4293      	cmp	r3, r2
 80022f6:	dc05      	bgt.n	8002304 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x4c>
      msgid++;
 80022f8:	4b45      	ldr	r3, [pc, #276]	; (8002410 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x158>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	4a44      	ldr	r2, [pc, #272]	; (8002410 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x158>)
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e002      	b.n	800230a <_Z27sendMqttPublishMessage_BG96PciiS_i+0x52>
    else
      msgid = 0;
 8002304:	4b42      	ldr	r3, [pc, #264]	; (8002410 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x158>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
  }

  //t.start();
  lastSentTime = millis();
 800230a:	f001 fd87 	bl	8003e1c <HAL_GetTick>
 800230e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

  m_parser.send("AT+QMTPUB=%d,%d,%d,%d,\"%s\"", id, qos ? msgid : 0, qos, retain, topic);
 8002312:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x6a>
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x158>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	e000      	b.n	8002324 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x6c>
 8002322:	2300      	movs	r3, #0
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	9202      	str	r2, [sp, #8]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	9201      	str	r2, [sp, #4]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	9200      	str	r2, [sp, #0]
 8002330:	460a      	mov	r2, r1
 8002332:	4938      	ldr	r1, [pc, #224]	; (8002414 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x15c>)
 8002334:	4838      	ldr	r0, [pc, #224]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 8002336:	f7ff f9a2 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>

  if ( !done && m_parser.recv(">") )
 800233a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <_Z27sendMqttPublishMessage_BG96PciiS_i+0xa2>
 8002348:	4934      	ldr	r1, [pc, #208]	; (800241c <_Z27sendMqttPublishMessage_BG96PciiS_i+0x164>)
 800234a:	4833      	ldr	r0, [pc, #204]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 800234c:	f7ff f9ae 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <_Z27sendMqttPublishMessage_BG96PciiS_i+0xa2>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <_Z27sendMqttPublishMessage_BG96PciiS_i+0xa4>
 800235a:	2300      	movs	r3, #0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <_Z27sendMqttPublishMessage_BG96PciiS_i+0xdc>
    done = (m_parser.write(msg, len) <= 0) & m_parser.send("%c", MQTT_EOF);
 8002360:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	482c      	ldr	r0, [pc, #176]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 8002368:	f7fe ffd6 	bl	8001318 <_ZN11ATCmdParser5writeEPKci>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	bfd4      	ite	le
 8002372:	2301      	movle	r3, #1
 8002374:	2300      	movgt	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461c      	mov	r4, r3
 800237a:	221a      	movs	r2, #26
 800237c:	4928      	ldr	r1, [pc, #160]	; (8002420 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x168>)
 800237e:	4826      	ldr	r0, [pc, #152]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 8002380:	f7ff f97d 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002384:	4603      	mov	r3, r0
 8002386:	4023      	ands	r3, r4
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

  if (m_parser.recv("OK")) {
 8002394:	4923      	ldr	r1, [pc, #140]	; (8002424 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x16c>)
 8002396:	4820      	ldr	r0, [pc, #128]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 8002398:	f7ff f988 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d02c      	beq.n	80023fc <_Z27sendMqttPublishMessage_BG96PciiS_i+0x144>
    do {
      done = (m_parser.recv("+QMTPUB: %d,%d,%d", &id, &sent_msgid, &result));
 80023a2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80023a6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	460b      	mov	r3, r1
 80023b2:	491d      	ldr	r1, [pc, #116]	; (8002428 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x170>)
 80023b4:	4818      	ldr	r0, [pc, #96]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 80023b6:	f7ff f979 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    } while (!done && (millis() - lastSentTime) < BG96_CONNECT_TIMEOUT * 2); //BG96_CONNECT_TIMEOUT * 2
 80023c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023c4:	f083 0301 	eor.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x12e>
 80023ce:	f001 fd25 	bl	8003e1c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f247 522f 	movw	r2, #29999	; 0x752f
 80023de:	4293      	cmp	r3, r2
 80023e0:	d801      	bhi.n	80023e6 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x12e>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x130>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d000      	beq.n	80023ee <_Z27sendMqttPublishMessage_BG96PciiS_i+0x136>
    do {
 80023ec:	e7d9      	b.n	80023a2 <_Z27sendMqttPublishMessage_BG96PciiS_i+0xea>

    if (done) {
 80023ee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <_Z27sendMqttPublishMessage_BG96PciiS_i+0x144>
      ret = RET_OK;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }
  }
  m_parser.flush();
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <_Z27sendMqttPublishMessage_BG96PciiS_i+0x160>)
 80023fe:	f7fe ff74 	bl	80012ea <_ZN11ATCmdParser5flushEv>

  return ret;
 8002402:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8002406:	4618      	mov	r0, r3
 8002408:	3794      	adds	r7, #148	; 0x94
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	200016c8 	.word	0x200016c8
 8002414:	0800d2ec 	.word	0x0800d2ec
 8002418:	20000670 	.word	0x20000670
 800241c:	0800d308 	.word	0x0800d308
 8002420:	0800d30c 	.word	0x0800d30c
 8002424:	0800ce7c 	.word	0x0800ce7c
 8002428:	0800d310 	.word	0x0800d310

0800242c <_Z26setMqttSubscribeTopic_BG96Pcii>:

int8_t setMqttSubscribeTopic_BG96(char * topic, int msgid, int qos)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	; 0x38
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  int8_t ret = RET_NOK;
 8002438:	23ff      	movs	r3, #255	; 0xff
 800243a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int id = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  int result = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]

  int sent_msgid = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  int qos_level = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  unsigned long lastSetTime = 0;    // last time you connected to the server, in milliseconds
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28

  bool done = false;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  //Timer t;

  m_parser.set_timeout(BG96_CONNECT_TIMEOUT);
 8002458:	f643 2198 	movw	r1, #15000	; 0x3a98
 800245c:	482d      	ldr	r0, [pc, #180]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 800245e:	f7ff fa77 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>

  //t.start();
  lastSetTime = millis();
 8002462:	f001 fcdb 	bl	8003e1c <HAL_GetTick>
 8002466:	62b8      	str	r0, [r7, #40]	; 0x28

  if (m_parser.send("AT+QMTSUB=%d,%d,\"%s\",%d", id, msgid, topic, qos) && m_parser.recv("OK")) {
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4928      	ldr	r1, [pc, #160]	; (8002518 <_Z26setMqttSubscribeTopic_BG96Pcii+0xec>)
 8002476:	4827      	ldr	r0, [pc, #156]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 8002478:	f7ff f901 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <_Z26setMqttSubscribeTopic_BG96Pcii+0x68>
 8002482:	4926      	ldr	r1, [pc, #152]	; (800251c <_Z26setMqttSubscribeTopic_BG96Pcii+0xf0>)
 8002484:	4823      	ldr	r0, [pc, #140]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 8002486:	f7ff f911 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <_Z26setMqttSubscribeTopic_BG96Pcii+0x68>
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <_Z26setMqttSubscribeTopic_BG96Pcii+0x6a>
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02e      	beq.n	80024f8 <_Z26setMqttSubscribeTopic_BG96Pcii+0xcc>
    do {
      done = (m_parser.recv("+QMTSUB: %d,%d,%d,%d", &id, &sent_msgid, &result, &qos_level));
 800249a:	f107 0118 	add.w	r1, r7, #24
 800249e:	f107 0220 	add.w	r2, r7, #32
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	460b      	mov	r3, r1
 80024b0:	491b      	ldr	r1, [pc, #108]	; (8002520 <_Z26setMqttSubscribeTopic_BG96Pcii+0xf4>)
 80024b2:	4818      	ldr	r0, [pc, #96]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 80024b4:	f7ff f8fa 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    } while (!done && (millis() - lastSetTime) < BG96_CONNECT_TIMEOUT);
 80024be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <_Z26setMqttSubscribeTopic_BG96Pcii+0xb6>
 80024cc:	f001 fca6 	bl	8003e1c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	f643 2297 	movw	r2, #14999	; 0x3a97
 80024da:	4293      	cmp	r3, r2
 80024dc:	d801      	bhi.n	80024e2 <_Z26setMqttSubscribeTopic_BG96Pcii+0xb6>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_Z26setMqttSubscribeTopic_BG96Pcii+0xb8>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d000      	beq.n	80024ea <_Z26setMqttSubscribeTopic_BG96Pcii+0xbe>
    do {
 80024e8:	e7d7      	b.n	800249a <_Z26setMqttSubscribeTopic_BG96Pcii+0x6e>

    if (done) {
 80024ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <_Z26setMqttSubscribeTopic_BG96Pcii+0xcc>
      ret = RET_OK;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }
  m_parser.set_timeout(BG96_DEFAULT_TIMEOUT);
 80024f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 80024fe:	f7ff fa27 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>
  m_parser.flush();
 8002502:	4804      	ldr	r0, [pc, #16]	; (8002514 <_Z26setMqttSubscribeTopic_BG96Pcii+0xe8>)
 8002504:	f7fe fef1 	bl	80012ea <_ZN11ATCmdParser5flushEv>

  return ret;
 8002508:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800250c:	4618      	mov	r0, r3
 800250e:	3730      	adds	r7, #48	; 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000670 	.word	0x20000670
 8002518:	0800d324 	.word	0x0800d324
 800251c:	0800ce7c 	.word	0x0800ce7c
 8002520:	0800d33c 	.word	0x0800d33c

08002524 <_Z25checkRecvMqttMessage_BG96PcPiS_>:

int8_t checkRecvMqttMessage_BG96(char * topic, int * msgid, char * msg)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  int8_t ret = RET_NOK;
 8002530:	23ff      	movs	r3, #255	; 0xff
 8002532:	75fb      	strb	r3, [r7, #23]
  int id = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
  bool received = false;
 8002538:	2300      	movs	r3, #0
 800253a:	75bb      	strb	r3, [r7, #22]

  m_parser.set_timeout(1);
 800253c:	2101      	movs	r1, #1
 800253e:	4810      	ldr	r0, [pc, #64]	; (8002580 <_Z25checkRecvMqttMessage_BG96PcPiS_+0x5c>)
 8002540:	f7ff fa06 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>
  received = m_parser.recv("+QMTRECV: %d,%d,\"%[^\"]\",\"%[^\"]\"", &id, msgid, topic, msg);
 8002544:	f107 0210 	add.w	r2, r7, #16
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	490c      	ldr	r1, [pc, #48]	; (8002584 <_Z25checkRecvMqttMessage_BG96PcPiS_+0x60>)
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <_Z25checkRecvMqttMessage_BG96PcPiS_+0x5c>)
 8002556:	f7ff f8a9 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800255a:	4603      	mov	r3, r0
 800255c:	75bb      	strb	r3, [r7, #22]
  m_parser.set_timeout(BG96_DEFAULT_TIMEOUT);
 800255e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002562:	4807      	ldr	r0, [pc, #28]	; (8002580 <_Z25checkRecvMqttMessage_BG96PcPiS_+0x5c>)
 8002564:	f7ff f9f4 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>

  if (received) ret = RET_OK;
 8002568:	7dbb      	ldrb	r3, [r7, #22]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <_Z25checkRecvMqttMessage_BG96PcPiS_+0x4e>
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
  return ret;
 8002572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000670 	.word	0x20000670
 8002584:	0800d354 	.word	0x0800d354

08002588 <_Z21setMqttTlsEnable_BG96b>:
// ----------------------------------------------------------------
// Functions: MQTT SSL/TLS enable
// ----------------------------------------------------------------

int8_t setMqttTlsEnable_BG96(bool enable)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
    int8_t ret = RET_NOK;
 8002592:	23ff      	movs	r3, #255	; 0xff
 8002594:	75fb      	strb	r3, [r7, #23]

    int id = 0; // tcp connection id (0 - 6)
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
    int tls_ctxindex = 0; // ssl context index (0 - 5)
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]

    if(m_parser.send("AT+QMTCFG=\"SSL\",%d,%d,%d", id, enable?1:0, tls_ctxindex) && m_parser.recv("OK")) {
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <_Z21setMqttTlsEnable_BG96b+0x20>
 80025a4:	2201      	movs	r2, #1
 80025a6:	e000      	b.n	80025aa <_Z21setMqttTlsEnable_BG96b+0x22>
 80025a8:	2200      	movs	r2, #0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4911      	ldr	r1, [pc, #68]	; (80025f8 <_Z21setMqttTlsEnable_BG96b+0x70>)
 80025b4:	4811      	ldr	r0, [pc, #68]	; (80025fc <_Z21setMqttTlsEnable_BG96b+0x74>)
 80025b6:	f7ff f862 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <_Z21setMqttTlsEnable_BG96b+0x4a>
 80025c0:	490f      	ldr	r1, [pc, #60]	; (8002600 <_Z21setMqttTlsEnable_BG96b+0x78>)
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <_Z21setMqttTlsEnable_BG96b+0x74>)
 80025c4:	f7ff f872 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <_Z21setMqttTlsEnable_BG96b+0x4a>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <_Z21setMqttTlsEnable_BG96b+0x4c>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <_Z21setMqttTlsEnable_BG96b+0x56>
        ret = RET_OK;
 80025d8:	2301      	movs	r3, #1
 80025da:	75fb      	strb	r3, [r7, #23]
 80025dc:	e006      	b.n	80025ec <_Z21setMqttTlsEnable_BG96b+0x64>
    } else {
        LOGDEBUG("MQTT SSL/TLS enable failed\r\n");
 80025de:	4909      	ldr	r1, [pc, #36]	; (8002604 <_Z21setMqttTlsEnable_BG96b+0x7c>)
 80025e0:	4809      	ldr	r0, [pc, #36]	; (8002608 <_Z21setMqttTlsEnable_BG96b+0x80>)
 80025e2:	f006 f935 	bl	8008850 <iprintf>
 80025e6:	4809      	ldr	r0, [pc, #36]	; (800260c <_Z21setMqttTlsEnable_BG96b+0x84>)
 80025e8:	f006 f9b8 	bl	800895c <puts>
    }
    return ret;
 80025ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	0800d3d4 	.word	0x0800d3d4
 80025fc:	20000670 	.word	0x20000670
 8002600:	0800ce7c 	.word	0x0800ce7c
 8002604:	0800ccc0 	.word	0x0800ccc0
 8002608:	0800ccc8 	.word	0x0800ccc8
 800260c:	0800d3f0 	.word	0x0800d3f0

08002610 <_Z22saveFileToStorage_BG96PcPKci>:
// ----------------------------------------------------------------
// Functions: Cat.M1 File system
// ----------------------------------------------------------------

int8_t saveFileToStorage_BG96(char * path, const char * buf, int len)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
    int8_t ret = RET_NOK;
 800261c:	23ff      	movs	r3, #255	; 0xff
 800261e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int timeout_sec = 30;
 8002622:	231e      	movs	r3, #30
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28

    bool done = false;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    int upload_size = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	623b      	str	r3, [r7, #32]
    char checksum[10] = {0, };
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	f107 0318 	add.w	r3, r7, #24
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	809a      	strh	r2, [r3, #4]

    m_parser.set_timeout(BG96_WAIT_TIMEOUT);
 800263e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002642:	4838      	ldr	r0, [pc, #224]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 8002644:	f7ff f984 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>

    if(m_parser.send("AT+QFUPL=\"%s\",%d,%d", path, len, timeout_sec) && m_parser.recv("CONNECT")) {
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4935      	ldr	r1, [pc, #212]	; (8002728 <_Z22saveFileToStorage_BG96PcPKci+0x118>)
 8002652:	4834      	ldr	r0, [pc, #208]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 8002654:	f7ff f813 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d008      	beq.n	8002670 <_Z22saveFileToStorage_BG96PcPKci+0x60>
 800265e:	4933      	ldr	r1, [pc, #204]	; (800272c <_Z22saveFileToStorage_BG96PcPKci+0x11c>)
 8002660:	4830      	ldr	r0, [pc, #192]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 8002662:	f7ff f823 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <_Z22saveFileToStorage_BG96PcPKci+0x60>
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <_Z22saveFileToStorage_BG96PcPKci+0x62>
 8002670:	2300      	movs	r3, #0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d038      	beq.n	80026e8 <_Z22saveFileToStorage_BG96PcPKci+0xd8>
        done = m_parser.write(buf, len);
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	482a      	ldr	r0, [pc, #168]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 800267c:	f7fe fe4c 	bl	8001318 <_ZN11ATCmdParser5writeEPKci>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(done) {
 800268e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002692:	2b00      	cmp	r3, #0
 8002694:	d028      	beq.n	80026e8 <_Z22saveFileToStorage_BG96PcPKci+0xd8>
    if(m_parser.recv("+QFUPL: %d,%s\r\n", &upload_size, checksum) && m_parser.recv("OK")) {
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	f107 0220 	add.w	r2, r7, #32
 800269e:	4924      	ldr	r1, [pc, #144]	; (8002730 <_Z22saveFileToStorage_BG96PcPKci+0x120>)
 80026a0:	4820      	ldr	r0, [pc, #128]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 80026a2:	f7ff f803 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <_Z22saveFileToStorage_BG96PcPKci+0xae>
 80026ac:	4921      	ldr	r1, [pc, #132]	; (8002734 <_Z22saveFileToStorage_BG96PcPKci+0x124>)
 80026ae:	481d      	ldr	r0, [pc, #116]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 80026b0:	f7fe fffc 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <_Z22saveFileToStorage_BG96PcPKci+0xae>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <_Z22saveFileToStorage_BG96PcPKci+0xb0>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d011      	beq.n	80026e8 <_Z22saveFileToStorage_BG96PcPKci+0xd8>
        if(len == upload_size) {
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10d      	bne.n	80026e8 <_Z22saveFileToStorage_BG96PcPKci+0xd8>
LOGDEBUG("File saved: %s, %d, %s\r\n", path, upload_size, checksum);
 80026cc:	491a      	ldr	r1, [pc, #104]	; (8002738 <_Z22saveFileToStorage_BG96PcPKci+0x128>)
 80026ce:	481b      	ldr	r0, [pc, #108]	; (800273c <_Z22saveFileToStorage_BG96PcPKci+0x12c>)
 80026d0:	f006 f8be 	bl	8008850 <iprintf>
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	68f9      	ldr	r1, [r7, #12]
 80026dc:	4818      	ldr	r0, [pc, #96]	; (8002740 <_Z22saveFileToStorage_BG96PcPKci+0x130>)
 80026de:	f006 f8b7 	bl	8008850 <iprintf>
ret = RET_OK;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }
        }
    }
    m_parser.set_timeout(BG96_DEFAULT_TIMEOUT);
 80026e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ec:	480d      	ldr	r0, [pc, #52]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 80026ee:	f7ff f92f 	bl	8001950 <_ZN11ATCmdParser11set_timeoutEm>
    if(ret != RET_OK) {
 80026f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d007      	beq.n	800270a <_Z22saveFileToStorage_BG96PcPKci+0xfa>
        LOGDEBUG("Save a file to storage failed: %s\r\n", path);
 80026fa:	490f      	ldr	r1, [pc, #60]	; (8002738 <_Z22saveFileToStorage_BG96PcPKci+0x128>)
 80026fc:	480f      	ldr	r0, [pc, #60]	; (800273c <_Z22saveFileToStorage_BG96PcPKci+0x12c>)
 80026fe:	f006 f8a7 	bl	8008850 <iprintf>
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	480f      	ldr	r0, [pc, #60]	; (8002744 <_Z22saveFileToStorage_BG96PcPKci+0x134>)
 8002706:	f006 f8a3 	bl	8008850 <iprintf>
    }
    m_parser.flush();
 800270a:	4806      	ldr	r0, [pc, #24]	; (8002724 <_Z22saveFileToStorage_BG96PcPKci+0x114>)
 800270c:	f7fe fded 	bl	80012ea <_ZN11ATCmdParser5flushEv>

    delay(100);
 8002710:	2064      	movs	r0, #100	; 0x64
 8002712:	f001 fb8f 	bl	8003e34 <HAL_Delay>
    return ret;
 8002716:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800271a:	4618      	mov	r0, r3
 800271c:	3730      	adds	r7, #48	; 0x30
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000670 	.word	0x20000670
 8002728:	0800d40c 	.word	0x0800d40c
 800272c:	0800d420 	.word	0x0800d420
 8002730:	0800d428 	.word	0x0800d428
 8002734:	0800ce7c 	.word	0x0800ce7c
 8002738:	0800ccc0 	.word	0x0800ccc0
 800273c:	0800ccc8 	.word	0x0800ccc8
 8002740:	0800d438 	.word	0x0800d438
 8002744:	0800d454 	.word	0x0800d454

08002748 <_Z24eraseFileStorageAll_BG96v>:

int8_t eraseFileStorageAll_BG96(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
    int8_t ret = RET_NOK;
 800274e:	23ff      	movs	r3, #255	; 0xff
 8002750:	71fb      	strb	r3, [r7, #7]

    if(m_parser.send("AT+QFDEL=\"*\"") && m_parser.recv("OK")) {
 8002752:	4913      	ldr	r1, [pc, #76]	; (80027a0 <_Z24eraseFileStorageAll_BG96v+0x58>)
 8002754:	4813      	ldr	r0, [pc, #76]	; (80027a4 <_Z24eraseFileStorageAll_BG96v+0x5c>)
 8002756:	f7fe ff92 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <_Z24eraseFileStorageAll_BG96v+0x2a>
 8002760:	4911      	ldr	r1, [pc, #68]	; (80027a8 <_Z24eraseFileStorageAll_BG96v+0x60>)
 8002762:	4810      	ldr	r0, [pc, #64]	; (80027a4 <_Z24eraseFileStorageAll_BG96v+0x5c>)
 8002764:	f7fe ffa2 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <_Z24eraseFileStorageAll_BG96v+0x2a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <_Z24eraseFileStorageAll_BG96v+0x2c>
 8002772:	2300      	movs	r3, #0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <_Z24eraseFileStorageAll_BG96v+0x36>
        ret = RET_OK;
 8002778:	2301      	movs	r3, #1
 800277a:	71fb      	strb	r3, [r7, #7]
 800277c:	e006      	b.n	800278c <_Z24eraseFileStorageAll_BG96v+0x44>
    } else {
        LOGDEBUG("Erase storage failed\r\n");
 800277e:	490b      	ldr	r1, [pc, #44]	; (80027ac <_Z24eraseFileStorageAll_BG96v+0x64>)
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <_Z24eraseFileStorageAll_BG96v+0x68>)
 8002782:	f006 f865 	bl	8008850 <iprintf>
 8002786:	480b      	ldr	r0, [pc, #44]	; (80027b4 <_Z24eraseFileStorageAll_BG96v+0x6c>)
 8002788:	f006 f8e8 	bl	800895c <puts>
    }

    delay(100);
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	f001 fb51 	bl	8003e34 <HAL_Delay>
    return ret;
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	0800d478 	.word	0x0800d478
 80027a4:	20000670 	.word	0x20000670
 80027a8:	0800ce7c 	.word	0x0800ce7c
 80027ac:	0800ccc0 	.word	0x0800ccc0
 80027b0:	0800ccc8 	.word	0x0800ccc8
 80027b4:	0800d488 	.word	0x0800d488

080027b8 <_Z26setTlsCertificatePath_BG96PcS_>:
// ----------------------------------------------------------------
// Functions: SSL/TLS config
// ----------------------------------------------------------------

int8_t setTlsCertificatePath_BG96(char * param, char * path)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
    int8_t ret = RET_NOK;
 80027c2:	23ff      	movs	r3, #255	; 0xff
 80027c4:	73fb      	strb	r3, [r7, #15]
    int tls_ctxindex = 0;       // ssl context index (0 - 5)
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]

    if(m_parser.send("AT+QSSLCFG=\"%s\",%d,\"%s\"", param, tls_ctxindex, path) && m_parser.recv("OK")) {
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4912      	ldr	r1, [pc, #72]	; (800281c <_Z26setTlsCertificatePath_BG96PcS_+0x64>)
 80027d4:	4812      	ldr	r0, [pc, #72]	; (8002820 <_Z26setTlsCertificatePath_BG96PcS_+0x68>)
 80027d6:	f7fe ff52 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <_Z26setTlsCertificatePath_BG96PcS_+0x3a>
 80027e0:	4910      	ldr	r1, [pc, #64]	; (8002824 <_Z26setTlsCertificatePath_BG96PcS_+0x6c>)
 80027e2:	480f      	ldr	r0, [pc, #60]	; (8002820 <_Z26setTlsCertificatePath_BG96PcS_+0x68>)
 80027e4:	f7fe ff62 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <_Z26setTlsCertificatePath_BG96PcS_+0x3a>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <_Z26setTlsCertificatePath_BG96PcS_+0x3c>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <_Z26setTlsCertificatePath_BG96PcS_+0x46>
        ret = RET_OK;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e007      	b.n	800280e <_Z26setTlsCertificatePath_BG96PcS_+0x56>
    } else {
        LOGDEBUG("Set SSL/TLS certificate path failed: %s\r\n", param);
 80027fe:	490a      	ldr	r1, [pc, #40]	; (8002828 <_Z26setTlsCertificatePath_BG96PcS_+0x70>)
 8002800:	480a      	ldr	r0, [pc, #40]	; (800282c <_Z26setTlsCertificatePath_BG96PcS_+0x74>)
 8002802:	f006 f825 	bl	8008850 <iprintf>
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <_Z26setTlsCertificatePath_BG96PcS_+0x78>)
 800280a:	f006 f821 	bl	8008850 <iprintf>
    }
    return ret;
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	0800d4d8 	.word	0x0800d4d8
 8002820:	20000670 	.word	0x20000670
 8002824:	0800ce7c 	.word	0x0800ce7c
 8002828:	0800ccc0 	.word	0x0800ccc0
 800282c:	0800ccc8 	.word	0x0800ccc8
 8002830:	0800d4f0 	.word	0x0800d4f0

08002834 <_Z28setTlsConfig_sslversion_BG96i>:

// 0: SSL3.0, 1: TLS1.0, 2: TLS1.1, 3: TLS1.2, 4: All
int8_t setTlsConfig_sslversion_BG96(int ver)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af02      	add	r7, sp, #8
 800283a:	6078      	str	r0, [r7, #4]
    int8_t ret = RET_NOK;
 800283c:	23ff      	movs	r3, #255	; 0xff
 800283e:	77fb      	strb	r3, [r7, #31]
    int tls_ctxindex = 0;     // ssl context index (0 - 5)
 8002840:	2300      	movs	r3, #0
 8002842:	61bb      	str	r3, [r7, #24]
    char param[] = "sslversion";    // ssl config paramter type
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <_Z28setTlsConfig_sslversion_BG96i+0x74>)
 8002846:	f107 030c 	add.w	r3, r7, #12
 800284a:	ca07      	ldmia	r2, {r0, r1, r2}
 800284c:	c303      	stmia	r3!, {r0, r1}
 800284e:	801a      	strh	r2, [r3, #0]
 8002850:	3302      	adds	r3, #2
 8002852:	0c12      	lsrs	r2, r2, #16
 8002854:	701a      	strb	r2, [r3, #0]

    if(m_parser.send("AT+QSSLCFG=\"%s\",%d,%d", param, tls_ctxindex, ver) && m_parser.recv("OK")) {
 8002856:	f107 020c 	add.w	r2, r7, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4912      	ldr	r1, [pc, #72]	; (80028ac <_Z28setTlsConfig_sslversion_BG96i+0x78>)
 8002862:	4813      	ldr	r0, [pc, #76]	; (80028b0 <_Z28setTlsConfig_sslversion_BG96i+0x7c>)
 8002864:	f7fe ff0b 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <_Z28setTlsConfig_sslversion_BG96i+0x4c>
 800286e:	4911      	ldr	r1, [pc, #68]	; (80028b4 <_Z28setTlsConfig_sslversion_BG96i+0x80>)
 8002870:	480f      	ldr	r0, [pc, #60]	; (80028b0 <_Z28setTlsConfig_sslversion_BG96i+0x7c>)
 8002872:	f7fe ff1b 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <_Z28setTlsConfig_sslversion_BG96i+0x4c>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <_Z28setTlsConfig_sslversion_BG96i+0x4e>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <_Z28setTlsConfig_sslversion_BG96i+0x58>
        ret = RET_OK;
 8002886:	2301      	movs	r3, #1
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e007      	b.n	800289c <_Z28setTlsConfig_sslversion_BG96i+0x68>
    } else {
        LOGDEBUG("Set SSL/TLS version failed: %d\r\n", ver);
 800288c:	490a      	ldr	r1, [pc, #40]	; (80028b8 <_Z28setTlsConfig_sslversion_BG96i+0x84>)
 800288e:	480b      	ldr	r0, [pc, #44]	; (80028bc <_Z28setTlsConfig_sslversion_BG96i+0x88>)
 8002890:	f005 ffde 	bl	8008850 <iprintf>
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	480a      	ldr	r0, [pc, #40]	; (80028c0 <_Z28setTlsConfig_sslversion_BG96i+0x8c>)
 8002898:	f005 ffda 	bl	8008850 <iprintf>
    }
    return ret;
 800289c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	0800d558 	.word	0x0800d558
 80028ac:	0800d51c 	.word	0x0800d51c
 80028b0:	20000670 	.word	0x20000670
 80028b4:	0800ce7c 	.word	0x0800ce7c
 80028b8:	0800ccc0 	.word	0x0800ccc0
 80028bc:	0800ccc8 	.word	0x0800ccc8
 80028c0:	0800d534 	.word	0x0800d534

080028c4 <_Z29setTlsConfig_ciphersuite_BG96Pc>:

int8_t setTlsConfig_ciphersuite_BG96(char * ciphersuite)    // refer to SSL manual
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	6078      	str	r0, [r7, #4]
    int8_t ret = RET_NOK;
 80028cc:	23ff      	movs	r3, #255	; 0xff
 80028ce:	77fb      	strb	r3, [r7, #31]
    int tls_ctxindex = 0;     // ssl context index (0 - 5)
 80028d0:	2300      	movs	r3, #0
 80028d2:	61bb      	str	r3, [r7, #24]
    char param[] = "ciphersuite";           // ssl config paramter type
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x70>)
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	ca07      	ldmia	r2, {r0, r1, r2}
 80028dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    if(m_parser.send("AT+QSSLCFG=\"%s\",%d,%s", param, tls_ctxindex, ciphersuite) && m_parser.recv("OK")) {
 80028e0:	f107 020c 	add.w	r2, r7, #12
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4913      	ldr	r1, [pc, #76]	; (8002938 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x74>)
 80028ec:	4813      	ldr	r0, [pc, #76]	; (800293c <_Z29setTlsConfig_ciphersuite_BG96Pc+0x78>)
 80028ee:	f7fe fec6 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <_Z29setTlsConfig_ciphersuite_BG96Pc+0x46>
 80028f8:	4911      	ldr	r1, [pc, #68]	; (8002940 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x7c>)
 80028fa:	4810      	ldr	r0, [pc, #64]	; (800293c <_Z29setTlsConfig_ciphersuite_BG96Pc+0x78>)
 80028fc:	f7fe fed6 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <_Z29setTlsConfig_ciphersuite_BG96Pc+0x46>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <_Z29setTlsConfig_ciphersuite_BG96Pc+0x48>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x52>
        ret = RET_OK;
 8002910:	2301      	movs	r3, #1
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e007      	b.n	8002926 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x62>
    } else {
        LOGDEBUG("Set SSL/TLS Ciphersuite failed: %d\r\n", ciphersuite);
 8002916:	490b      	ldr	r1, [pc, #44]	; (8002944 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x80>)
 8002918:	480b      	ldr	r0, [pc, #44]	; (8002948 <_Z29setTlsConfig_ciphersuite_BG96Pc+0x84>)
 800291a:	f005 ff99 	bl	8008850 <iprintf>
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	480a      	ldr	r0, [pc, #40]	; (800294c <_Z29setTlsConfig_ciphersuite_BG96Pc+0x88>)
 8002922:	f005 ff95 	bl	8008850 <iprintf>
    }
    return ret;
 8002926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3720      	adds	r7, #32
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	0800d5a4 	.word	0x0800d5a4
 8002938:	0800d564 	.word	0x0800d564
 800293c:	20000670 	.word	0x20000670
 8002940:	0800ce7c 	.word	0x0800ce7c
 8002944:	0800ccc0 	.word	0x0800ccc0
 8002948:	0800ccc8 	.word	0x0800ccc8
 800294c:	0800d57c 	.word	0x0800d57c

08002950 <_Z26setTlsConfig_seclevel_BG96i>:

int8_t setTlsConfig_seclevel_BG96(int seclevel)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
    int8_t ret = RET_NOK;
 8002958:	23ff      	movs	r3, #255	; 0xff
 800295a:	77fb      	strb	r3, [r7, #31]
    int tls_ctxindex = 0;     // ssl context index (0 - 5)
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
    char sslconfig[] = "seclevel";          // ssl config paramter type
 8002960:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <_Z26setTlsConfig_seclevel_BG96i+0x70>)
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	ca07      	ldmia	r2, {r0, r1, r2}
 8002968:	c303      	stmia	r3!, {r0, r1}
 800296a:	701a      	strb	r2, [r3, #0]

    if(m_parser.send("AT+QSSLCFG=\"%s\",%d,%d", sslconfig, tls_ctxindex, seclevel) && m_parser.recv("OK")) {
 800296c:	f107 020c 	add.w	r2, r7, #12
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4913      	ldr	r1, [pc, #76]	; (80029c4 <_Z26setTlsConfig_seclevel_BG96i+0x74>)
 8002978:	4813      	ldr	r0, [pc, #76]	; (80029c8 <_Z26setTlsConfig_seclevel_BG96i+0x78>)
 800297a:	f7fe fe80 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <_Z26setTlsConfig_seclevel_BG96i+0x46>
 8002984:	4911      	ldr	r1, [pc, #68]	; (80029cc <_Z26setTlsConfig_seclevel_BG96i+0x7c>)
 8002986:	4810      	ldr	r0, [pc, #64]	; (80029c8 <_Z26setTlsConfig_seclevel_BG96i+0x78>)
 8002988:	f7fe fe90 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <_Z26setTlsConfig_seclevel_BG96i+0x46>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <_Z26setTlsConfig_seclevel_BG96i+0x48>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <_Z26setTlsConfig_seclevel_BG96i+0x52>
        ret = RET_OK;
 800299c:	2301      	movs	r3, #1
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e007      	b.n	80029b2 <_Z26setTlsConfig_seclevel_BG96i+0x62>
    } else {
        LOGDEBUG("Set SSL/TLS authentication mode failed: %d\r\n", seclevel);
 80029a2:	490b      	ldr	r1, [pc, #44]	; (80029d0 <_Z26setTlsConfig_seclevel_BG96i+0x80>)
 80029a4:	480b      	ldr	r0, [pc, #44]	; (80029d4 <_Z26setTlsConfig_seclevel_BG96i+0x84>)
 80029a6:	f005 ff53 	bl	8008850 <iprintf>
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <_Z26setTlsConfig_seclevel_BG96i+0x88>)
 80029ae:	f005 ff4f 	bl	8008850 <iprintf>
    }
    return ret;
 80029b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	0800d5e0 	.word	0x0800d5e0
 80029c4:	0800d51c 	.word	0x0800d51c
 80029c8:	20000670 	.word	0x20000670
 80029cc:	0800ce7c 	.word	0x0800ce7c
 80029d0:	0800ccc0 	.word	0x0800ccc0
 80029d4:	0800ccc8 	.word	0x0800ccc8
 80029d8:	0800d5b0 	.word	0x0800d5b0

080029dc <_Z29setTlsConfig_ignoreltime_BG96b>:

int8_t setTlsConfig_ignoreltime_BG96(bool enable)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b08b      	sub	sp, #44	; 0x2c
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
    int8_t ret = RET_NOK;
 80029e6:	23ff      	movs	r3, #255	; 0xff
 80029e8:	77fb      	strb	r3, [r7, #31]
    int tls_ctxindex = 0;     // ssl context index (0 - 5)
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
    char sslconfig[] = "ignorelocaltime";   // ssl config paramter type
 80029ee:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <_Z29setTlsConfig_ignoreltime_BG96b+0x80>)
 80029f0:	f107 0408 	add.w	r4, r7, #8
 80029f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if(m_parser.send("AT+QSSLCFG=\"%s\",%d,%d", sslconfig, tls_ctxindex, enable?1:0) && m_parser.recv("OK")) {
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <_Z29setTlsConfig_ignoreltime_BG96b+0x28>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <_Z29setTlsConfig_ignoreltime_BG96b+0x2a>
 8002a04:	2300      	movs	r3, #0
 8002a06:	f107 0208 	add.w	r2, r7, #8
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4914      	ldr	r1, [pc, #80]	; (8002a60 <_Z29setTlsConfig_ignoreltime_BG96b+0x84>)
 8002a10:	4814      	ldr	r0, [pc, #80]	; (8002a64 <_Z29setTlsConfig_ignoreltime_BG96b+0x88>)
 8002a12:	f7fe fe34 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <_Z29setTlsConfig_ignoreltime_BG96b+0x52>
 8002a1c:	4912      	ldr	r1, [pc, #72]	; (8002a68 <_Z29setTlsConfig_ignoreltime_BG96b+0x8c>)
 8002a1e:	4811      	ldr	r0, [pc, #68]	; (8002a64 <_Z29setTlsConfig_ignoreltime_BG96b+0x88>)
 8002a20:	f7fe fe44 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <_Z29setTlsConfig_ignoreltime_BG96b+0x52>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <_Z29setTlsConfig_ignoreltime_BG96b+0x54>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <_Z29setTlsConfig_ignoreltime_BG96b+0x5e>
        ret = RET_OK;
 8002a34:	2301      	movs	r3, #1
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e009      	b.n	8002a4e <_Z29setTlsConfig_ignoreltime_BG96b+0x72>
    } else {
        LOGDEBUG("Set SSL/TLS ignore validity check option failed: %s\r\n", sslconfig);
 8002a3a:	490c      	ldr	r1, [pc, #48]	; (8002a6c <_Z29setTlsConfig_ignoreltime_BG96b+0x90>)
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <_Z29setTlsConfig_ignoreltime_BG96b+0x94>)
 8002a3e:	f005 ff07 	bl	8008850 <iprintf>
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	4619      	mov	r1, r3
 8002a48:	480a      	ldr	r0, [pc, #40]	; (8002a74 <_Z29setTlsConfig_ignoreltime_BG96b+0x98>)
 8002a4a:	f005 ff01 	bl	8008850 <iprintf>
    }
    return ret;
 8002a4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	0800d624 	.word	0x0800d624
 8002a60:	0800d51c 	.word	0x0800d51c
 8002a64:	20000670 	.word	0x20000670
 8002a68:	0800ce7c 	.word	0x0800ce7c
 8002a6c:	0800ccc0 	.word	0x0800ccc0
 8002a70:	0800ccc8 	.word	0x0800ccc8
 8002a74:	0800d5ec 	.word	0x0800d5ec

08002a78 <_Z26aws_iot_connection_processv>:
// ----------------------------------------------------------------
// Functions: AWS IoT samples
// ----------------------------------------------------------------

int8_t aws_iot_connection_process(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
    static int8_t mqtt_state;

    switch(mqtt_state) {
 8002a7c:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d85e      	bhi.n	8002b44 <_Z26aws_iot_connection_processv+0xcc>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <_Z26aws_iot_connection_processv+0x14>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002ad9 	.word	0x08002ad9
 8002a94:	08002b4d 	.word	0x08002b4d
 8002a98:	08002b1d 	.word	0x08002b1d
        case MQTT_STATE_CONNECTED:
    break;

        case MQTT_STATE_OPEN:
    if(openMqttBroker_BG96(AWS_IOT_MQTT_HOST, AWS_IOT_MQTT_PORT) == RET_OK) {
 8002a9c:	f242 21b3 	movw	r1, #8883	; 0x22b3
 8002aa0:	482e      	ldr	r0, [pc, #184]	; (8002b5c <_Z26aws_iot_connection_processv+0xe4>)
 8002aa2:	f7ff fa21 	bl	8001ee8 <_Z19openMqttBroker_BG96Pci>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <_Z26aws_iot_connection_processv+0x52>
        MYPRINTF("[MQTT] Socket open success\r\n");
 8002ab6:	482a      	ldr	r0, [pc, #168]	; (8002b60 <_Z26aws_iot_connection_processv+0xe8>)
 8002ab8:	f005 feca 	bl	8008850 <iprintf>
 8002abc:	4829      	ldr	r0, [pc, #164]	; (8002b64 <_Z26aws_iot_connection_processv+0xec>)
 8002abe:	f005 ff4d 	bl	800895c <puts>
        mqtt_state = MQTT_STATE_CONNECT;
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
    } else {
        MYPRINTF("[MQTT] Socket open failed\r\n");
    }
    break;
 8002ac8:	e041      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>
        MYPRINTF("[MQTT] Socket open failed\r\n");
 8002aca:	4825      	ldr	r0, [pc, #148]	; (8002b60 <_Z26aws_iot_connection_processv+0xe8>)
 8002acc:	f005 fec0 	bl	8008850 <iprintf>
 8002ad0:	4825      	ldr	r0, [pc, #148]	; (8002b68 <_Z26aws_iot_connection_processv+0xf0>)
 8002ad2:	f005 ff43 	bl	800895c <puts>
    break;
 8002ad6:	e03a      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>

        case MQTT_STATE_CONNECT:
    if(connectMqttBroker_BG96(AWS_IOT_MQTT_CLIENT_ID, NULL, NULL) == RET_OK) {
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	4823      	ldr	r0, [pc, #140]	; (8002b6c <_Z26aws_iot_connection_processv+0xf4>)
 8002ade:	f7ff faad 	bl	800203c <_Z22connectMqttBroker_BG96PcS_S_>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <_Z26aws_iot_connection_processv+0x90>
        MYPRINTF("[MQTT] Connected, ClientID: \"%s\"\r\n", AWS_IOT_MQTT_CLIENT_ID);
 8002af2:	481b      	ldr	r0, [pc, #108]	; (8002b60 <_Z26aws_iot_connection_processv+0xe8>)
 8002af4:	f005 feac 	bl	8008850 <iprintf>
 8002af8:	491c      	ldr	r1, [pc, #112]	; (8002b6c <_Z26aws_iot_connection_processv+0xf4>)
 8002afa:	481d      	ldr	r0, [pc, #116]	; (8002b70 <_Z26aws_iot_connection_processv+0xf8>)
 8002afc:	f005 fea8 	bl	8008850 <iprintf>
        mqtt_state = MQTT_STATE_CONNECTED;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
    } else {
        MYPRINTF("[MQTT] Connect failed\r\n");
        mqtt_state = MQTT_STATE_DISCON;
    }
    break;
 8002b06:	e022      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>
        MYPRINTF("[MQTT] Connect failed\r\n");
 8002b08:	4815      	ldr	r0, [pc, #84]	; (8002b60 <_Z26aws_iot_connection_processv+0xe8>)
 8002b0a:	f005 fea1 	bl	8008850 <iprintf>
 8002b0e:	4819      	ldr	r0, [pc, #100]	; (8002b74 <_Z26aws_iot_connection_processv+0xfc>)
 8002b10:	f005 ff24 	bl	800895c <puts>
        mqtt_state = MQTT_STATE_DISCON;
 8002b14:	4b10      	ldr	r3, [pc, #64]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002b16:	2203      	movs	r2, #3
 8002b18:	701a      	strb	r2, [r3, #0]
    break;
 8002b1a:	e018      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>

        case MQTT_STATE_DISCON:
    if(closeMqttBroker_BG96() == RET_OK) {
 8002b1c:	f7ff fb72 	bl	8002204 <_Z20closeMqttBroker_BG96v>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	bf0c      	ite	eq
 8002b26:	2301      	moveq	r3, #1
 8002b28:	2300      	movne	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <_Z26aws_iot_connection_processv+0xc4>
        MYPRINTF("[MQTT] Disconnected\r\n");
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <_Z26aws_iot_connection_processv+0xe8>)
 8002b32:	f005 fe8d 	bl	8008850 <iprintf>
 8002b36:	4810      	ldr	r0, [pc, #64]	; (8002b78 <_Z26aws_iot_connection_processv+0x100>)
 8002b38:	f005 ff10 	bl	800895c <puts>
    }
    mqtt_state = MQTT_STATE_OPEN;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
    break;
 8002b42:	e004      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>

        default:
    mqtt_state = MQTT_STATE_OPEN;
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
    break;
 8002b4a:	e000      	b.n	8002b4e <_Z26aws_iot_connection_processv+0xd6>
    break;
 8002b4c:	bf00      	nop
    }

    return mqtt_state;
 8002b4e:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <_Z26aws_iot_connection_processv+0xe0>)
 8002b50:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200016cc 	.word	0x200016cc
 8002b5c:	0800d634 	.word	0x0800d634
 8002b60:	0800cde0 	.word	0x0800cde0
 8002b64:	0800d664 	.word	0x0800d664
 8002b68:	0800d680 	.word	0x0800d680
 8002b6c:	0800d69c 	.word	0x0800d69c
 8002b70:	0800d6ac 	.word	0x0800d6ac
 8002b74:	0800d6d0 	.word	0x0800d6d0
 8002b78:	0800d6e8 	.word	0x0800d6e8

08002b7c <_Z16setGpsOnOff_BG96b>:
// ----------------------------------------------------------------
// Functions: Cat.M1 GPS
// ----------------------------------------------------------------

int8_t setGpsOnOff_BG96(bool onoff)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b096      	sub	sp, #88	; 0x58
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  int8_t ret = RET_NOK;
 8002b86:	23ff      	movs	r3, #255	; 0xff
 8002b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  char _buf[15];
  char _buf1[30];
  char _buf2[30];

  sprintf((char *)_buf, "%s", onoff ? "AT+QGPS=2" : "AT+QGPSEND");
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <_Z16setGpsOnOff_BG96b+0x1a>
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <_Z16setGpsOnOff_BG96b+0xbc>)
 8002b94:	e000      	b.n	8002b98 <_Z16setGpsOnOff_BG96b+0x1c>
 8002b96:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <_Z16setGpsOnOff_BG96b+0xc0>)
 8002b98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b9c:	4928      	ldr	r1, [pc, #160]	; (8002c40 <_Z16setGpsOnOff_BG96b+0xc4>)
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f005 ff3e 	bl	8008a20 <siprintf>

  if (m_parser.send(_buf) && m_parser.recv("OK")) {
 8002ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4826      	ldr	r0, [pc, #152]	; (8002c44 <_Z16setGpsOnOff_BG96b+0xc8>)
 8002bac:	f7fe fd67 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <_Z16setGpsOnOff_BG96b+0x4c>
 8002bb6:	4924      	ldr	r1, [pc, #144]	; (8002c48 <_Z16setGpsOnOff_BG96b+0xcc>)
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <_Z16setGpsOnOff_BG96b+0xc8>)
 8002bba:	f7fe fd77 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <_Z16setGpsOnOff_BG96b+0x4c>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <_Z16setGpsOnOff_BG96b+0x4e>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <_Z16setGpsOnOff_BG96b+0x84>
    sprintf((char *)_buf1, "GPS Power: %s\r\n", onoff ? "On" : "Off");
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_Z16setGpsOnOff_BG96b+0x5c>
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <_Z16setGpsOnOff_BG96b+0xd0>)
 8002bd6:	e000      	b.n	8002bda <_Z16setGpsOnOff_BG96b+0x5e>
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <_Z16setGpsOnOff_BG96b+0xd4>)
 8002bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bde:	491d      	ldr	r1, [pc, #116]	; (8002c54 <_Z16setGpsOnOff_BG96b+0xd8>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 ff1d 	bl	8008a20 <siprintf>
    LOGDEBUG(_buf1);
 8002be6:	491c      	ldr	r1, [pc, #112]	; (8002c58 <_Z16setGpsOnOff_BG96b+0xdc>)
 8002be8:	481c      	ldr	r0, [pc, #112]	; (8002c5c <_Z16setGpsOnOff_BG96b+0xe0>)
 8002bea:	f005 fe31 	bl	8008850 <iprintf>
 8002bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 fe2c 	bl	8008850 <iprintf>
    ret = RET_OK;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002bfe:	e014      	b.n	8002c2a <_Z16setGpsOnOff_BG96b+0xae>
  } else {
    sprintf((char *)_buf2, "Set GPS Power %s failed\r\n", onoff ? "On" : "Off");
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_Z16setGpsOnOff_BG96b+0x8e>
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <_Z16setGpsOnOff_BG96b+0xd0>)
 8002c08:	e000      	b.n	8002c0c <_Z16setGpsOnOff_BG96b+0x90>
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <_Z16setGpsOnOff_BG96b+0xd4>)
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4913      	ldr	r1, [pc, #76]	; (8002c60 <_Z16setGpsOnOff_BG96b+0xe4>)
 8002c12:	4618      	mov	r0, r3
 8002c14:	f005 ff04 	bl	8008a20 <siprintf>
    LOGDEBUG(_buf2);
 8002c18:	490f      	ldr	r1, [pc, #60]	; (8002c58 <_Z16setGpsOnOff_BG96b+0xdc>)
 8002c1a:	4810      	ldr	r0, [pc, #64]	; (8002c5c <_Z16setGpsOnOff_BG96b+0xe0>)
 8002c1c:	f005 fe18 	bl	8008850 <iprintf>
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 fe13 	bl	8008850 <iprintf>
  }
  return ret;
 8002c2a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3758      	adds	r7, #88	; 0x58
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	0800d700 	.word	0x0800d700
 8002c3c:	0800d70c 	.word	0x0800d70c
 8002c40:	0800d718 	.word	0x0800d718
 8002c44:	20000670 	.word	0x20000670
 8002c48:	0800ce7c 	.word	0x0800ce7c
 8002c4c:	0800d71c 	.word	0x0800d71c
 8002c50:	0800d720 	.word	0x0800d720
 8002c54:	0800d724 	.word	0x0800d724
 8002c58:	0800ccc0 	.word	0x0800ccc0
 8002c5c:	0800ccc8 	.word	0x0800ccc8
 8002c60:	0800d734 	.word	0x0800d734

08002c64 <_Z19getGpsLocation_BG9610gps_data_t>:



int8_t getGpsLocation_BG96(gps_data data)
{
 8002c64:	b084      	sub	sp, #16
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b0be      	sub	sp, #248	; 0xf8
 8002c6a:	af0a      	add	r7, sp, #40	; 0x28
 8002c6c:	f107 0cd8 	add.w	ip, r7, #216	; 0xd8
 8002c70:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int8_t ret = RET_NOK;
 8002c74:	23ff      	movs	r3, #255	; 0xff
 8002c76:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  char buf1[200];

  bool ok = false;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
  //Timer t;

  // Structure init: GPS info
  //data->utc = data->lat = data->lon = data->hdop = data->altitude = data->cog = data->spkm = data->spkn = data->nsat = 0.0;
  //data->fix = 0;
  data.utc = data.lat = data.lon = data.hdop = data.altitude = data.cog = data.spkm = data.spkn = data.nsat = 0.0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002c9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ca6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  data.fix = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  //data->date = 0;
  //memset(&data->date, 0x00, 7);
  //strcpy(data->date, "");
  strcpy(data.date, "");
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc

  // timer start
  //t.start();
  getLocationTime = millis();
 8002cd2:	f001 f8a3 	bl	8003e1c <HAL_GetTick>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a48      	ldr	r2, [pc, #288]	; (8002dfc <_Z19getGpsLocation_BG9610gps_data_t+0x198>)
 8002cda:	6013      	str	r3, [r2, #0]

    //while ( !ok && ( (millis() - getLocationTime) < BG96_CONNECT_TIMEOUT ) ) {
    if (!ok) {
 8002cdc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d078      	beq.n	8002ddc <_Z19getGpsLocation_BG9610gps_data_t+0x178>
    m_parser.flush();
 8002cea:	4845      	ldr	r0, [pc, #276]	; (8002e00 <_Z19getGpsLocation_BG9610gps_data_t+0x19c>)
 8002cec:	f7fe fafd 	bl	80012ea <_ZN11ATCmdParser5flushEv>
    m_parser.send((char*)"AT+QGPSLOC=2"); // MS-based mode
 8002cf0:	4944      	ldr	r1, [pc, #272]	; (8002e04 <_Z19getGpsLocation_BG9610gps_data_t+0x1a0>)
 8002cf2:	4843      	ldr	r0, [pc, #268]	; (8002e00 <_Z19getGpsLocation_BG9610gps_data_t+0x19c>)
 8002cf4:	f7fe fcc3 	bl	800167e <_ZN11ATCmdParser4sendEPKcz>
    ok = m_parser.recv("+QGPSLOC: ");
 8002cf8:	4943      	ldr	r1, [pc, #268]	; (8002e08 <_Z19getGpsLocation_BG9610gps_data_t+0x1a4>)
 8002cfa:	4841      	ldr	r0, [pc, #260]	; (8002e00 <_Z19getGpsLocation_BG9610gps_data_t+0x19c>)
 8002cfc:	f7fe fcd6 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
    if (ok) {
 8002d06:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d066      	beq.n	8002ddc <_Z19getGpsLocation_BG9610gps_data_t+0x178>
      m_parser.recv("%s\r\n", buf1);
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	461a      	mov	r2, r3
 8002d12:	493e      	ldr	r1, [pc, #248]	; (8002e0c <_Z19getGpsLocation_BG9610gps_data_t+0x1a8>)
 8002d14:	483a      	ldr	r0, [pc, #232]	; (8002e00 <_Z19getGpsLocation_BG9610gps_data_t+0x19c>)
 8002d16:	f7fe fcc9 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
      sscanf(buf1, "%f,%f,%f,%f,%f,%d,%f,%f,%f,%6s,%d",
 8002d1a:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002d1e:	1d38      	adds	r0, r7, #4
 8002d20:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002d24:	9308      	str	r3, [sp, #32]
 8002d26:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002d2a:	9307      	str	r3, [sp, #28]
 8002d2c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d30:	9306      	str	r3, [sp, #24]
 8002d32:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002d36:	9305      	str	r3, [sp, #20]
 8002d38:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002d3c:	9304      	str	r3, [sp, #16]
 8002d3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002d42:	9303      	str	r3, [sp, #12]
 8002d44:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002d48:	9302      	str	r3, [sp, #8]
 8002d4a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8002d5c:	492c      	ldr	r1, [pc, #176]	; (8002e10 <_Z19getGpsLocation_BG9610gps_data_t+0x1ac>)
 8002d5e:	f005 fe7f 	bl	8008a60 <siscanf>
     &data.altitude, &data.fix, &data.cog,
     &data.spkm, &data.spkn, &data.date, &data.nsat);

     //dtostrf(data.lat, 7, 5, latBuf);
     //dtostrf(data.lon, 8, 5, lonBuf);
     sprintf((char*)utcBuf, "%f", data.utc);
 8002d62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fbf6 	bl	8000558 <__aeabi_f2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4928      	ldr	r1, [pc, #160]	; (8002e14 <_Z19getGpsLocation_BG9610gps_data_t+0x1b0>)
 8002d72:	4829      	ldr	r0, [pc, #164]	; (8002e18 <_Z19getGpsLocation_BG9610gps_data_t+0x1b4>)
 8002d74:	f005 fe54 	bl	8008a20 <siprintf>
     sprintf((char*)latBuf, "%f", data.lat);
 8002d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbeb 	bl	8000558 <__aeabi_f2d>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4923      	ldr	r1, [pc, #140]	; (8002e14 <_Z19getGpsLocation_BG9610gps_data_t+0x1b0>)
 8002d88:	4824      	ldr	r0, [pc, #144]	; (8002e1c <_Z19getGpsLocation_BG9610gps_data_t+0x1b8>)
 8002d8a:	f005 fe49 	bl	8008a20 <siprintf>
     sprintf((char*)lonBuf, "%f", data.lon);
 8002d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbe0 	bl	8000558 <__aeabi_f2d>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	491d      	ldr	r1, [pc, #116]	; (8002e14 <_Z19getGpsLocation_BG9610gps_data_t+0x1b0>)
 8002d9e:	4820      	ldr	r0, [pc, #128]	; (8002e20 <_Z19getGpsLocation_BG9610gps_data_t+0x1bc>)
 8002da0:	f005 fe3e 	bl	8008a20 <siprintf>
     sprintf((char*)dateBuf, "%s", data.date);
 8002da4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002da8:	461a      	mov	r2, r3
 8002daa:	491e      	ldr	r1, [pc, #120]	; (8002e24 <_Z19getGpsLocation_BG9610gps_data_t+0x1c0>)
 8002dac:	481e      	ldr	r0, [pc, #120]	; (8002e28 <_Z19getGpsLocation_BG9610gps_data_t+0x1c4>)
 8002dae:	f005 fe37 	bl	8008a20 <siprintf>
     sprintf((char*)timestampBuf, "%.2f,%s", data.utc, data.date);
 8002db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbce 	bl	8000558 <__aeabi_f2d>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8002dc4:	9100      	str	r1, [sp, #0]
 8002dc6:	4919      	ldr	r1, [pc, #100]	; (8002e2c <_Z19getGpsLocation_BG9610gps_data_t+0x1c8>)
 8002dc8:	4819      	ldr	r0, [pc, #100]	; (8002e30 <_Z19getGpsLocation_BG9610gps_data_t+0x1cc>)
 8002dca:	f005 fe29 	bl	8008a20 <siprintf>
//     Serial.println("");
//     Serial.print("buf1 값 : ");
//     Serial.println((char*)buf1);


      ok = m_parser.recv("OK");
 8002dce:	4919      	ldr	r1, [pc, #100]	; (8002e34 <_Z19getGpsLocation_BG9610gps_data_t+0x1d0>)
 8002dd0:	480b      	ldr	r0, [pc, #44]	; (8002e00 <_Z19getGpsLocation_BG9610gps_data_t+0x19c>)
 8002dd2:	f7fe fc6b 	bl	80016ac <_ZN11ATCmdParser4recvEPKcz>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
    }
  }

  if (ok == true) ret = RET_OK;
 8002ddc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <_Z19getGpsLocation_BG9610gps_data_t+0x186>
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

  return ret;
 8002dea:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	37d0      	adds	r7, #208	; 0xd0
 8002df2:	46bd      	mov	sp, r7
 8002df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002df8:	b004      	add	sp, #16
 8002dfa:	4770      	bx	lr
 8002dfc:	20001520 	.word	0x20001520
 8002e00:	20000670 	.word	0x20000670
 8002e04:	0800d750 	.word	0x0800d750
 8002e08:	0800d760 	.word	0x0800d760
 8002e0c:	0800d76c 	.word	0x0800d76c
 8002e10:	0800d774 	.word	0x0800d774
 8002e14:	0800d798 	.word	0x0800d798
 8002e18:	20001564 	.word	0x20001564
 8002e1c:	200015a4 	.word	0x200015a4
 8002e20:	200015d8 	.word	0x200015d8
 8002e24:	0800d718 	.word	0x0800d718
 8002e28:	20001524 	.word	0x20001524
 8002e2c:	0800d79c 	.word	0x0800d79c
 8002e30:	20000040 	.word	0x20000040
 8002e34:	0800ce7c 	.word	0x0800ce7c

08002e38 <_Z14bg96_DeviceRSTi>:
  }
  return pwrCheck;
}
*/
int bg96_DeviceRST(int rstCheck)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  rstCheck = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	607b      	str	r3, [r7, #4]

 if (rstCheck == 0) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d12b      	bne.n	8002ea2 <_Z14bg96_DeviceRSTi+0x6a>
  HAL_GPIO_WritePin(GPIOA, bg96_rst_Pin, GPIO_PIN_SET);
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4817      	ldr	r0, [pc, #92]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e50:	f001 fb3c 	bl	80044cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, bg96_pwr_Pin, GPIO_PIN_SET);
 8002e54:	2201      	movs	r2, #1
 8002e56:	2102      	movs	r1, #2
 8002e58:	4814      	ldr	r0, [pc, #80]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e5a:	f001 fb37 	bl	80044cc <HAL_GPIO_WritePin>
  delay(300); // Setup Time : Greater than or equal to 30ms
 8002e5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e62:	f000 ffe7 	bl	8003e34 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, bg96_rst_Pin, GPIO_PIN_RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4810      	ldr	r0, [pc, #64]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e6c:	f001 fb2e 	bl	80044cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, bg96_pwr_Pin, GPIO_PIN_RESET);
 8002e70:	2200      	movs	r2, #0
 8002e72:	2102      	movs	r1, #2
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e76:	f001 fb29 	bl	80044cc <HAL_GPIO_WritePin>
  delay(400); // Hold Time : Greater than or equal to 500ms
 8002e7a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e7e:	f000 ffd9 	bl	8003e34 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, bg96_rst_Pin, GPIO_PIN_SET);
 8002e82:	2201      	movs	r2, #1
 8002e84:	2101      	movs	r1, #1
 8002e86:	4809      	ldr	r0, [pc, #36]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e88:	f001 fb20 	bl	80044cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, bg96_pwr_Pin, GPIO_PIN_SET);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4806      	ldr	r0, [pc, #24]	; (8002eac <_Z14bg96_DeviceRSTi+0x74>)
 8002e92:	f001 fb1b 	bl	80044cc <HAL_GPIO_WritePin>
  delay(1000); // Release Time : Greater than or equal to 4800ms
 8002e96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e9a:	f000 ffcb 	bl	8003e34 <HAL_Delay>

  rstCheck = 1;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	607b      	str	r3, [r7, #4]
  }
  return rstCheck;
 8002ea2:	687b      	ldr	r3, [r7, #4]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40020000 	.word	0x40020000

08002eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0c3      	sub	sp, #268	; 0x10c
 8002eb6:	af20      	add	r7, sp, #128	; 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eb8:	f000 ff4a 	bl	8003d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ebc:	f000 fab6 	bl	800342c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec0:	f7fe fc0c 	bl	80016dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002ec4:	f000 fe04 	bl	8003ad0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8002ec8:	f000 fdd8 	bl	8003a7c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002ecc:	f7fe fc74 	bl	80017b8 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 8002ed0:	f000 fb5e 	bl	8003590 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 8002ed4:	f000 fd62 	bl	800399c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8002ed8:	f000 fe24 	bl	8003b24 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart1, &m_parser.rxData, 1);
  Ringbuf_init();
 8002edc:	f7fe f8a0 	bl	8001020 <Ringbuf_init>


  if (bg96_DeviceRST(rstCheck) == 1 ) {
 8002ee0:	4b78      	ldr	r3, [pc, #480]	; (80030c4 <main+0x214>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ffa7 	bl	8002e38 <_Z14bg96_DeviceRSTi>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a2 	beq.w	8003040 <main+0x190>

      //char buf[100];
      //char buf1[40];

      //serialPcInit();
      catm1DeviceInit();
 8002efc:	f7fe fee6 	bl	8001ccc <_Z15catm1DeviceInitv>

      MYPRINTF("Waiting for Cat.M1 Module Ready...\r\n");
 8002f00:	4871      	ldr	r0, [pc, #452]	; (80030c8 <main+0x218>)
 8002f02:	f005 fca5 	bl	8008850 <iprintf>
 8002f06:	4871      	ldr	r0, [pc, #452]	; (80030cc <main+0x21c>)
 8002f08:	f005 fd28 	bl	800895c <puts>

      waitCatM1Ready();
 8002f0c:	f7fe fee4 	bl	8001cd8 <_Z14waitCatM1Readyv>

      delay(2000);
 8002f10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f14:	f000 ff8e 	bl	8003e34 <HAL_Delay>

      MYPRINTF("System Init Complete\r\n");
 8002f18:	486b      	ldr	r0, [pc, #428]	; (80030c8 <main+0x218>)
 8002f1a:	f005 fc99 	bl	8008850 <iprintf>
 8002f1e:	486c      	ldr	r0, [pc, #432]	; (80030d0 <main+0x220>)
 8002f20:	f005 fd1c 	bl	800895c <puts>


    if ( (setEchoStatus_BG96(false)) && (getUsimStatus_BG96()) && (getNetworkStatus_BG96()) )
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fe fd57 	bl	80019d8 <_Z18setEchoStatus_BG96b>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <main+0x98>
 8002f30:	f7fe fdce 	bl	8001ad0 <_Z18getUsimStatus_BG96v>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d006      	beq.n	8002f48 <main+0x98>
 8002f3a:	f7fe fe37 	bl	8001bac <_Z21getNetworkStatus_BG96v>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <main+0x98>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <main+0x9a>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <main+0xaa>
    	MYPRINTF("System Operation Complete\r\n");
 8002f4e:	485e      	ldr	r0, [pc, #376]	; (80030c8 <main+0x218>)
 8002f50:	f005 fc7e 	bl	8008850 <iprintf>
 8002f54:	485f      	ldr	r0, [pc, #380]	; (80030d4 <main+0x224>)
 8002f56:	f005 fd01 	bl	800895c <puts>
// -> 코드 수정 필요




    checknSetApn_BG96(CATM1_APN_SKT);
 8002f5a:	485f      	ldr	r0, [pc, #380]	; (80030d8 <main+0x228>)
 8002f5c:	f7fe fef8 	bl	8001d50 <_Z17checknSetApn_BG96PKc>

    MYPRINTF("[FILE] Save and check AWS certificates\r\n");
 8002f60:	4859      	ldr	r0, [pc, #356]	; (80030c8 <main+0x218>)
 8002f62:	f005 fc75 	bl	8008850 <iprintf>
 8002f66:	485d      	ldr	r0, [pc, #372]	; (80030dc <main+0x22c>)
 8002f68:	f005 fcf8 	bl	800895c <puts>

    setContextActivate_BG96();
 8002f6c:	f7fe ff92 	bl	8001e94 <_Z23setContextActivate_BG96v>

    int mqtt_state = MQTT_STATE_OPEN;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

   /* Erase BG96 file storage */
      if(eraseFileStorageAll_BG96() == RET_OK) {
 8002f76:	f7ff fbe7 	bl	8002748 <_Z24eraseFileStorageAll_BG96v>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf0c      	ite	eq
 8002f80:	2301      	moveq	r3, #1
 8002f82:	2300      	movne	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <main+0xe6>
          MYPRINTF("[FILE] Erase BG96 storage complete\r\n");
 8002f8a:	484f      	ldr	r0, [pc, #316]	; (80030c8 <main+0x218>)
 8002f8c:	f005 fc60 	bl	8008850 <iprintf>
 8002f90:	4853      	ldr	r0, [pc, #332]	; (80030e0 <main+0x230>)
 8002f92:	f005 fce3 	bl	800895c <puts>
      };

      /* Store AWS IoT certificate files to BG96 storage */
      saveFileToStorage_BG96(AWS_IOT_ROOT_CA_FILENAME, aws_iot_rootCA, strlen(aws_iot_rootCA));
 8002f96:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8002f9a:	4952      	ldr	r1, [pc, #328]	; (80030e4 <main+0x234>)
 8002f9c:	4852      	ldr	r0, [pc, #328]	; (80030e8 <main+0x238>)
 8002f9e:	f7ff fb37 	bl	8002610 <_Z22saveFileToStorage_BG96PcPKci>

      saveFileToStorage_BG96(AWS_IOT_CERTIFICATE_FILENAME, aws_iot_certificate, strlen(aws_iot_certificate));
 8002fa2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8002fa6:	4951      	ldr	r1, [pc, #324]	; (80030ec <main+0x23c>)
 8002fa8:	4851      	ldr	r0, [pc, #324]	; (80030f0 <main+0x240>)
 8002faa:	f7ff fb31 	bl	8002610 <_Z22saveFileToStorage_BG96PcPKci>

      saveFileToStorage_BG96(AWS_IOT_PRIVATE_KEY_FILENAME, aws_iot_private_key, strlen(aws_iot_private_key));
 8002fae:	f240 628f 	movw	r2, #1679	; 0x68f
 8002fb2:	4950      	ldr	r1, [pc, #320]	; (80030f4 <main+0x244>)
 8002fb4:	4850      	ldr	r0, [pc, #320]	; (80030f8 <main+0x248>)
 8002fb6:	f7ff fb2b 	bl	8002610 <_Z22saveFileToStorage_BG96PcPKci>

  #if 0
      dumpFileList_BG96(); // file list dump
  #endif

      MYPRINTF("[SSL/TLS] Set BG96 SSL/TLS configuration\r\n")
 8002fba:	4843      	ldr	r0, [pc, #268]	; (80030c8 <main+0x218>)
 8002fbc:	f005 fc48 	bl	8008850 <iprintf>
 8002fc0:	484e      	ldr	r0, [pc, #312]	; (80030fc <main+0x24c>)
 8002fc2:	f005 fccb 	bl	800895c <puts>

      /* BG96 SSL/TLS config */
      // Set AWS IoT Certificate files
      setTlsCertificatePath_BG96("cacert", AWS_IOT_ROOT_CA_FILENAME);     // Root CA
 8002fc6:	4948      	ldr	r1, [pc, #288]	; (80030e8 <main+0x238>)
 8002fc8:	484d      	ldr	r0, [pc, #308]	; (8003100 <main+0x250>)
 8002fca:	f7ff fbf5 	bl	80027b8 <_Z26setTlsCertificatePath_BG96PcS_>
      setTlsCertificatePath_BG96("clientcert", AWS_IOT_CERTIFICATE_FILENAME);     // Client certificate
 8002fce:	4948      	ldr	r1, [pc, #288]	; (80030f0 <main+0x240>)
 8002fd0:	484c      	ldr	r0, [pc, #304]	; (8003104 <main+0x254>)
 8002fd2:	f7ff fbf1 	bl	80027b8 <_Z26setTlsCertificatePath_BG96PcS_>
      setTlsCertificatePath_BG96("clientkey", AWS_IOT_PRIVATE_KEY_FILENAME);      // Client privatekey
 8002fd6:	4948      	ldr	r1, [pc, #288]	; (80030f8 <main+0x248>)
 8002fd8:	484b      	ldr	r0, [pc, #300]	; (8003108 <main+0x258>)
 8002fda:	f7ff fbed 	bl	80027b8 <_Z26setTlsCertificatePath_BG96PcS_>

      // Set SSL/TLS config
      setTlsConfig_sslversion_BG96(AWS_IOT_BG96_SSLTLS_VERSION);
 8002fde:	2004      	movs	r0, #4
 8002fe0:	f7ff fc28 	bl	8002834 <_Z28setTlsConfig_sslversion_BG96i>
      setTlsConfig_ciphersuite_BG96(AWS_IOT_BG96_SSLTLS_CIPHERSUITE);
 8002fe4:	4849      	ldr	r0, [pc, #292]	; (800310c <main+0x25c>)
 8002fe6:	f7ff fc6d 	bl	80028c4 <_Z29setTlsConfig_ciphersuite_BG96Pc>
      setTlsConfig_seclevel_BG96(AWS_IOT_BG96_SSLTLS_SECLEVEL);
 8002fea:	2002      	movs	r0, #2
 8002fec:	f7ff fcb0 	bl	8002950 <_Z26setTlsConfig_seclevel_BG96i>
      setTlsConfig_ignoreltime_BG96(AWS_IOT_BG96_SSLTLS_IGNORELOCALTIME);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7ff fcf3 	bl	80029dc <_Z29setTlsConfig_ignoreltime_BG96b>


      /* BG96 MQTT config: SSL/TLS enable */
      setMqttTlsEnable_BG96(true);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7ff fac6 	bl	8002588 <_Z21setMqttTlsEnable_BG96b>

      MYPRINTF("[MQTT] Connect to AWS IoT \"%s:%d\"\r\n", AWS_IOT_MQTT_HOST, AWS_IOT_MQTT_PORT);
 8002ffc:	4832      	ldr	r0, [pc, #200]	; (80030c8 <main+0x218>)
 8002ffe:	f005 fc27 	bl	8008850 <iprintf>
 8003002:	f242 22b3 	movw	r2, #8883	; 0x22b3
 8003006:	4942      	ldr	r1, [pc, #264]	; (8003110 <main+0x260>)
 8003008:	4842      	ldr	r0, [pc, #264]	; (8003114 <main+0x264>)
 800300a:	f005 fc21 	bl	8008850 <iprintf>

      if (setGpsOnOff_BG96(ON) == RET_OK) {
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff fdb4 	bl	8002b7c <_Z16setGpsOnOff_BG96b>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <main+0x182>
      MYPRINTF("GPS On\r\n")
 8003024:	4828      	ldr	r0, [pc, #160]	; (80030c8 <main+0x218>)
 8003026:	f005 fc13 	bl	8008850 <iprintf>
 800302a:	483b      	ldr	r0, [pc, #236]	; (8003118 <main+0x268>)
 800302c:	f005 fc96 	bl	800895c <puts>
 8003030:	e00c      	b.n	800304c <main+0x19c>
      if (setGpsOnOff_BG96(OFF) == RET_OK) {
        MYPRINTF("GPS Off\r\n")
      }
  #endif
   }  else {
      MYPRINTF("GPS On failed\r\n")
 8003032:	4825      	ldr	r0, [pc, #148]	; (80030c8 <main+0x218>)
 8003034:	f005 fc0c 	bl	8008850 <iprintf>
 8003038:	4838      	ldr	r0, [pc, #224]	; (800311c <main+0x26c>)
 800303a:	f005 fc8f 	bl	800895c <puts>
 800303e:	e005      	b.n	800304c <main+0x19c>
    }

    }
    else
    	MYPRINTF("GPS On failed\r\n")
 8003040:	4821      	ldr	r0, [pc, #132]	; (80030c8 <main+0x218>)
 8003042:	f005 fc05 	bl	8008850 <iprintf>
 8003046:	4835      	ldr	r0, [pc, #212]	; (800311c <main+0x26c>)
 8003048:	f005 fc88 	bl	800895c <puts>

      //bool subscribe_complete = false;

      sprintf(aws_iot_sub_topic, "$aws/things/%s/shadow/update/accepted", AWS_IOT_MY_THING_NAME);
 800304c:	4a34      	ldr	r2, [pc, #208]	; (8003120 <main+0x270>)
 800304e:	4935      	ldr	r1, [pc, #212]	; (8003124 <main+0x274>)
 8003050:	4835      	ldr	r0, [pc, #212]	; (8003128 <main+0x278>)
 8003052:	f005 fce5 	bl	8008a20 <siprintf>
      sprintf(aws_iot_pub_topic, "$aws/things/%s/shadow/update", AWS_IOT_MY_THING_NAME);
 8003056:	4a32      	ldr	r2, [pc, #200]	; (8003120 <main+0x270>)
 8003058:	4934      	ldr	r1, [pc, #208]	; (800312c <main+0x27c>)
 800305a:	4835      	ldr	r0, [pc, #212]	; (8003130 <main+0x280>)
 800305c:	f005 fce0 	bl	8008a20 <siprintf>
      sprintf(aws_iot_pub_topic1, "$aws/things/%s/shadow/update", AWS_IOT_MY_THING_NAME);
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <main+0x270>)
 8003062:	4932      	ldr	r1, [pc, #200]	; (800312c <main+0x27c>)
 8003064:	4833      	ldr	r0, [pc, #204]	; (8003134 <main+0x284>)
 8003066:	f005 fcdb 	bl	8008a20 <siprintf>
      sprintf(aws_iot_pub_topic2, "dt/cardata/logger/%s/car-data", AWS_IOT_MY_THING_NAME);
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <main+0x270>)
 800306c:	4932      	ldr	r1, [pc, #200]	; (8003138 <main+0x288>)
 800306e:	4833      	ldr	r0, [pc, #204]	; (800313c <main+0x28c>)
 8003070:	f005 fcd6 	bl	8008a20 <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (getGpsLocation_BG96(gps_info) == RET_OK) {
 8003074:	4e32      	ldr	r6, [pc, #200]	; (8003140 <main+0x290>)
 8003076:	466d      	mov	r5, sp
 8003078:	f106 0410 	add.w	r4, r6, #16
 800307c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003084:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003088:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800308c:	f7ff fdea 	bl	8002c64 <_Z19getGpsLocation_BG9610gps_data_t>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d061      	beq.n	8003164 <main+0x2b4>

	        //char* last_utcBuf = utcBuf;
	        //char* last_latBuf = latBuf;
	        //char* last_lonBuf = lonBuf;
	        //char* last_dateBuf = dateBuf;
	        strcpy(last_utcBuf, utcBuf);
 80030a0:	4928      	ldr	r1, [pc, #160]	; (8003144 <main+0x294>)
 80030a2:	4829      	ldr	r0, [pc, #164]	; (8003148 <main+0x298>)
 80030a4:	f005 fd4d 	bl	8008b42 <strcpy>
	        strcpy(last_latBuf, latBuf);
 80030a8:	4928      	ldr	r1, [pc, #160]	; (800314c <main+0x29c>)
 80030aa:	4829      	ldr	r0, [pc, #164]	; (8003150 <main+0x2a0>)
 80030ac:	f005 fd49 	bl	8008b42 <strcpy>
	        strcpy(last_lonBuf, lonBuf);
 80030b0:	4928      	ldr	r1, [pc, #160]	; (8003154 <main+0x2a4>)
 80030b2:	4829      	ldr	r0, [pc, #164]	; (8003158 <main+0x2a8>)
 80030b4:	f005 fd45 	bl	8008b42 <strcpy>
	        strcpy(last_dateBuf, dateBuf);
 80030b8:	4928      	ldr	r1, [pc, #160]	; (800315c <main+0x2ac>)
 80030ba:	4829      	ldr	r0, [pc, #164]	; (8003160 <main+0x2b0>)
 80030bc:	f005 fd41 	bl	8008b42 <strcpy>
 80030c0:	e053      	b.n	800316a <main+0x2ba>
 80030c2:	bf00      	nop
 80030c4:	2000160c 	.word	0x2000160c
 80030c8:	0800cde0 	.word	0x0800cde0
 80030cc:	0800d7a4 	.word	0x0800d7a4
 80030d0:	0800d7c8 	.word	0x0800d7c8
 80030d4:	0800d7e0 	.word	0x0800d7e0
 80030d8:	0800d7fc 	.word	0x0800d7fc
 80030dc:	0800d818 	.word	0x0800d818
 80030e0:	0800d840 	.word	0x0800d840
 80030e4:	0800e7fc 	.word	0x0800e7fc
 80030e8:	0800d864 	.word	0x0800d864
 80030ec:	0800dca0 	.word	0x0800dca0
 80030f0:	0800d878 	.word	0x0800d878
 80030f4:	0800e16c 	.word	0x0800e16c
 80030f8:	0800d88c 	.word	0x0800d88c
 80030fc:	0800d89c 	.word	0x0800d89c
 8003100:	0800d8c8 	.word	0x0800d8c8
 8003104:	0800d8d0 	.word	0x0800d8d0
 8003108:	0800d8dc 	.word	0x0800d8dc
 800310c:	0800d8e8 	.word	0x0800d8e8
 8003110:	0800d634 	.word	0x0800d634
 8003114:	0800d8f0 	.word	0x0800d8f0
 8003118:	0800d914 	.word	0x0800d914
 800311c:	0800d91c 	.word	0x0800d91c
 8003120:	0800d69c 	.word	0x0800d69c
 8003124:	0800d92c 	.word	0x0800d92c
 8003128:	20000694 	.word	0x20000694
 800312c:	0800d954 	.word	0x0800d954
 8003130:	20000714 	.word	0x20000714
 8003134:	20000794 	.word	0x20000794
 8003138:	0800d974 	.word	0x0800d974
 800313c:	20000814 	.word	0x20000814
 8003140:	20001610 	.word	0x20001610
 8003144:	20001564 	.word	0x20001564
 8003148:	20001584 	.word	0x20001584
 800314c:	200015a4 	.word	0x200015a4
 8003150:	20000000 	.word	0x20000000
 8003154:	200015d8 	.word	0x200015d8
 8003158:	20000020 	.word	0x20000020
 800315c:	20001524 	.word	0x20001524
 8003160:	20001544 	.word	0x20001544
	        Serial.print("last_lonBuf 값 : ");
	        Serial.println(last_lonBuf);
	        Serial.print("last_dateBuf 값 : ");
	        Serial.println(last_dateBuf);*/

	       } else delay(1);
 8003164:	2001      	movs	r0, #1
 8003166:	f000 fe65 	bl	8003e34 <HAL_Delay>
	         MYPRINTF("Failed to get GPS information\r\n");
 800316a:	4894      	ldr	r0, [pc, #592]	; (80033bc <main+0x50c>)
 800316c:	f005 fb70 	bl	8008850 <iprintf>
 8003170:	4893      	ldr	r0, [pc, #588]	; (80033c0 <main+0x510>)
 8003172:	f005 fbf3 	bl	800895c <puts>

	        if(aws_iot_connection_process() == MQTT_STATE_CONNECTED) {
 8003176:	f7ff fc7f 	bl	8002a78 <_Z26aws_iot_connection_processv>
 800317a:	4603      	mov	r3, r0
 800317c:	2b02      	cmp	r3, #2
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f43f af74 	beq.w	8003074 <main+0x1c4>

	        	char car_state[] = "hello soomin~";
 800318c:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <main+0x514>)
 800318e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003194:	c407      	stmia	r4!, {r0, r1, r2}
 8003196:	8023      	strh	r3, [r4, #0]
	        	uint32_t rpm = 1;
 8003198:	2301      	movs	r3, #1
 800319a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	        	uint32_t kph = 2;
 800319e:	2302      	movs	r3, #2
 80031a0:	67fb      	str	r3, [r7, #124]	; 0x7c
	        	uint32_t engineLoad = 3;
 80031a2:	2303      	movs	r3, #3
 80031a4:	67bb      	str	r3, [r7, #120]	; 0x78
	        	uint16_t runTime = 4;
 80031a6:	2304      	movs	r3, #4
 80031a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	        	uint8_t fuelType = 5;
 80031ac:	2305      	movs	r3, #5
 80031ae:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	        	int32_t oilTemp = 6;
 80031b2:	2306      	movs	r3, #6
 80031b4:	673b      	str	r3, [r7, #112]	; 0x70
	        	uint32_t relativePedalPos = 7;
 80031b6:	2307      	movs	r3, #7
 80031b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	        	uint32_t throttle = 8;
 80031ba:	2308      	movs	r3, #8
 80031bc:	66bb      	str	r3, [r7, #104]	; 0x68
	        	uint32_t relativeThrottle = 9;
 80031be:	2309      	movs	r3, #9
 80031c0:	667b      	str	r3, [r7, #100]	; 0x64
	        	int32_t intakeAirTemp = 10;
 80031c2:	230a      	movs	r3, #10
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
	        	uint32_t fuelLevel = 11;
 80031c6:	230b      	movs	r3, #11
 80031c8:	65fb      	str	r3, [r7, #92]	; 0x5c
	        	float mafRate = 12; // uint32_t
 80031ca:	4b7f      	ldr	r3, [pc, #508]	; (80033c8 <main+0x518>)
 80031cc:	65bb      	str	r3, [r7, #88]	; 0x58
	        	uint8_t obdStandards = 13;
 80031ce:	230d      	movs	r3, #13
 80031d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	        	uint16_t distTravelWithMIL = 14;
 80031d4:	230e      	movs	r3, #14
 80031d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	        	uint16_t distSinceCodesCleared = 15;
 80031da:	230f      	movs	r3, #15
 80031dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	        	uint32_t ctrlModVoltage = 16;
 80031e0:	2310      	movs	r3, #16
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	        	int16_t ambientAirTemp = 17;
 80031e4:	2311      	movs	r3, #17
 80031e6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	        	uint32_t manifoldPressure = 18;
 80031ea:	2312      	movs	r3, #18
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
	        	int32_t engineCoolantTemp = 19;
 80031ee:	2313      	movs	r3, #19
 80031f0:	643b      	str	r3, [r7, #64]	; 0x40
	        	float commandedThrottleActuator = 20;
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <main+0x51c>)
 80031f4:	63fb      	str	r3, [r7, #60]	; 0x3c
	        	static float averagedrivingScore = 10.0;



	           // MQTT Subscribe
	       if(setMqttSubscribeTopic_BG96(aws_iot_sub_topic, 1, MQTT_QOS1) == RET_OK) {
 80031f6:	2201      	movs	r2, #1
 80031f8:	2101      	movs	r1, #1
 80031fa:	4875      	ldr	r0, [pc, #468]	; (80033d0 <main+0x520>)
 80031fc:	f7ff f916 	bl	800242c <_Z26setMqttSubscribeTopic_BG96Pcii>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d006      	beq.n	800321e <main+0x36e>
	     MYPRINTF("[MQTT] Topic subscribed: \"%s\"\r\n", aws_iot_sub_topic);
 8003210:	486a      	ldr	r0, [pc, #424]	; (80033bc <main+0x50c>)
 8003212:	f005 fb1d 	bl	8008850 <iprintf>
 8003216:	496e      	ldr	r1, [pc, #440]	; (80033d0 <main+0x520>)
 8003218:	486e      	ldr	r0, [pc, #440]	; (80033d4 <main+0x524>)
 800321a:	f005 fb19 	bl	8008850 <iprintf>
	       }

	           // MQTT Publish
	       mqtt_len = sprintf(buf_mqtt_send, "{\"state\":{\"reported\":{\"name\":\"%s\",\"enabled\":\"%s\",\"geo\":{\"latitude\":\"%s\",\"longitude\":\"%s\"}}}}", AWS_IOT_MY_THING_NAME, car_state , last_latBuf, last_lonBuf);
 800321e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003222:	4a6d      	ldr	r2, [pc, #436]	; (80033d8 <main+0x528>)
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	4a6d      	ldr	r2, [pc, #436]	; (80033dc <main+0x52c>)
 8003228:	9200      	str	r2, [sp, #0]
 800322a:	4a6d      	ldr	r2, [pc, #436]	; (80033e0 <main+0x530>)
 800322c:	496d      	ldr	r1, [pc, #436]	; (80033e4 <main+0x534>)
 800322e:	486e      	ldr	r0, [pc, #440]	; (80033e8 <main+0x538>)
 8003230:	f005 fbf6 	bl	8008a20 <siprintf>
 8003234:	4603      	mov	r3, r0
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <main+0x53c>)
 8003238:	6013      	str	r3, [r2, #0]
	       if(sendMqttPublishMessage_BG96(aws_iot_pub_topic, MQTT_QOS1, MQTT_RETAIN, buf_mqtt_send, mqtt_len) == RET_OK) {
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <main+0x53c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <main+0x538>)
 8003242:	2200      	movs	r2, #0
 8003244:	2101      	movs	r1, #1
 8003246:	486a      	ldr	r0, [pc, #424]	; (80033f0 <main+0x540>)
 8003248:	f7ff f836 	bl	80022b8 <_Z27sendMqttPublishMessage_BG96PciiS_i>
 800324c:	4603      	mov	r3, r0
 800324e:	2b01      	cmp	r3, #1
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <main+0x3bc>
	     MYPRINTF("[MQTT] Message published: \"%s\", Message: %s\r\n", aws_iot_pub_topic, buf_mqtt_send);
 800325c:	4857      	ldr	r0, [pc, #348]	; (80033bc <main+0x50c>)
 800325e:	f005 faf7 	bl	8008850 <iprintf>
 8003262:	4a61      	ldr	r2, [pc, #388]	; (80033e8 <main+0x538>)
 8003264:	4962      	ldr	r1, [pc, #392]	; (80033f0 <main+0x540>)
 8003266:	4863      	ldr	r0, [pc, #396]	; (80033f4 <main+0x544>)
 8003268:	f005 faf2 	bl	8008850 <iprintf>
	       }

	        delay(1);
 800326c:	2001      	movs	r0, #1
 800326e:	f000 fde1 	bl	8003e34 <HAL_Delay>

	       mqtt_len2 = sprintf(buf_mqtt_send2, "{\"efficiencyScore\": %f,\"safetyScore\": %f,\"drivingScore\": %f,\"averagedrivingScore\": %f,\"rpm\": %u,\"kph\": %u,\"engineLoad\": %u,\"runTime\": %u,\"fuelType\": %d,\"oilTemp\": %d,\"relativePedalPos\": %u,\"throttle\": %u,\"relativeThrottle\": %u,\"intakeAirTemp\": %d,\"fuelLevel\": %u,\"mafRate\": %f,\"obdStandards\": %u,\"distTravelWithMIL\": %u,\"distSinceCodesCleared\": %u,\"ctrlModVoltage\": %d,\"ambientAirTemp\": %d,\"manifoldPressure\": %d,\"engineCoolantTemp\": %d,\"commandedThrottleActuator\": %f,\"timestamp\": %s}", efficiencyScore, safetyScore, drivingScore, averagedrivingScore, rpm, kph, engineLoad, runTime, fuelType, oilTemp, relativePedalPos, throttle, relativeThrottle, intakeAirTemp, fuelLevel, mafRate, obdStandards, distTravelWithMIL, distSinceCodesCleared, ctrlModVoltage, ambientAirTemp, manifoldPressure, engineCoolantTemp, commandedThrottleActuator, timestampBuf);
 8003272:	4b61      	ldr	r3, [pc, #388]	; (80033f8 <main+0x548>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f96e 	bl	8000558 <__aeabi_f2d>
 800327c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003280:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <main+0x54c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f967 	bl	8000558 <__aeabi_f2d>
 800328a:	4680      	mov	r8, r0
 800328c:	4689      	mov	r9, r1
 800328e:	4b5c      	ldr	r3, [pc, #368]	; (8003400 <main+0x550>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f960 	bl	8000558 <__aeabi_f2d>
 8003298:	4682      	mov	sl, r0
 800329a:	468b      	mov	fp, r1
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <main+0x554>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f959 	bl	8000558 <__aeabi_f2d>
 80032a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80032aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	f897 1075 	ldrb.w	r1, [r7, #117]	; 0x75
 80032b4:	6139      	str	r1, [r7, #16]
 80032b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80032b8:	f7fd f94e 	bl	8000558 <__aeabi_f2d>
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	f897 6057 	ldrb.w	r6, [r7, #87]	; 0x57
 80032c4:	60fe      	str	r6, [r7, #12]
 80032c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80032ca:	60ba      	str	r2, [r7, #8]
 80032cc:	f8b7 c052 	ldrh.w	ip, [r7, #82]	; 0x52
 80032d0:	4663      	mov	r3, ip
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	f9b7 604a 	ldrsh.w	r6, [r7, #74]	; 0x4a
 80032d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032da:	f7fd f93d 	bl	8000558 <__aeabi_f2d>
 80032de:	4b4a      	ldr	r3, [pc, #296]	; (8003408 <main+0x558>)
 80032e0:	931e      	str	r3, [sp, #120]	; 0x78
 80032e2:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80032e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e8:	931a      	str	r3, [sp, #104]	; 0x68
 80032ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ec:	9319      	str	r3, [sp, #100]	; 0x64
 80032ee:	9618      	str	r6, [sp, #96]	; 0x60
 80032f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	9316      	str	r3, [sp, #88]	; 0x58
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	9215      	str	r2, [sp, #84]	; 0x54
 80032fc:	68fe      	ldr	r6, [r7, #12]
 80032fe:	9614      	str	r6, [sp, #80]	; 0x50
 8003300:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8003304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003306:	9310      	str	r3, [sp, #64]	; 0x40
 8003308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800330a:	930f      	str	r3, [sp, #60]	; 0x3c
 800330c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800330e:	930e      	str	r3, [sp, #56]	; 0x38
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	930d      	str	r3, [sp, #52]	; 0x34
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	930c      	str	r3, [sp, #48]	; 0x30
 8003318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800331a:	930b      	str	r3, [sp, #44]	; 0x2c
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	910a      	str	r1, [sp, #40]	; 0x28
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	9308      	str	r3, [sp, #32]
 8003328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800332a:	9307      	str	r3, [sp, #28]
 800332c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003330:	9306      	str	r3, [sp, #24]
 8003332:	ed97 7b06 	vldr	d7, [r7, #24]
 8003336:	ed8d 7b04 	vstr	d7, [sp, #16]
 800333a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800333e:	e9cd 8900 	strd	r8, r9, [sp]
 8003342:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003346:	4931      	ldr	r1, [pc, #196]	; (800340c <main+0x55c>)
 8003348:	4831      	ldr	r0, [pc, #196]	; (8003410 <main+0x560>)
 800334a:	f005 fb69 	bl	8008a20 <siprintf>
 800334e:	4603      	mov	r3, r0
 8003350:	4a30      	ldr	r2, [pc, #192]	; (8003414 <main+0x564>)
 8003352:	6013      	str	r3, [r2, #0]
	       if(sendMqttPublishMessage_BG96(aws_iot_pub_topic2, MQTT_QOS1, MQTT_RETAIN, buf_mqtt_send2, mqtt_len2) == RET_OK) {
 8003354:	4b2f      	ldr	r3, [pc, #188]	; (8003414 <main+0x564>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <main+0x560>)
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	482d      	ldr	r0, [pc, #180]	; (8003418 <main+0x568>)
 8003362:	f7fe ffa9 	bl	80022b8 <_Z27sendMqttPublishMessage_BG96PciiS_i>
 8003366:	4603      	mov	r3, r0
 8003368:	2b01      	cmp	r3, #1
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d007      	beq.n	8003386 <main+0x4d6>
	     MYPRINTF("[MQTT] Message published: \"%s\", Message: %s\r\n", aws_iot_pub_topic2, buf_mqtt_send2);
 8003376:	4811      	ldr	r0, [pc, #68]	; (80033bc <main+0x50c>)
 8003378:	f005 fa6a 	bl	8008850 <iprintf>
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <main+0x560>)
 800337e:	4926      	ldr	r1, [pc, #152]	; (8003418 <main+0x568>)
 8003380:	481c      	ldr	r0, [pc, #112]	; (80033f4 <main+0x544>)
 8003382:	f005 fa65 	bl	8008850 <iprintf>
	       }

	           // MQTT message received
	       if(checkRecvMqttMessage_BG96(buf_mqtt_topic, &mqtt_msgid, buf_mqtt_recv) == RET_OK) {
 8003386:	4a25      	ldr	r2, [pc, #148]	; (800341c <main+0x56c>)
 8003388:	4925      	ldr	r1, [pc, #148]	; (8003420 <main+0x570>)
 800338a:	4826      	ldr	r0, [pc, #152]	; (8003424 <main+0x574>)
 800338c:	f7ff f8ca 	bl	8002524 <_Z25checkRecvMqttMessage_BG96PcPiS_>
 8003390:	4603      	mov	r3, r0
 8003392:	2b01      	cmp	r3, #1
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d009      	beq.n	80033b4 <main+0x504>
	     MYPRINTF("[MQTT] Message arrived: Topic \"%s\" ID %d, Message %s\r\n", buf_mqtt_topic, mqtt_msgid, buf_mqtt_recv);
 80033a0:	4806      	ldr	r0, [pc, #24]	; (80033bc <main+0x50c>)
 80033a2:	f005 fa55 	bl	8008850 <iprintf>
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <main+0x570>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <main+0x56c>)
 80033ac:	491d      	ldr	r1, [pc, #116]	; (8003424 <main+0x574>)
 80033ae:	481e      	ldr	r0, [pc, #120]	; (8003428 <main+0x578>)
 80033b0:	f005 fa4e 	bl	8008850 <iprintf>
	           }
	       delay(5);
 80033b4:	2005      	movs	r0, #5
 80033b6:	f000 fd3d 	bl	8003e34 <HAL_Delay>
	    }

    /* USER CODE END WHILE */
  }
 80033ba:	e65b      	b.n	8003074 <main+0x1c4>
 80033bc:	0800cde0 	.word	0x0800cde0
 80033c0:	0800d994 	.word	0x0800d994
 80033c4:	0800dc84 	.word	0x0800dc84
 80033c8:	41400000 	.word	0x41400000
 80033cc:	41a00000 	.word	0x41a00000
 80033d0:	20000694 	.word	0x20000694
 80033d4:	0800d9b4 	.word	0x0800d9b4
 80033d8:	20000020 	.word	0x20000020
 80033dc:	20000000 	.word	0x20000000
 80033e0:	0800d69c 	.word	0x0800d69c
 80033e4:	0800d9d4 	.word	0x0800d9d4
 80033e8:	20000d14 	.word	0x20000d14
 80033ec:	20001514 	.word	0x20001514
 80033f0:	20000714 	.word	0x20000714
 80033f4:	0800da34 	.word	0x0800da34
 80033f8:	20000054 	.word	0x20000054
 80033fc:	20000058 	.word	0x20000058
 8003400:	2000005c 	.word	0x2000005c
 8003404:	20000060 	.word	0x20000060
 8003408:	20000040 	.word	0x20000040
 800340c:	0800da64 	.word	0x0800da64
 8003410:	20001114 	.word	0x20001114
 8003414:	20001518 	.word	0x20001518
 8003418:	20000814 	.word	0x20000814
 800341c:	20000914 	.word	0x20000914
 8003420:	2000151c 	.word	0x2000151c
 8003424:	20000894 	.word	0x20000894
 8003428:	0800dc4c 	.word	0x0800dc4c

0800342c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b094      	sub	sp, #80	; 0x50
 8003430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003432:	f107 0320 	add.w	r3, r7, #32
 8003436:	2230      	movs	r2, #48	; 0x30
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fadc 	bl	80079f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <_Z18SystemClock_Configv+0xdc>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <_Z18SystemClock_Configv+0xdc>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	; 0x40
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <_Z18SystemClock_Configv+0xdc>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800346c:	2300      	movs	r3, #0
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	4b26      	ldr	r3, [pc, #152]	; (800350c <_Z18SystemClock_Configv+0xe0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <_Z18SystemClock_Configv+0xe0>)
 8003476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <_Z18SystemClock_Configv+0xe0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003488:	2301      	movs	r3, #1
 800348a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800348c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003492:	2302      	movs	r3, #2
 8003494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003496:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800349c:	2304      	movs	r3, #4
 800349e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80034a0:	2354      	movs	r3, #84	; 0x54
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034a4:	2302      	movs	r3, #2
 80034a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80034a8:	2304      	movs	r3, #4
 80034aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034ac:	f107 0320 	add.w	r3, r7, #32
 80034b0:	4618      	mov	r0, r3
 80034b2:	f001 f969 	bl	8004788 <HAL_RCC_OscConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80034c6:	f000 f823 	bl	8003510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034ca:	230f      	movs	r3, #15
 80034cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034ce:	2302      	movs	r3, #2
 80034d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fbc6 	bl	8004c78 <HAL_RCC_ClockConfig>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf14      	ite	ne
 80034f2:	2301      	movne	r3, #1
 80034f4:	2300      	moveq	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80034fc:	f000 f808 	bl	8003510 <Error_Handler>
  }
}
 8003500:	bf00      	nop
 8003502:	3750      	adds	r7, #80	; 0x50
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003518:	e7fe      	b.n	8003518 <Error_Handler+0x8>
	...

0800351c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af02      	add	r7, sp, #8
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10e      	bne.n	800354a <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003532:	4293      	cmp	r3, r2
 8003534:	d109      	bne.n	800354a <_Z41__static_initialization_and_destruction_0ii+0x2e>
ATCmdParser m_parser = ATCmdParser();
 8003536:	2300      	movs	r3, #0
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800353e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003542:	4909      	ldr	r1, [pc, #36]	; (8003568 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003544:	4809      	ldr	r0, [pc, #36]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003546:	f7fe f9ad 	bl	80018a4 <_ZN11ATCmdParserC1EPKciib>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003556:	4293      	cmp	r3, r2
 8003558:	d102      	bne.n	8003560 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800355a:	4804      	ldr	r0, [pc, #16]	; (800356c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800355c:	f7fe f9d3 	bl	8001906 <_ZN11ATCmdParserD1Ev>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	0800cdd8 	.word	0x0800cdd8
 800356c:	20000670 	.word	0x20000670

08003570 <_GLOBAL__sub_I_m_parser>:
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
 8003574:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003578:	2001      	movs	r0, #1
 800357a:	f7ff ffcf 	bl	800351c <_Z41__static_initialization_and_destruction_0ii>
 800357e:	bd80      	pop	{r7, pc}

08003580 <_GLOBAL__sub_D_m_parser>:
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
 8003584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003588:	2000      	movs	r0, #0
 800358a:	f7ff ffc7 	bl	800351c <_Z41__static_initialization_and_destruction_0ii>
 800358e:	bd80      	pop	{r7, pc}

08003590 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 8003596:	4a15      	ldr	r2, [pc, #84]	; (80035ec <MX_SDIO_SD_Init+0x5c>)
 8003598:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800359a:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 800359c:	2200      	movs	r2, #0
 800359e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80035be:	480a      	ldr	r0, [pc, #40]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035c0:	f001 fd56 	bl	8005070 <HAL_SD_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80035ca:	f7ff ffa1 	bl	8003510 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80035ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035d2:	4805      	ldr	r0, [pc, #20]	; (80035e8 <MX_SDIO_SD_Init+0x58>)
 80035d4:	f001 ff9e 	bl	8005514 <HAL_SD_ConfigWideBusOperation>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80035de:	f7ff ff97 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20001740 	.word	0x20001740
 80035ec:	40012c00 	.word	0x40012c00

080035f0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08c      	sub	sp, #48	; 0x30
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 031c 	add.w	r3, r7, #28
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_SD_MspInit+0x100>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d169      	bne.n	80036e6 <HAL_SD_MspInit+0xf6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <HAL_SD_MspInit+0x104>)
 800361c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003620:	6453      	str	r3, [r2, #68]	; 0x44
 8003622:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	; 0x30
 800363e:	4b2d      	ldr	r3, [pc, #180]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <HAL_SD_MspInit+0x104>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_SD_MspInit+0x104>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	4a21      	ldr	r2, [pc, #132]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6313      	str	r3, [r2, #48]	; 0x30
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <HAL_SD_MspInit+0x104>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003682:	2340      	movs	r3, #64	; 0x40
 8003684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800368e:	2303      	movs	r3, #3
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003692:	230c      	movs	r3, #12
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003696:	f107 031c 	add.w	r3, r7, #28
 800369a:	4619      	mov	r1, r3
 800369c:	4816      	ldr	r0, [pc, #88]	; (80036f8 <HAL_SD_MspInit+0x108>)
 800369e:	f000 fd91 	bl	80041c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b0:	2303      	movs	r3, #3
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036b4:	230c      	movs	r3, #12
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	f107 031c 	add.w	r3, r7, #28
 80036bc:	4619      	mov	r1, r3
 80036be:	480f      	ldr	r0, [pc, #60]	; (80036fc <HAL_SD_MspInit+0x10c>)
 80036c0:	f000 fd80 	bl	80041c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80036c4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d2:	2303      	movs	r3, #3
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036d6:	230c      	movs	r3, #12
 80036d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036da:	f107 031c 	add.w	r3, r7, #28
 80036de:	4619      	mov	r1, r3
 80036e0:	4807      	ldr	r0, [pc, #28]	; (8003700 <HAL_SD_MspInit+0x110>)
 80036e2:	f000 fd6f 	bl	80041c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80036e6:	bf00      	nop
 80036e8:	3730      	adds	r7, #48	; 0x30
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40020000 	.word	0x40020000
 80036fc:	40020400 	.word	0x40020400
 8003700:	40020800 	.word	0x40020800

08003704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_MspInit+0x4c>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_MspInit+0x4c>)
 8003714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_MspInit+0x4c>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <HAL_MspInit+0x4c>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a08      	ldr	r2, [pc, #32]	; (8003750 <HAL_MspInit+0x4c>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_MspInit+0x4c>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003742:	2007      	movs	r0, #7
 8003744:	f000 fc6a 	bl	800401c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40023800 	.word	0x40023800

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <NMI_Handler+0x4>

0800375a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <HardFault_Handler+0x4>

08003760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <MemManage_Handler+0x4>

08003766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800376a:	e7fe      	b.n	800376a <BusFault_Handler+0x4>

0800376c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <UsageFault_Handler+0x4>

08003772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0) timeout--;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <SysTick_Handler+0x24>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <SysTick_Handler+0x1c>
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <SysTick_Handler+0x24>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <SysTick_Handler+0x24>)
 80037b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b8:	f000 fb1c 	bl	8003df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200016e8 	.word	0x200016e8

080037c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 80037c8:	4802      	ldr	r0, [pc, #8]	; (80037d4 <USART1_IRQHandler+0x10>)
 80037ca:	f7fd fcf7 	bl	80011bc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20001684 	.word	0x20001684

080037d8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <USART6_IRQHandler+0x10>)
 80037de:	f002 fd75 	bl	80062cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2000180c 	.word	0x2000180c

080037ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
	return 1;
 80037f0:	2301      	movs	r3, #1
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <_kill>:

int _kill(int pid, int sig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003806:	f004 f8af 	bl	8007968 <__errno>
 800380a:	4603      	mov	r3, r0
 800380c:	2216      	movs	r2, #22
 800380e:	601a      	str	r2, [r3, #0]
	return -1;
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_exit>:

void _exit (int status)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffe7 	bl	80037fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800382e:	e7fe      	b.n	800382e <_exit+0x12>

08003830 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e00a      	b.n	8003858 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003842:	f3af 8000 	nop.w
 8003846:	4601      	mov	r1, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	60ba      	str	r2, [r7, #8]
 800384e:	b2ca      	uxtb	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	3301      	adds	r3, #1
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	dbf0      	blt.n	8003842 <_read+0x12>
	}

return len;
 8003860:	687b      	ldr	r3, [r7, #4]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	e009      	b.n	8003890 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	60ba      	str	r2, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fbb9 	bl	8000ffc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3301      	adds	r3, #1
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	dbf1      	blt.n	800387c <_write+0x12>
	}
	return len;
 8003898:	687b      	ldr	r3, [r7, #4]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <_close>:

int _close(int file)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
	return -1;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ca:	605a      	str	r2, [r3, #4]
	return 0;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <_isatty>:

int _isatty(int file)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
	return 1;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
	return 0;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003914:	4a14      	ldr	r2, [pc, #80]	; (8003968 <_sbrk+0x5c>)
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <_sbrk+0x60>)
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <_sbrk+0x64>)
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <_sbrk+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	429a      	cmp	r2, r3
 800393a:	d207      	bcs.n	800394c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800393c:	f004 f814 	bl	8007968 <__errno>
 8003940:	4603      	mov	r3, r0
 8003942:	220c      	movs	r2, #12
 8003944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	e009      	b.n	8003960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800394c:	4b08      	ldr	r3, [pc, #32]	; (8003970 <_sbrk+0x64>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <_sbrk+0x64>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	4a05      	ldr	r2, [pc, #20]	; (8003970 <_sbrk+0x64>)
 800395c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20020000 	.word	0x20020000
 800396c:	00000400 	.word	0x00000400
 8003970:	200016d0 	.word	0x200016d0
 8003974:	20001868 	.word	0x20001868

08003978 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <SystemInit+0x20>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <SystemInit+0x20>)
 8003984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b0:	463b      	mov	r3, r7
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <MX_TIM3_Init+0x98>)
 80039bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039da:	2200      	movs	r2, #0
 80039dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039de:	4814      	ldr	r0, [pc, #80]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039e0:	f002 f8f5 	bl	8005bce <HAL_TIM_Base_Init>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80039ea:	f7ff fd91 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039f4:	f107 0308 	add.w	r3, r7, #8
 80039f8:	4619      	mov	r1, r3
 80039fa:	480d      	ldr	r0, [pc, #52]	; (8003a30 <MX_TIM3_Init+0x94>)
 80039fc:	f002 f936 	bl	8005c6c <HAL_TIM_ConfigClockSource>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003a06:	f7ff fd83 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a12:	463b      	mov	r3, r7
 8003a14:	4619      	mov	r1, r3
 8003a16:	4806      	ldr	r0, [pc, #24]	; (8003a30 <MX_TIM3_Init+0x94>)
 8003a18:	f002 fb0a 	bl	8006030 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003a22:	f7ff fd75 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200017c4 	.word	0x200017c4
 8003a34:	40000400 	.word	0x40000400

08003a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a0b      	ldr	r2, [pc, #44]	; (8003a74 <HAL_TIM_Base_MspInit+0x3c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10d      	bne.n	8003a66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_TIM_Base_MspInit+0x40>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a09      	ldr	r2, [pc, #36]	; (8003a78 <HAL_TIM_Base_MspInit+0x40>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_TIM_Base_MspInit+0x40>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40023800 	.word	0x40023800

08003a7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <MX_USART1_UART_Init+0x50>)
 8003a84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003aa2:	220c      	movs	r2, #12
 8003aa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_USART1_UART_Init+0x4c>)
 8003ab4:	f002 fb2a 	bl	800610c <HAL_UART_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003abe:	f7ff fd27 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20001684 	.word	0x20001684
 8003acc:	40011000 	.word	0x40011000

08003ad0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <MX_USART2_UART_Init+0x50>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_USART2_UART_Init+0x4c>)
 8003b08:	f002 fb00 	bl	800610c <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b12:	f7ff fcfd 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20001640 	.word	0x20001640
 8003b20:	40004400 	.word	0x40004400

08003b24 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <MX_USART6_UART_Init+0x50>)
 8003b2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b4a:	220c      	movs	r2, #12
 8003b4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b54:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b5a:	4805      	ldr	r0, [pc, #20]	; (8003b70 <MX_USART6_UART_Init+0x4c>)
 8003b5c:	f002 fad6 	bl	800610c <HAL_UART_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b66:	f7ff fcd3 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000180c 	.word	0x2000180c
 8003b74:	40011400 	.word	0x40011400

08003b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a53      	ldr	r2, [pc, #332]	; (8003ce4 <HAL_UART_MspInit+0x16c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d135      	bne.n	8003c06 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	623b      	str	r3, [r7, #32]
 8003b9e:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003ba4:	f043 0310 	orr.w	r3, r3, #16
 8003ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8003baa:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	4b4b      	ldr	r3, [pc, #300]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	4a4a      	ldr	r2, [pc, #296]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc6:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003be4:	2307      	movs	r3, #7
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bec:	4619      	mov	r1, r3
 8003bee:	483f      	ldr	r0, [pc, #252]	; (8003cec <HAL_UART_MspInit+0x174>)
 8003bf0:	f000 fae8 	bl	80041c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	2025      	movs	r0, #37	; 0x25
 8003bfa:	f000 fa1a 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003bfe:	2025      	movs	r0, #37	; 0x25
 8003c00:	f000 fa33 	bl	800406a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003c04:	e06a      	b.n	8003cdc <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a39      	ldr	r2, [pc, #228]	; (8003cf0 <HAL_UART_MspInit+0x178>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d12c      	bne.n	8003c6a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	4a33      	ldr	r2, [pc, #204]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c48:	230c      	movs	r3, #12
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c54:	2303      	movs	r3, #3
 8003c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c58:	2307      	movs	r3, #7
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c60:	4619      	mov	r1, r3
 8003c62:	4822      	ldr	r0, [pc, #136]	; (8003cec <HAL_UART_MspInit+0x174>)
 8003c64:	f000 faae 	bl	80041c4 <HAL_GPIO_Init>
}
 8003c68:	e038      	b.n	8003cdc <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a21      	ldr	r2, [pc, #132]	; (8003cf4 <HAL_UART_MspInit+0x17c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d133      	bne.n	8003cdc <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003c74:	2300      	movs	r3, #0
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	4b1b      	ldr	r3, [pc, #108]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c7e:	f043 0320 	orr.w	r3, r3, #32
 8003c82:	6453      	str	r3, [r2, #68]	; 0x44
 8003c84:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	4a13      	ldr	r2, [pc, #76]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <HAL_UART_MspInit+0x170>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cac:	23c0      	movs	r3, #192	; 0xc0
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	480c      	ldr	r0, [pc, #48]	; (8003cf8 <HAL_UART_MspInit+0x180>)
 8003cc8:	f000 fa7c 	bl	80041c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2100      	movs	r1, #0
 8003cd0:	2047      	movs	r0, #71	; 0x47
 8003cd2:	f000 f9ae 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003cd6:	2047      	movs	r0, #71	; 0x47
 8003cd8:	f000 f9c7 	bl	800406a <HAL_NVIC_EnableIRQ>
}
 8003cdc:	bf00      	nop
 8003cde:	3738      	adds	r7, #56	; 0x38
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40011000 	.word	0x40011000
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40004400 	.word	0x40004400
 8003cf4:	40011400 	.word	0x40011400
 8003cf8:	40020800 	.word	0x40020800

08003cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d00:	480d      	ldr	r0, [pc, #52]	; (8003d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003d02:	490e      	ldr	r1, [pc, #56]	; (8003d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d08:	e002      	b.n	8003d10 <LoopCopyDataInit>

08003d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0e:	3304      	adds	r3, #4

08003d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d14:	d3f9      	bcc.n	8003d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d16:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d18:	4c0b      	ldr	r4, [pc, #44]	; (8003d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d1c:	e001      	b.n	8003d22 <LoopFillZerobss>

08003d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d20:	3204      	adds	r2, #4

08003d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d24:	d3fb      	bcc.n	8003d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d26:	f7ff fe27 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d2a:	f003 fe23 	bl	8007974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d2e:	f7ff f8bf 	bl	8002eb0 <main>
  bx  lr    
 8003d32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d3c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8003d40:	0800f19c 	.word	0x0800f19c
  ldr r2, =_sbss
 8003d44:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8003d48:	20001864 	.word	0x20001864

08003d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d4c:	e7fe      	b.n	8003d4c <ADC_IRQHandler>
	...

08003d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <HAL_Init+0x40>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_Init+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <HAL_Init+0x40>)
 8003d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_Init+0x40>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_Init+0x40>)
 8003d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d78:	2003      	movs	r0, #3
 8003d7a:	f000 f94f 	bl	800401c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f000 f808 	bl	8003d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d84:	f7ff fcbe 	bl	8003704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00

08003d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d9c:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_InitTick+0x54>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_InitTick+0x58>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 f967 	bl	8004086 <HAL_SYSTICK_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00e      	b.n	8003de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d80a      	bhi.n	8003dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f000 f92f 	bl	8004032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dd4:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <HAL_InitTick+0x5c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000064 	.word	0x20000064
 8003dec:	2000006c 	.word	0x2000006c
 8003df0:	20000068 	.word	0x20000068

08003df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_IncTick+0x20>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <HAL_IncTick+0x24>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4413      	add	r3, r2
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_IncTick+0x24>)
 8003e06:	6013      	str	r3, [r2, #0]
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	2000006c 	.word	0x2000006c
 8003e18:	20001850 	.word	0x20001850

08003e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_GetTick+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20001850 	.word	0x20001850

08003e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e3c:	f7ff ffee 	bl	8003e1c <HAL_GetTick>
 8003e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d005      	beq.n	8003e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <HAL_Delay+0x44>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e5a:	bf00      	nop
 8003e5c:	f7ff ffde 	bl	8003e1c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d8f7      	bhi.n	8003e5c <HAL_Delay+0x28>
  {
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	2000006c 	.word	0x2000006c

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	; (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	; (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	; 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	; 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe8:	d301      	bcc.n	8003fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00f      	b.n	800400e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fee:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <SysTick_Config+0x40>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	f7ff ff8e 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <SysTick_Config+0x40>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <SysTick_Config+0x40>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e010 	.word	0xe000e010

0800401c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff29 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004044:	f7ff ff3e 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff8e 	bl	8003f70 <NVIC_EncodePriority>
 8004054:	4602      	mov	r2, r0
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff5d 	bl	8003f1c <__NVIC_SetPriority>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff31 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa2 	bl	8003fd8 <SysTick_Config>
 8004094:	4603      	mov	r3, r0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff feb6 	bl	8003e1c <HAL_GetTick>
 80040b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d008      	beq.n	80040d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e052      	b.n	8004176 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0216 	bic.w	r2, r2, #22
 80040de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695a      	ldr	r2, [r3, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <HAL_DMA_Abort+0x62>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0208 	bic.w	r2, r2, #8
 800410e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004120:	e013      	b.n	800414a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004122:	f7ff fe7b 	bl	8003e1c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b05      	cmp	r3, #5
 800412e:	d90c      	bls.n	800414a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2203      	movs	r2, #3
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e015      	b.n	8004176 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e4      	bne.n	8004122 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	223f      	movs	r2, #63	; 0x3f
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e00c      	b.n	80041b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2205      	movs	r2, #5
 80041a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e159      	b.n	8004494 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041e0:	2201      	movs	r2, #1
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4013      	ands	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	f040 8148 	bne.w	800448e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d005      	beq.n	8004216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004212:	2b02      	cmp	r3, #2
 8004214:	d130      	bne.n	8004278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800424c:	2201      	movs	r2, #1
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 0201 	and.w	r2, r3, #1
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b03      	cmp	r3, #3
 8004282:	d017      	beq.n	80042b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	2203      	movs	r2, #3
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	43db      	mvns	r3, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d123      	bne.n	8004308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	220f      	movs	r2, #15
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	08da      	lsrs	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3208      	adds	r2, #8
 8004302:	69b9      	ldr	r1, [r7, #24]
 8004304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2203      	movs	r2, #3
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4013      	ands	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 0203 	and.w	r2, r3, #3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80a2 	beq.w	800448e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	4b57      	ldr	r3, [pc, #348]	; (80044ac <HAL_GPIO_Init+0x2e8>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a56      	ldr	r2, [pc, #344]	; (80044ac <HAL_GPIO_Init+0x2e8>)
 8004354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b54      	ldr	r3, [pc, #336]	; (80044ac <HAL_GPIO_Init+0x2e8>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004366:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_GPIO_Init+0x2ec>)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	3302      	adds	r3, #2
 800436e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a49      	ldr	r2, [pc, #292]	; (80044b4 <HAL_GPIO_Init+0x2f0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d019      	beq.n	80043c6 <HAL_GPIO_Init+0x202>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a48      	ldr	r2, [pc, #288]	; (80044b8 <HAL_GPIO_Init+0x2f4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d013      	beq.n	80043c2 <HAL_GPIO_Init+0x1fe>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a47      	ldr	r2, [pc, #284]	; (80044bc <HAL_GPIO_Init+0x2f8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00d      	beq.n	80043be <HAL_GPIO_Init+0x1fa>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a46      	ldr	r2, [pc, #280]	; (80044c0 <HAL_GPIO_Init+0x2fc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <HAL_GPIO_Init+0x1f6>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a45      	ldr	r2, [pc, #276]	; (80044c4 <HAL_GPIO_Init+0x300>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <HAL_GPIO_Init+0x1f2>
 80043b2:	2304      	movs	r3, #4
 80043b4:	e008      	b.n	80043c8 <HAL_GPIO_Init+0x204>
 80043b6:	2307      	movs	r3, #7
 80043b8:	e006      	b.n	80043c8 <HAL_GPIO_Init+0x204>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e004      	b.n	80043c8 <HAL_GPIO_Init+0x204>
 80043be:	2302      	movs	r3, #2
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_Init+0x204>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_Init+0x204>
 80043c6:	2300      	movs	r3, #0
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	f002 0203 	and.w	r2, r2, #3
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4093      	lsls	r3, r2
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d8:	4935      	ldr	r1, [pc, #212]	; (80044b0 <HAL_GPIO_Init+0x2ec>)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <HAL_GPIO_Init+0x304>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800440a:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <HAL_GPIO_Init+0x304>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_GPIO_Init+0x304>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004434:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <HAL_GPIO_Init+0x304>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443a:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_GPIO_Init+0x304>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445e:	4a1a      	ldr	r2, [pc, #104]	; (80044c8 <HAL_GPIO_Init+0x304>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004464:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <HAL_GPIO_Init+0x304>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <HAL_GPIO_Init+0x304>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	f67f aea2 	bls.w	80041e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40020000 	.word	0x40020000
 80044b8:	40020400 	.word	0x40020400
 80044bc:	40020800 	.word	0x40020800
 80044c0:	40020c00 	.word	0x40020c00
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40013c00 	.word	0x40013c00

080044cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	807b      	strh	r3, [r7, #2]
 80044d8:	4613      	mov	r3, r2
 80044da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044dc:	787b      	ldrb	r3, [r7, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044e2:	887a      	ldrh	r2, [r7, #2]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044e8:	e003      	b.n	80044f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e12b      	b.n	800476a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fd f974 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004564:	f000 fd5c 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4a81      	ldr	r2, [pc, #516]	; (8004774 <HAL_I2C_Init+0x274>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d807      	bhi.n	8004584 <HAL_I2C_Init+0x84>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a80      	ldr	r2, [pc, #512]	; (8004778 <HAL_I2C_Init+0x278>)
 8004578:	4293      	cmp	r3, r2
 800457a:	bf94      	ite	ls
 800457c:	2301      	movls	r3, #1
 800457e:	2300      	movhi	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e006      	b.n	8004592 <HAL_I2C_Init+0x92>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a7d      	ldr	r2, [pc, #500]	; (800477c <HAL_I2C_Init+0x27c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	bf94      	ite	ls
 800458c:	2301      	movls	r3, #1
 800458e:	2300      	movhi	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0e7      	b.n	800476a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a78      	ldr	r2, [pc, #480]	; (8004780 <HAL_I2C_Init+0x280>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0c9b      	lsrs	r3, r3, #18
 80045a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <HAL_I2C_Init+0x274>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d802      	bhi.n	80045d4 <HAL_I2C_Init+0xd4>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	e009      	b.n	80045e8 <HAL_I2C_Init+0xe8>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	4a69      	ldr	r2, [pc, #420]	; (8004784 <HAL_I2C_Init+0x284>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	3301      	adds	r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	495c      	ldr	r1, [pc, #368]	; (8004774 <HAL_I2C_Init+0x274>)
 8004604:	428b      	cmp	r3, r1
 8004606:	d819      	bhi.n	800463c <HAL_I2C_Init+0x13c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1e59      	subs	r1, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fbb1 f3f3 	udiv	r3, r1, r3
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	f640 73fc 	movw	r3, #4092	; 0xffc
 800461c:	400b      	ands	r3, r1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_I2C_Init+0x138>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1e59      	subs	r1, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004630:	3301      	adds	r3, #1
 8004632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004636:	e051      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004638:	2304      	movs	r3, #4
 800463a:	e04f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <HAL_I2C_Init+0x168>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e012      	b.n	800468e <HAL_I2C_Init+0x18e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Init+0x196>
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10e      	bne.n	80046bc <HAL_I2C_Init+0x1bc>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1e58      	subs	r0, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1e58      	subs	r0, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	0099      	lsls	r1, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	6809      	ldr	r1, [r1, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800470a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6911      	ldr	r1, [r2, #16]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	430b      	orrs	r3, r1
 800471e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	000186a0 	.word	0x000186a0
 8004778:	001e847f 	.word	0x001e847f
 800477c:	003d08ff 	.word	0x003d08ff
 8004780:	431bde83 	.word	0x431bde83
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e264      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d075      	beq.n	8004892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047a6:	4ba3      	ldr	r3, [pc, #652]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d00c      	beq.n	80047cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047b2:	4ba0      	ldr	r3, [pc, #640]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d112      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047be:	4b9d      	ldr	r3, [pc, #628]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ca:	d10b      	bne.n	80047e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	4b99      	ldr	r3, [pc, #612]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d05b      	beq.n	8004890 <HAL_RCC_OscConfig+0x108>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d157      	bne.n	8004890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e23f      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ec:	d106      	bne.n	80047fc <HAL_RCC_OscConfig+0x74>
 80047ee:	4b91      	ldr	r3, [pc, #580]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a90      	ldr	r2, [pc, #576]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e01d      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x98>
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a8a      	ldr	r2, [pc, #552]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b88      	ldr	r3, [pc, #544]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a87      	ldr	r2, [pc, #540]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0xb0>
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a83      	ldr	r2, [pc, #524]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4b81      	ldr	r3, [pc, #516]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a80      	ldr	r2, [pc, #512]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d013      	beq.n	8004868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7ff faec 	bl	8003e1c <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004848:	f7ff fae8 	bl	8003e1c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b64      	cmp	r3, #100	; 0x64
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e204      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0xc0>
 8004866:	e014      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7ff fad8 	bl	8003e1c <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004870:	f7ff fad4 	bl	8003e1c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1f0      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0xe8>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800489e:	4b65      	ldr	r3, [pc, #404]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048aa:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d11c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d116      	bne.n	80048f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c2:	4b5c      	ldr	r3, [pc, #368]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e1c4      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b56      	ldr	r3, [pc, #344]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4952      	ldr	r1, [pc, #328]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	e03a      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fe:	f7ff fa8d 	bl	8003e1c <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004906:	f7ff fa89 	bl	8003e1c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e1a5      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4940      	ldr	r1, [pc, #256]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	e015      	b.n	8004966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800493a:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <HAL_RCC_OscConfig+0x2b0>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7ff fa6c 	bl	8003e1c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004948:	f7ff fa68 	bl	8003e1c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e184      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b36      	ldr	r3, [pc, #216]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d030      	beq.n	80049d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_OscConfig+0x2b4>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7ff fa4c 	bl	8003e1c <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004988:	f7ff fa48 	bl	8003e1c <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e164      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x200>
 80049a6:	e015      	b.n	80049d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCC_OscConfig+0x2b4>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ae:	f7ff fa35 	bl	8003e1c <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b6:	f7ff fa31 	bl	8003e1c <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e14d      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a0 	beq.w	8004b22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <HAL_RCC_OscConfig+0x2ac>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d121      	bne.n	8004a62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a1e:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <HAL_RCC_OscConfig+0x2b8>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2a:	f7ff f9f7 	bl	8003e1c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a30:	e011      	b.n	8004a56 <HAL_RCC_OscConfig+0x2ce>
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	42470000 	.word	0x42470000
 8004a3c:	42470e80 	.word	0x42470e80
 8004a40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a44:	f7ff f9ea 	bl	8003e1c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e106      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a56:	4b85      	ldr	r3, [pc, #532]	; (8004c6c <HAL_RCC_OscConfig+0x4e4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d106      	bne.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
 8004a6a:	4b81      	ldr	r3, [pc, #516]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a80      	ldr	r2, [pc, #512]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	e01c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x32a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x312>
 8004a80:	4b7b      	ldr	r3, [pc, #492]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	4a7a      	ldr	r2, [pc, #488]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8c:	4b78      	ldr	r3, [pc, #480]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a77      	ldr	r2, [pc, #476]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x32a>
 8004a9a:	4b75      	ldr	r3, [pc, #468]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a74      	ldr	r2, [pc, #464]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	4b72      	ldr	r3, [pc, #456]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a71      	ldr	r2, [pc, #452]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d015      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7ff f9af 	bl	8003e1c <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7ff f9ab 	bl	8003e1c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0c5      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ee      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x33a>
 8004ae4:	e014      	b.n	8004b10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7ff f999 	bl	8003e1c <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7ff f995 	bl	8003e1c <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0af      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1ee      	bne.n	8004aee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a55      	ldr	r2, [pc, #340]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 809b 	beq.w	8004c62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d05c      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d141      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b4c      	ldr	r3, [pc, #304]	; (8004c74 <HAL_RCC_OscConfig+0x4ec>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b46:	f7ff f969 	bl	8003e1c <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7ff f965 	bl	8003e1c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e081      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b60:	4b43      	ldr	r3, [pc, #268]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	019b      	lsls	r3, r3, #6
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	3b01      	subs	r3, #1
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	4937      	ldr	r1, [pc, #220]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b96:	4b37      	ldr	r3, [pc, #220]	; (8004c74 <HAL_RCC_OscConfig+0x4ec>)
 8004b98:	2201      	movs	r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7ff f93e 	bl	8003e1c <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7ff f93a 	bl	8003e1c <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e056      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb6:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x41c>
 8004bc2:	e04e      	b.n	8004c62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_OscConfig+0x4ec>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bca:	f7ff f927 	bl	8003e1c <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7ff f923 	bl	8003e1c <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e03f      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be4:	4b22      	ldr	r3, [pc, #136]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x44a>
 8004bf0:	e037      	b.n	8004c62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e032      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <HAL_RCC_OscConfig+0x4e8>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d028      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d121      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d11a      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d111      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c44:	085b      	lsrs	r3, r3, #1
 8004c46:	3b01      	subs	r3, #1
 8004c48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	40023800 	.word	0x40023800
 8004c74:	42470060 	.word	0x42470060

08004c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0cc      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c8c:	4b68      	ldr	r3, [pc, #416]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d90c      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9a:	4b65      	ldr	r3, [pc, #404]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca2:	4b63      	ldr	r3, [pc, #396]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0b8      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ccc:	4b59      	ldr	r3, [pc, #356]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a52      	ldr	r2, [pc, #328]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	494d      	ldr	r1, [pc, #308]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d044      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d107      	bne.n	8004d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d119      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e07f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d003      	beq.n	8004d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d36:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d109      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e06f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d46:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e067      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d56:	4b37      	ldr	r3, [pc, #220]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f023 0203 	bic.w	r2, r3, #3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	4934      	ldr	r1, [pc, #208]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d68:	f7ff f858 	bl	8003e1c <HAL_GetTick>
 8004d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d70:	f7ff f854 	bl	8003e1c <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e04f      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d86:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 020c 	and.w	r2, r3, #12
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1eb      	bne.n	8004d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d98:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d20c      	bcs.n	8004dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e032      	b.n	8004e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4916      	ldr	r1, [pc, #88]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dfe:	f000 f821 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004e02:	4602      	mov	r2, r0
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	091b      	lsrs	r3, r3, #4
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	490a      	ldr	r1, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1c0>)
 8004e10:	5ccb      	ldrb	r3, [r1, r3]
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1c4>)
 8004e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe ffb8 	bl	8003d94 <HAL_InitTick>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40023c00 	.word	0x40023c00
 8004e34:	40023800 	.word	0x40023800
 8004e38:	0800eca4 	.word	0x0800eca4
 8004e3c:	20000064 	.word	0x20000064
 8004e40:	20000068 	.word	0x20000068

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	2300      	movs	r3, #0
 8004e56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e5c:	4b67      	ldr	r3, [pc, #412]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d00d      	beq.n	8004e84 <HAL_RCC_GetSysClockFreq+0x40>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	f200 80bd 	bhi.w	8004fe8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x34>
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d003      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e76:	e0b7      	b.n	8004fe8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e7a:	60bb      	str	r3, [r7, #8]
       break;
 8004e7c:	e0b7      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e7e:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004e80:	60bb      	str	r3, [r7, #8]
      break;
 8004e82:	e0b4      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e84:	4b5d      	ldr	r3, [pc, #372]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e8e:	4b5b      	ldr	r3, [pc, #364]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04d      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e9a:	4b58      	ldr	r3, [pc, #352]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	ea02 0800 	and.w	r8, r2, r0
 8004eb2:	ea03 0901 	and.w	r9, r3, r1
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	014b      	lsls	r3, r1, #5
 8004ec4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ec8:	0142      	lsls	r2, r0, #5
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	ebb0 0008 	subs.w	r0, r0, r8
 8004ed2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	f04f 0300 	mov.w	r3, #0
 8004ede:	018b      	lsls	r3, r1, #6
 8004ee0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ee4:	0182      	lsls	r2, r0, #6
 8004ee6:	1a12      	subs	r2, r2, r0
 8004ee8:	eb63 0301 	sbc.w	r3, r3, r1
 8004eec:	f04f 0000 	mov.w	r0, #0
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	00d9      	lsls	r1, r3, #3
 8004ef6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004efa:	00d0      	lsls	r0, r2, #3
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	eb12 0208 	adds.w	r2, r2, r8
 8004f04:	eb43 0309 	adc.w	r3, r3, r9
 8004f08:	f04f 0000 	mov.w	r0, #0
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	0259      	lsls	r1, r3, #9
 8004f12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f16:	0250      	lsls	r0, r2, #9
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	f7fb feb6 	bl	8000c98 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4613      	mov	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e04a      	b.n	8004fcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	099b      	lsrs	r3, r3, #6
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f46:	f04f 0100 	mov.w	r1, #0
 8004f4a:	ea02 0400 	and.w	r4, r2, r0
 8004f4e:	ea03 0501 	and.w	r5, r3, r1
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	014b      	lsls	r3, r1, #5
 8004f60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f64:	0142      	lsls	r2, r0, #5
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	1b00      	subs	r0, r0, r4
 8004f6c:	eb61 0105 	sbc.w	r1, r1, r5
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	018b      	lsls	r3, r1, #6
 8004f7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f7e:	0182      	lsls	r2, r0, #6
 8004f80:	1a12      	subs	r2, r2, r0
 8004f82:	eb63 0301 	sbc.w	r3, r3, r1
 8004f86:	f04f 0000 	mov.w	r0, #0
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	00d9      	lsls	r1, r3, #3
 8004f90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f94:	00d0      	lsls	r0, r2, #3
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	1912      	adds	r2, r2, r4
 8004f9c:	eb45 0303 	adc.w	r3, r5, r3
 8004fa0:	f04f 0000 	mov.w	r0, #0
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	0299      	lsls	r1, r3, #10
 8004faa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fae:	0290      	lsls	r0, r2, #10
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	f7fb fe6a 	bl	8000c98 <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4613      	mov	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe4:	60bb      	str	r3, [r7, #8]
      break;
 8004fe6:	e002      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fea:	60bb      	str	r3, [r7, #8]
      break;
 8004fec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fee:	68bb      	ldr	r3, [r7, #8]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
 8005000:	00f42400 	.word	0x00f42400
 8005004:	007a1200 	.word	0x007a1200

08005008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <HAL_RCC_GetHCLKFreq+0x14>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000064 	.word	0x20000064

08005020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005024:	f7ff fff0 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0a9b      	lsrs	r3, r3, #10
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	0800ecb4 	.word	0x0800ecb4

08005048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800504c:	f7ff ffdc 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005050:	4602      	mov	r2, r0
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	0b5b      	lsrs	r3, r3, #13
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	4903      	ldr	r1, [pc, #12]	; (800506c <HAL_RCC_GetPCLK2Freq+0x24>)
 800505e:	5ccb      	ldrb	r3, [r1, r3]
 8005060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005064:	4618      	mov	r0, r3
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40023800 	.word	0x40023800
 800506c:	0800ecb4 	.word	0x0800ecb4

08005070 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e022      	b.n	80050c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d105      	bne.n	800509a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7fe faab 	bl	80035f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2203      	movs	r2, #3
 800509e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f814 	bl	80050d0 <HAL_SD_InitCard>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e00a      	b.n	80050c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80050d0:	b5b0      	push	{r4, r5, r7, lr}
 80050d2:	b08e      	sub	sp, #56	; 0x38
 80050d4:	af04      	add	r7, sp, #16
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80050d8:	2300      	movs	r3, #0
 80050da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80050ec:	2376      	movs	r3, #118	; 0x76
 80050ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681d      	ldr	r5, [r3, #0]
 80050f4:	466c      	mov	r4, sp
 80050f6:	f107 0314 	add.w	r3, r7, #20
 80050fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005108:	4628      	mov	r0, r5
 800510a:	f001 ff67 	bl	8006fdc <SDIO_Init>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e04c      	b.n	80051ba <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005120:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_SD_InitCard+0xf4>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f001 ff8e 	bl	800704c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_SD_InitCard+0xf4>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fb52 	bl	80057e0 <SD_PowerON>
 800513c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e02e      	b.n	80051ba <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa73 	bl	8005648 <SD_InitCard>
 8005162:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e01b      	b.n	80051ba <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fff1 	bl	8007172 <SDMMC_CmdBlockLength>
 8005190:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <HAL_SD_InitCard+0xf8>)
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3728      	adds	r7, #40	; 0x28
 80051be:	46bd      	mov	sp, r7
 80051c0:	bdb0      	pop	{r4, r5, r7, pc}
 80051c2:	bf00      	nop
 80051c4:	422580a0 	.word	0x422580a0
 80051c8:	004005ff 	.word	0x004005ff

080051cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051da:	0f9b      	lsrs	r3, r3, #30
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e6:	0e9b      	lsrs	r3, r3, #26
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f8:	0e1b      	lsrs	r3, r3, #24
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	b2da      	uxtb	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800520a:	0c1b      	lsrs	r3, r3, #16
 800520c:	b2da      	uxtb	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	b2da      	uxtb	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005222:	b2da      	uxtb	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	b29a      	uxth	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	b2da      	uxtb	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524a:	0bdb      	lsrs	r3, r3, #15
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800525c:	0b9b      	lsrs	r3, r3, #14
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526e:	0b5b      	lsrs	r3, r3, #13
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005280:	0b1b      	lsrs	r3, r3, #12
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	b2da      	uxtb	r2, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2200      	movs	r2, #0
 8005292:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005298:	2b00      	cmp	r3, #0
 800529a:	d163      	bne.n	8005364 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052a0:	009a      	lsls	r2, r3, #2
 80052a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052a6:	4013      	ands	r3, r2
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80052ac:	0f92      	lsrs	r2, r2, #30
 80052ae:	431a      	orrs	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b8:	0edb      	lsrs	r3, r3, #27
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ca:	0e1b      	lsrs	r3, r3, #24
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052dc:	0d5b      	lsrs	r3, r3, #21
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ee:	0c9b      	lsrs	r3, r3, #18
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005300:	0bdb      	lsrs	r3, r3, #15
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	b2da      	uxtb	r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	7e1b      	ldrb	r3, [r3, #24]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	3302      	adds	r3, #2
 8005324:	2201      	movs	r2, #1
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800532e:	fb02 f203 	mul.w	r2, r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	7a1b      	ldrb	r3, [r3, #8]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005350:	0a52      	lsrs	r2, r2, #9
 8005352:	fb02 f203 	mul.w	r2, r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005360:	661a      	str	r2, [r3, #96]	; 0x60
 8005362:	e031      	b.n	80053c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	2b01      	cmp	r3, #1
 800536a:	d11d      	bne.n	80053a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	431a      	orrs	r2, r3
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	3301      	adds	r3, #1
 8005388:	029a      	lsls	r2, r3, #10
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	661a      	str	r2, [r3, #96]	; 0x60
 80053a6:	e00f      	b.n	80053c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a58      	ldr	r2, [pc, #352]	; (8005510 <HAL_SD_GetCardCSD+0x344>)
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e09d      	b.n	8005504 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053cc:	0b9b      	lsrs	r3, r3, #14
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053de:	09db      	lsrs	r3, r3, #7
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	0fdb      	lsrs	r3, r3, #31
 8005402:	b2da      	uxtb	r2, r3
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	0f5b      	lsrs	r3, r3, #29
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	b2da      	uxtb	r2, r3
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	0e9b      	lsrs	r3, r3, #26
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	b2da      	uxtb	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	0d9b      	lsrs	r3, r3, #22
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	b2da      	uxtb	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	0d5b      	lsrs	r3, r3, #21
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	b2da      	uxtb	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	0c1b      	lsrs	r3, r3, #16
 8005460:	b2db      	uxtb	r3, r3
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	b2da      	uxtb	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	0bdb      	lsrs	r3, r3, #15
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	b2da      	uxtb	r2, r3
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005486:	0b9b      	lsrs	r3, r3, #14
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	b2da      	uxtb	r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	0b5b      	lsrs	r3, r3, #13
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ae:	0b1b      	lsrs	r3, r3, #12
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	0a9b      	lsrs	r3, r3, #10
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ea:	085b      	lsrs	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	004005ff 	.word	0x004005ff

08005514 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b08e      	sub	sp, #56	; 0x38
 8005518:	af04      	add	r7, sp, #16
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2203      	movs	r2, #3
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	2b03      	cmp	r3, #3
 8005532:	d02e      	beq.n	8005592 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d106      	bne.n	800554a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
 8005548:	e029      	b.n	800559e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d10a      	bne.n	8005568 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9d2 	bl	80058fc <SD_WideBus_Enable>
 8005558:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
 8005566:	e01a      	b.n	800559e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fa0f 	bl	8005992 <SD_WideBus_Disable>
 8005574:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	; 0x38
 8005582:	e00c      	b.n	800559e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005588:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
 8005590:	e005      	b.n	800559e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005596:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a26      	ldr	r2, [pc, #152]	; (8005644 <HAL_SD_ConfigWideBusOperation+0x130>)
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055bc:	e01f      	b.n	80055fe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681d      	ldr	r5, [r3, #0]
 80055e4:	466c      	mov	r4, sp
 80055e6:	f107 0314 	add.w	r3, r7, #20
 80055ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055f8:	4628      	mov	r0, r5
 80055fa:	f001 fcef 	bl	8006fdc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005606:	4618      	mov	r0, r3
 8005608:	f001 fdb3 	bl	8007172 <SDMMC_CmdBlockLength>
 800560c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <HAL_SD_ConfigWideBusOperation+0x130>)
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800563a:	4618      	mov	r0, r3
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bdb0      	pop	{r4, r5, r7, pc}
 8005642:	bf00      	nop
 8005644:	004005ff 	.word	0x004005ff

08005648 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b094      	sub	sp, #80	; 0x50
 800564c:	af04      	add	r7, sp, #16
 800564e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005650:	2301      	movs	r3, #1
 8005652:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fd06 	bl	800706a <SDIO_GetPowerState>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d102      	bne.n	800566a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005664:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005668:	e0b6      	b.n	80057d8 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	2b03      	cmp	r3, #3
 8005670:	d02f      	beq.n	80056d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fe85 	bl	8007386 <SDMMC_CmdSendCID>
 800567c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800567e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <SD_InitCard+0x40>
    {
      return errorstate;
 8005684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005686:	e0a7      	b.n	80057d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2100      	movs	r1, #0
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fd30 	bl	80070f4 <SDIO_GetResponse>
 8005694:	4602      	mov	r2, r0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2104      	movs	r1, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 fd27 	bl	80070f4 <SDIO_GetResponse>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2108      	movs	r1, #8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fd1e 	bl	80070f4 <SDIO_GetResponse>
 80056b8:	4602      	mov	r2, r0
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	210c      	movs	r1, #12
 80056c4:	4618      	mov	r0, r3
 80056c6:	f001 fd15 	bl	80070f4 <SDIO_GetResponse>
 80056ca:	4602      	mov	r2, r0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d00d      	beq.n	80056f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f107 020e 	add.w	r2, r7, #14
 80056e2:	4611      	mov	r1, r2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fe8b 	bl	8007400 <SDMMC_CmdSetRelAdd>
 80056ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <SD_InitCard+0xae>
    {
      return errorstate;
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	e070      	b.n	80057d8 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d036      	beq.n	800576c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	461a      	mov	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	4619      	mov	r1, r3
 8005712:	4610      	mov	r0, r2
 8005714:	f001 fe55 	bl	80073c2 <SDMMC_CmdSendCSD>
 8005718:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005722:	e059      	b.n	80057d8 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2100      	movs	r1, #0
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fce2 	bl	80070f4 <SDIO_GetResponse>
 8005730:	4602      	mov	r2, r0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2104      	movs	r1, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fcd9 	bl	80070f4 <SDIO_GetResponse>
 8005742:	4602      	mov	r2, r0
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2108      	movs	r1, #8
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fcd0 	bl	80070f4 <SDIO_GetResponse>
 8005754:	4602      	mov	r2, r0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	210c      	movs	r1, #12
 8005760:	4618      	mov	r0, r3
 8005762:	f001 fcc7 	bl	80070f4 <SDIO_GetResponse>
 8005766:	4602      	mov	r2, r0
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2104      	movs	r1, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f001 fcbe 	bl	80070f4 <SDIO_GetResponse>
 8005778:	4603      	mov	r3, r0
 800577a:	0d1a      	lsrs	r2, r3, #20
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005780:	f107 0310 	add.w	r3, r7, #16
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fd20 	bl	80051cc <HAL_SD_GetCardCSD>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005796:	e01f      	b.n	80057d8 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6819      	ldr	r1, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	461a      	mov	r2, r3
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	4608      	mov	r0, r1
 80057aa:	f001 fd04 	bl	80071b6 <SDMMC_CmdSelDesel>
 80057ae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <SD_InitCard+0x172>
  {
    return errorstate;
 80057b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b8:	e00e      	b.n	80057d8 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681d      	ldr	r5, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	466c      	mov	r4, sp
 80057c2:	f103 0210 	add.w	r2, r3, #16
 80057c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80057c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057cc:	3304      	adds	r3, #4
 80057ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057d0:	4628      	mov	r0, r5
 80057d2:	f001 fc03 	bl	8006fdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3740      	adds	r7, #64	; 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bdb0      	pop	{r4, r5, r7, pc}

080057e0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fcff 	bl	80071fc <SDMMC_CmdGoIdleState>
 80057fe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	e072      	b.n	80058f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fd12 	bl	8007238 <SDMMC_CmdOperCond>
 8005814:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fce8 	bl	80071fc <SDMMC_CmdGoIdleState>
 800582c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d004      	beq.n	800583e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	e05b      	b.n	80058f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005842:	2b01      	cmp	r3, #1
 8005844:	d137      	bne.n	80058b6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2100      	movs	r1, #0
 800584c:	4618      	mov	r0, r3
 800584e:	f001 fd12 	bl	8007276 <SDMMC_CmdAppCommand>
 8005852:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02d      	beq.n	80058b6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800585a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800585e:	e047      	b.n	80058f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fd05 	bl	8007276 <SDMMC_CmdAppCommand>
 800586c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <SD_PowerON+0x98>
    {
      return errorstate;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	e03b      	b.n	80058f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	491e      	ldr	r1, [pc, #120]	; (80058f8 <SD_PowerON+0x118>)
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fd1b 	bl	80072ba <SDMMC_CmdAppOperCommand>
 8005884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800588c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005890:	e02e      	b.n	80058f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f001 fc2b 	bl	80070f4 <SDIO_GetResponse>
 800589e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	0fdb      	lsrs	r3, r3, #31
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <SD_PowerON+0xcc>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <SD_PowerON+0xce>
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]

    count++;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058bc:	4293      	cmp	r3, r2
 80058be:	d802      	bhi.n	80058c6 <SD_PowerON+0xe6>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0cc      	beq.n	8005860 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d902      	bls.n	80058d6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80058d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d4:	e00c      	b.n	80058f0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	645a      	str	r2, [r3, #68]	; 0x44
 80058e6:	e002      	b.n	80058ee <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	c1100000 	.word	0xc1100000

080058fc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	2300      	movs	r3, #0
 800590a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f001 fbee 	bl	80070f4 <SDIO_GetResponse>
 8005918:	4603      	mov	r3, r0
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005922:	d102      	bne.n	800592a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005928:	e02f      	b.n	800598a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800592a:	f107 030c 	add.w	r3, r7, #12
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f879 	bl	8005a28 <SD_FindSCR>
 8005936:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	e023      	b.n	800598a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01c      	beq.n	8005986 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	041b      	lsls	r3, r3, #16
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f001 fc8c 	bl	8007276 <SDMMC_CmdAppCommand>
 800595e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	e00f      	b.n	800598a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2102      	movs	r1, #2
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fcc5 	bl	8007300 <SDMMC_CmdBusWidth>
 8005976:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	e003      	b.n	800598a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005982:	2300      	movs	r3, #0
 8005984:	e001      	b.n	800598a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005986:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 fba3 	bl	80070f4 <SDIO_GetResponse>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059b8:	d102      	bne.n	80059c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80059ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059be:	e02f      	b.n	8005a20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f82e 	bl	8005a28 <SD_FindSCR>
 80059cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	e023      	b.n	8005a20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01c      	beq.n	8005a1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	4619      	mov	r1, r3
 80059ee:	4610      	mov	r0, r2
 80059f0:	f001 fc41 	bl	8007276 <SDMMC_CmdAppCommand>
 80059f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	e00f      	b.n	8005a20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 fc7a 	bl	8007300 <SDMMC_CmdBusWidth>
 8005a0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	e003      	b.n	8005a20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e001      	b.n	8005a20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005a1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b08f      	sub	sp, #60	; 0x3c
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a32:	f7fe f9f3 	bl	8003e1c <HAL_GetTick>
 8005a36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2108      	movs	r1, #8
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f001 fb8f 	bl	8007172 <SDMMC_CmdBlockLength>
 8005a54:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	e0b2      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f001 fc02 	bl	8007276 <SDMMC_CmdAppCommand>
 8005a72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <SD_FindSCR+0x56>
  {
    return errorstate;
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	e0a3      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005a84:	2308      	movs	r3, #8
 8005a86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005a88:	2330      	movs	r3, #48	; 0x30
 8005a8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f107 0210 	add.w	r2, r7, #16
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fb39 	bl	800711a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fc49 	bl	8007344 <SDMMC_CmdSendSCR>
 8005ab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02a      	beq.n	8005b10 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	e083      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00f      	beq.n	8005aec <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f107 0208 	add.w	r2, r7, #8
 8005ad8:	18d4      	adds	r4, r2, r3
 8005ada:	4608      	mov	r0, r1
 8005adc:	f001 faa9 	bl	8007032 <SDIO_ReadFIFO>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	6023      	str	r3, [r4, #0]
      index++;
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aea:	e006      	b.n	8005afa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d012      	beq.n	8005b20 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005afa:	f7fe f98f 	bl	8003e1c <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b08:	d102      	bne.n	8005b10 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005b0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b0e:	e05a      	b.n	8005bc6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0cf      	beq.n	8005abe <SD_FindSCR+0x96>
 8005b1e:	e000      	b.n	8005b22 <SD_FindSCR+0xfa>
      break;
 8005b20:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2208      	movs	r2, #8
 8005b36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005b38:	2308      	movs	r3, #8
 8005b3a:	e044      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b52:	2302      	movs	r3, #2
 8005b54:	e037      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005b6c:	2320      	movs	r3, #32
 8005b6e:	e02a      	b.n	8005bc6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f240 523a 	movw	r2, #1338	; 0x53a
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	061a      	lsls	r2, r3, #24
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	021b      	lsls	r3, r3, #8
 8005b82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b86:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	0a1b      	lsrs	r3, r3, #8
 8005b8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b90:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	0e1b      	lsrs	r3, r3, #24
 8005b96:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	601a      	str	r2, [r3, #0]
    scr++;
 8005b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	061a      	lsls	r2, r3, #24
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005bb8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	0e1b      	lsrs	r3, r3, #24
 8005bbe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	373c      	adds	r7, #60	; 0x3c
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd90      	pop	{r4, r7, pc}

08005bce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e041      	b.n	8005c64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fd ff1f 	bl	8003a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	f000 f8f5 	bl	8005dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIM_ConfigClockSource+0x1c>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0b4      	b.n	8005df2 <HAL_TIM_ConfigClockSource+0x186>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc0:	d03e      	beq.n	8005d40 <HAL_TIM_ConfigClockSource+0xd4>
 8005cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc6:	f200 8087 	bhi.w	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	f000 8086 	beq.w	8005dde <HAL_TIM_ConfigClockSource+0x172>
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd6:	d87f      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b70      	cmp	r3, #112	; 0x70
 8005cda:	d01a      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0xa6>
 8005cdc:	2b70      	cmp	r3, #112	; 0x70
 8005cde:	d87b      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b60      	cmp	r3, #96	; 0x60
 8005ce2:	d050      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x11a>
 8005ce4:	2b60      	cmp	r3, #96	; 0x60
 8005ce6:	d877      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b50      	cmp	r3, #80	; 0x50
 8005cea:	d03c      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0xfa>
 8005cec:	2b50      	cmp	r3, #80	; 0x50
 8005cee:	d873      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b40      	cmp	r3, #64	; 0x40
 8005cf2:	d058      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x13a>
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d86f      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b30      	cmp	r3, #48	; 0x30
 8005cfa:	d064      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cfc:	2b30      	cmp	r3, #48	; 0x30
 8005cfe:	d86b      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d060      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d867      	bhi.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d05c      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d05a      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	e062      	b.n	8005dd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6899      	ldr	r1, [r3, #8]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f000 f965 	bl	8005ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	609a      	str	r2, [r3, #8]
      break;
 8005d3e:	e04f      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	6899      	ldr	r1, [r3, #8]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f000 f94e 	bl	8005ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d62:	609a      	str	r2, [r3, #8]
      break;
 8005d64:	e03c      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6859      	ldr	r1, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f000 f8c2 	bl	8005efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2150      	movs	r1, #80	; 0x50
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f91b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005d84:	e02c      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 f8e1 	bl	8005f5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2160      	movs	r1, #96	; 0x60
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f90b 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005da4:	e01c      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6859      	ldr	r1, [r3, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f000 f8a2 	bl	8005efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2140      	movs	r1, #64	; 0x40
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f8fb 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005dc4:	e00c      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f000 f8f2 	bl	8005fba <TIM_ITRx_SetConfig>
      break;
 8005dd6:	e003      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e000      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a34      	ldr	r2, [pc, #208]	; (8005ee0 <TIM_Base_SetConfig+0xe4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <TIM_Base_SetConfig+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a30      	ldr	r2, [pc, #192]	; (8005ee8 <TIM_Base_SetConfig+0xec>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x38>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a2f      	ldr	r2, [pc, #188]	; (8005eec <TIM_Base_SetConfig+0xf0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a25      	ldr	r2, [pc, #148]	; (8005ee0 <TIM_Base_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01b      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d017      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a22      	ldr	r2, [pc, #136]	; (8005ee4 <TIM_Base_SetConfig+0xe8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a21      	ldr	r2, [pc, #132]	; (8005ee8 <TIM_Base_SetConfig+0xec>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00f      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a20      	ldr	r2, [pc, #128]	; (8005eec <TIM_Base_SetConfig+0xf0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00b      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <TIM_Base_SetConfig+0xf4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d007      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1e      	ldr	r2, [pc, #120]	; (8005ef4 <TIM_Base_SetConfig+0xf8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <TIM_Base_SetConfig+0xfc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d108      	bne.n	8005e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <TIM_Base_SetConfig+0xe4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	f023 0201 	bic.w	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f023 030a 	bic.w	r3, r3, #10
 8005f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b087      	sub	sp, #28
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f023 0210 	bic.w	r2, r3, #16
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	031b      	lsls	r3, r3, #12
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f043 0307 	orr.w	r3, r3, #7
 8005fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
 8005ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	021a      	lsls	r2, r3, #8
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	431a      	orrs	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4313      	orrs	r3, r2
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	609a      	str	r2, [r3, #8]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006044:	2302      	movs	r3, #2
 8006046:	e050      	b.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1c      	ldr	r2, [pc, #112]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006094:	d013      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a18      	ldr	r2, [pc, #96]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a15      	ldr	r2, [pc, #84]	; (8006104 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a13      	ldr	r2, [pc, #76]	; (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d10c      	bne.n	80060d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800
 8006104:	40000c00 	.word	0x40000c00
 8006108:	40014000 	.word	0x40014000

0800610c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e03f      	b.n	800619e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fd fd20 	bl	8003b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800614e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fd7b 	bl	8006c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695a      	ldr	r2, [r3, #20]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006174:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006184:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08a      	sub	sp, #40	; 0x28
 80061aa:	af02      	add	r7, sp, #8
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	603b      	str	r3, [r7, #0]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d17c      	bne.n	80062c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_Transmit+0x2c>
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e075      	b.n	80062c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x3e>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e06e      	b.n	80062c2 <HAL_UART_Transmit+0x11c>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2221      	movs	r2, #33	; 0x21
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fa:	f7fd fe0f 	bl	8003e1c <HAL_GetTick>
 80061fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006214:	d108      	bne.n	8006228 <HAL_UART_Transmit+0x82>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e003      	b.n	8006230 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800622c:	2300      	movs	r3, #0
 800622e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006238:	e02a      	b.n	8006290 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2200      	movs	r2, #0
 8006242:	2180      	movs	r1, #128	; 0x80
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 faf9 	bl	800683c <UART_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e036      	b.n	80062c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10b      	bne.n	8006272 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006268:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3302      	adds	r3, #2
 800626e:	61bb      	str	r3, [r7, #24]
 8006270:	e007      	b.n	8006282 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	3301      	adds	r3, #1
 8006280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1cf      	bne.n	800623a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2140      	movs	r1, #64	; 0x40
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fac9 	bl	800683c <UART_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e006      	b.n	80062c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3720      	adds	r7, #32
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b0ba      	sub	sp, #232	; 0xe8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800630a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10f      	bne.n	8006332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <HAL_UART_IRQHandler+0x66>
 800631e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006322:	f003 0320 	and.w	r3, r3, #32
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fbd3 	bl	8006ad6 <UART_Receive_IT>
      return;
 8006330:	e256      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80de 	beq.w	80064f8 <HAL_UART_IRQHandler+0x22c>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80d1 	beq.w	80064f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <HAL_UART_IRQHandler+0xae>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0201 	orr.w	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800637a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00b      	beq.n	800639e <HAL_UART_IRQHandler+0xd2>
 8006386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800639e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00b      	beq.n	80063c2 <HAL_UART_IRQHandler+0xf6>
 80063aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d005      	beq.n	80063c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	f043 0204 	orr.w	r2, r3, #4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d011      	beq.n	80063f2 <HAL_UART_IRQHandler+0x126>
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0208 	orr.w	r2, r3, #8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	f000 81ed 	beq.w	80067d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_UART_IRQHandler+0x14e>
 8006408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb5e 	bl	8006ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d103      	bne.n	8006446 <HAL_UART_IRQHandler+0x17a>
 800643e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04f      	beq.n	80064e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa66 	bl	8006918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d141      	bne.n	80064de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3314      	adds	r3, #20
 8006460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3314      	adds	r3, #20
 8006482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006486:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800648a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800649e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1d9      	bne.n	800645a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d013      	beq.n	80064d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	4a7d      	ldr	r2, [pc, #500]	; (80066a8 <HAL_UART_IRQHandler+0x3dc>)
 80064b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fd fe5f 	bl	800417e <HAL_DMA_Abort_IT>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d016      	beq.n	80064f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064d0:	4610      	mov	r0, r2
 80064d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	e00e      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f99a 	bl	8006810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064dc:	e00a      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f996 	bl	8006810 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e006      	b.n	80064f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f992 	bl	8006810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80064f2:	e170      	b.n	80067d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f4:	bf00      	nop
    return;
 80064f6:	e16e      	b.n	80067d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	f040 814a 	bne.w	8006796 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006506:	f003 0310 	and.w	r3, r3, #16
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8143 	beq.w	8006796 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 813c 	beq.w	8006796 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800651e:	2300      	movs	r3, #0
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	60bb      	str	r3, [r7, #8]
 8006532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800653e:	2b40      	cmp	r3, #64	; 0x40
 8006540:	f040 80b4 	bne.w	80066ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8140 	beq.w	80067da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800655e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006562:	429a      	cmp	r2, r3
 8006564:	f080 8139 	bcs.w	80067da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800656e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657a:	f000 8088 	beq.w	800668e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	330c      	adds	r3, #12
 8006584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800659c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1d9      	bne.n	800657e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065dc:	f023 0301 	bic.w	r3, r3, #1
 80065e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e1      	bne.n	80065ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3314      	adds	r3, #20
 800660c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	3314      	adds	r3, #20
 8006626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800662a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800662c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006630:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e3      	bne.n	8006606 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006656:	e853 3f00 	ldrex	r3, [r3]
 800665a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800665c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665e:	f023 0310 	bic.w	r3, r3, #16
 8006662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006670:	65ba      	str	r2, [r7, #88]	; 0x58
 8006672:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006676:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800667e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e3      	bne.n	800664c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	4618      	mov	r0, r3
 800668a:	f7fd fd08 	bl	800409e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006696:	b29b      	uxth	r3, r3
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	b29b      	uxth	r3, r3
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8c0 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066a4:	e099      	b.n	80067da <HAL_UART_IRQHandler+0x50e>
 80066a6:	bf00      	nop
 80066a8:	080069df 	.word	0x080069df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 808b 	beq.w	80067de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80066c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8086 	beq.w	80067de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
 80066d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80066f6:	647a      	str	r2, [r7, #68]	; 0x44
 80066f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3314      	adds	r3, #20
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	e853 3f00 	ldrex	r3, [r3]
 8006718:	623b      	str	r3, [r7, #32]
   return(result);
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3314      	adds	r3, #20
 800672a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800672e:	633a      	str	r2, [r7, #48]	; 0x30
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e3      	bne.n	800670a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330c      	adds	r3, #12
 8006756:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0310 	bic.w	r3, r3, #16
 8006766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	330c      	adds	r3, #12
 8006770:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006774:	61fa      	str	r2, [r7, #28]
 8006776:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	69b9      	ldr	r1, [r7, #24]
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	617b      	str	r3, [r7, #20]
   return(result);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e3      	bne.n	8006750 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f848 	bl	8006824 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006794:	e023      	b.n	80067de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <HAL_UART_IRQHandler+0x4ea>
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f929 	bl	8006a06 <UART_Transmit_IT>
    return;
 80067b4:	e014      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <HAL_UART_IRQHandler+0x514>
 80067c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d008      	beq.n	80067e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f969 	bl	8006aa6 <UART_EndTransmit_IT>
    return;
 80067d4:	e004      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
    return;
 80067d6:	bf00      	nop
 80067d8:	e002      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
      return;
 80067da:	bf00      	nop
 80067dc:	e000      	b.n	80067e0 <HAL_UART_IRQHandler+0x514>
      return;
 80067de:	bf00      	nop
  }
}
 80067e0:	37e8      	adds	r7, #232	; 0xe8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b090      	sub	sp, #64	; 0x40
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4613      	mov	r3, r2
 800684a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684c:	e050      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800684e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d04c      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <UART_WaitOnFlagUntilTimeout+0x30>
 800685c:	f7fd fade 	bl	8003e1c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006868:	429a      	cmp	r2, r3
 800686a:	d241      	bcs.n	80068f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800688c:	637a      	str	r2, [r7, #52]	; 0x34
 800688e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006894:	e841 2300 	strex	r3, r2, [r1]
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1e5      	bne.n	800686c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	613b      	str	r3, [r7, #16]
   return(result);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3314      	adds	r3, #20
 80068be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068c0:	623a      	str	r2, [r7, #32]
 80068c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	6a3a      	ldr	r2, [r7, #32]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e5      	bne.n	80068a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e00f      	b.n	8006910 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	d09f      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3740      	adds	r7, #64	; 0x40
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b095      	sub	sp, #84	; 0x54
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006940:	643a      	str	r2, [r7, #64]	; 0x40
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	61fb      	str	r3, [r7, #28]
   return(result);
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	64bb      	str	r3, [r7, #72]	; 0x48
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3314      	adds	r3, #20
 8006972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800697a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	d119      	bne.n	80069c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b0:	61ba      	str	r2, [r7, #24]
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6979      	ldr	r1, [r7, #20]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	613b      	str	r3, [r7, #16]
   return(result);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80069d2:	bf00      	nop
 80069d4:	3754      	adds	r7, #84	; 0x54
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff ff09 	bl	8006810 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b21      	cmp	r3, #33	; 0x21
 8006a18:	d13e      	bne.n	8006a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	d114      	bne.n	8006a4e <UART_Transmit_IT+0x48>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d110      	bne.n	8006a4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	e008      	b.n	8006a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6211      	str	r1, [r2, #32]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e000      	b.n	8006a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe8e 	bl	80067e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08c      	sub	sp, #48	; 0x30
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b22      	cmp	r3, #34	; 0x22
 8006ae8:	f040 80ab 	bne.w	8006c42 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d117      	bne.n	8006b26 <UART_Receive_IT+0x50>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d113      	bne.n	8006b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28
 8006b24:	e026      	b.n	8006b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b38:	d007      	beq.n	8006b4a <UART_Receive_IT+0x74>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <UART_Receive_IT+0x82>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e008      	b.n	8006b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4619      	mov	r1, r3
 8006b82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d15a      	bne.n	8006c3e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0220 	bic.w	r2, r2, #32
 8006b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d135      	bne.n	8006c34 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	330c      	adds	r3, #12
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	e853 3f00 	ldrex	r3, [r3]
 8006bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 0310 	bic.w	r3, r3, #16
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	330c      	adds	r3, #12
 8006bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bee:	623a      	str	r2, [r7, #32]
 8006bf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf2:	69f9      	ldr	r1, [r7, #28]
 8006bf4:	6a3a      	ldr	r2, [r7, #32]
 8006bf6:	e841 2300 	strex	r3, r2, [r1]
 8006bfa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e5      	bne.n	8006bce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d10a      	bne.n	8006c26 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c10:	2300      	movs	r3, #0
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff fdf9 	bl	8006824 <HAL_UARTEx_RxEventCallback>
 8006c32:	e002      	b.n	8006c3a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fde1 	bl	80067fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e002      	b.n	8006c44 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3730      	adds	r7, #48	; 0x30
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	b09f      	sub	sp, #124	; 0x7c
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c62:	68d9      	ldr	r1, [r3, #12]
 8006c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	ea40 0301 	orr.w	r3, r0, r1
 8006c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	431a      	orrs	r2, r3
 8006c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c90:	f021 010c 	bic.w	r1, r1, #12
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9a:	430b      	orrs	r3, r1
 8006c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	6999      	ldr	r1, [r3, #24]
 8006cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	ea40 0301 	orr.w	r3, r0, r1
 8006cb4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	4bc5      	ldr	r3, [pc, #788]	; (8006fd0 <UART_SetConfig+0x384>)
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d004      	beq.n	8006cca <UART_SetConfig+0x7e>
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	4bc3      	ldr	r3, [pc, #780]	; (8006fd4 <UART_SetConfig+0x388>)
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d103      	bne.n	8006cd2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cca:	f7fe f9bd 	bl	8005048 <HAL_RCC_GetPCLK2Freq>
 8006cce:	6778      	str	r0, [r7, #116]	; 0x74
 8006cd0:	e002      	b.n	8006cd8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cd2:	f7fe f9a5 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8006cd6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce0:	f040 80b6 	bne.w	8006e50 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ce6:	461c      	mov	r4, r3
 8006ce8:	f04f 0500 	mov.w	r5, #0
 8006cec:	4622      	mov	r2, r4
 8006cee:	462b      	mov	r3, r5
 8006cf0:	1891      	adds	r1, r2, r2
 8006cf2:	6439      	str	r1, [r7, #64]	; 0x40
 8006cf4:	415b      	adcs	r3, r3
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8006cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cfc:	1912      	adds	r2, r2, r4
 8006cfe:	eb45 0303 	adc.w	r3, r5, r3
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	00d9      	lsls	r1, r3, #3
 8006d0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d10:	00d0      	lsls	r0, r2, #3
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	1911      	adds	r1, r2, r4
 8006d18:	6639      	str	r1, [r7, #96]	; 0x60
 8006d1a:	416b      	adcs	r3, r5
 8006d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	1891      	adds	r1, r2, r2
 8006d2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d2c:	415b      	adcs	r3, r3
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d34:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d38:	f7f9 ffae 	bl	8000c98 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4ba5      	ldr	r3, [pc, #660]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006d42:	fba3 2302 	umull	r2, r3, r3, r2
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	011e      	lsls	r6, r3, #4
 8006d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4c:	461c      	mov	r4, r3
 8006d4e:	f04f 0500 	mov.w	r5, #0
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	1891      	adds	r1, r2, r2
 8006d58:	6339      	str	r1, [r7, #48]	; 0x30
 8006d5a:	415b      	adcs	r3, r3
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d62:	1912      	adds	r2, r2, r4
 8006d64:	eb45 0303 	adc.w	r3, r5, r3
 8006d68:	f04f 0000 	mov.w	r0, #0
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	00d9      	lsls	r1, r3, #3
 8006d72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d76:	00d0      	lsls	r0, r2, #3
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	1911      	adds	r1, r2, r4
 8006d7e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d80:	416b      	adcs	r3, r5
 8006d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	1891      	adds	r1, r2, r2
 8006d90:	62b9      	str	r1, [r7, #40]	; 0x28
 8006d92:	415b      	adcs	r3, r3
 8006d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006d9e:	f7f9 ff7b 	bl	8000c98 <__aeabi_uldivmod>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	4b8c      	ldr	r3, [pc, #560]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006da8:	fba3 1302 	umull	r1, r3, r3, r2
 8006dac:	095b      	lsrs	r3, r3, #5
 8006dae:	2164      	movs	r1, #100	; 0x64
 8006db0:	fb01 f303 	mul.w	r3, r1, r3
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	3332      	adds	r3, #50	; 0x32
 8006dba:	4a87      	ldr	r2, [pc, #540]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dc8:	441e      	add	r6, r3
 8006dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f04f 0100 	mov.w	r1, #0
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	1894      	adds	r4, r2, r2
 8006dd8:	623c      	str	r4, [r7, #32]
 8006dda:	415b      	adcs	r3, r3
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006de2:	1812      	adds	r2, r2, r0
 8006de4:	eb41 0303 	adc.w	r3, r1, r3
 8006de8:	f04f 0400 	mov.w	r4, #0
 8006dec:	f04f 0500 	mov.w	r5, #0
 8006df0:	00dd      	lsls	r5, r3, #3
 8006df2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006df6:	00d4      	lsls	r4, r2, #3
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	1814      	adds	r4, r2, r0
 8006dfe:	653c      	str	r4, [r7, #80]	; 0x50
 8006e00:	414b      	adcs	r3, r1
 8006e02:	657b      	str	r3, [r7, #84]	; 0x54
 8006e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	61b9      	str	r1, [r7, #24]
 8006e12:	415b      	adcs	r3, r3
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e1e:	f7f9 ff3b 	bl	8000c98 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4b6c      	ldr	r3, [pc, #432]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006e28:	fba3 1302 	umull	r1, r3, r3, r2
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	2164      	movs	r1, #100	; 0x64
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	3332      	adds	r3, #50	; 0x32
 8006e3a:	4a67      	ldr	r2, [pc, #412]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 0207 	and.w	r2, r3, #7
 8006e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4432      	add	r2, r6
 8006e4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e4e:	e0b9      	b.n	8006fc4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e52:	461c      	mov	r4, r3
 8006e54:	f04f 0500 	mov.w	r5, #0
 8006e58:	4622      	mov	r2, r4
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	1891      	adds	r1, r2, r2
 8006e5e:	6139      	str	r1, [r7, #16]
 8006e60:	415b      	adcs	r3, r3
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e68:	1912      	adds	r2, r2, r4
 8006e6a:	eb45 0303 	adc.w	r3, r5, r3
 8006e6e:	f04f 0000 	mov.w	r0, #0
 8006e72:	f04f 0100 	mov.w	r1, #0
 8006e76:	00d9      	lsls	r1, r3, #3
 8006e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e7c:	00d0      	lsls	r0, r2, #3
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	eb12 0804 	adds.w	r8, r2, r4
 8006e86:	eb43 0905 	adc.w	r9, r3, r5
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	f04f 0200 	mov.w	r2, #0
 8006e98:	f04f 0300 	mov.w	r3, #0
 8006e9c:	008b      	lsls	r3, r1, #2
 8006e9e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ea2:	0082      	lsls	r2, r0, #2
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 fef6 	bl	8000c98 <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4b49      	ldr	r3, [pc, #292]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb6:	095b      	lsrs	r3, r3, #5
 8006eb8:	011e      	lsls	r6, r3, #4
 8006eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	1894      	adds	r4, r2, r2
 8006ec8:	60bc      	str	r4, [r7, #8]
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ed2:	1812      	adds	r2, r2, r0
 8006ed4:	eb41 0303 	adc.w	r3, r1, r3
 8006ed8:	f04f 0400 	mov.w	r4, #0
 8006edc:	f04f 0500 	mov.w	r5, #0
 8006ee0:	00dd      	lsls	r5, r3, #3
 8006ee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ee6:	00d4      	lsls	r4, r2, #3
 8006ee8:	4622      	mov	r2, r4
 8006eea:	462b      	mov	r3, r5
 8006eec:	1814      	adds	r4, r2, r0
 8006eee:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ef0:	414b      	adcs	r3, r1
 8006ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f04f 0100 	mov.w	r1, #0
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	008b      	lsls	r3, r1, #2
 8006f08:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f0c:	0082      	lsls	r2, r0, #2
 8006f0e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f12:	f7f9 fec1 	bl	8000c98 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f20:	095b      	lsrs	r3, r3, #5
 8006f22:	2164      	movs	r1, #100	; 0x64
 8006f24:	fb01 f303 	mul.w	r3, r1, r3
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	3332      	adds	r3, #50	; 0x32
 8006f2e:	4a2a      	ldr	r2, [pc, #168]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f30:	fba2 2303 	umull	r2, r3, r2, r3
 8006f34:	095b      	lsrs	r3, r3, #5
 8006f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f3a:	441e      	add	r6, r3
 8006f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f04f 0100 	mov.w	r1, #0
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	1894      	adds	r4, r2, r2
 8006f4a:	603c      	str	r4, [r7, #0]
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	607b      	str	r3, [r7, #4]
 8006f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f54:	1812      	adds	r2, r2, r0
 8006f56:	eb41 0303 	adc.w	r3, r1, r3
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	f04f 0500 	mov.w	r5, #0
 8006f62:	00dd      	lsls	r5, r3, #3
 8006f64:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f68:	00d4      	lsls	r4, r2, #3
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	eb12 0a00 	adds.w	sl, r2, r0
 8006f72:	eb43 0b01 	adc.w	fp, r3, r1
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f04f 0100 	mov.w	r1, #0
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	008b      	lsls	r3, r1, #2
 8006f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f8e:	0082      	lsls	r2, r0, #2
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 fe80 	bl	8000c98 <__aeabi_uldivmod>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4b0e      	ldr	r3, [pc, #56]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006fa2:	095b      	lsrs	r3, r3, #5
 8006fa4:	2164      	movs	r1, #100	; 0x64
 8006fa6:	fb01 f303 	mul.w	r3, r1, r3
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	3332      	adds	r3, #50	; 0x32
 8006fb0:	4a09      	ldr	r2, [pc, #36]	; (8006fd8 <UART_SetConfig+0x38c>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4432      	add	r2, r6
 8006fc2:	609a      	str	r2, [r3, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	377c      	adds	r7, #124	; 0x7c
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fce:	bf00      	nop
 8006fd0:	40011000 	.word	0x40011000
 8006fd4:	40011400 	.word	0x40011400
 8006fd8:	51eb851f 	.word	0x51eb851f

08006fdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006fdc:	b084      	sub	sp, #16
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	f107 001c 	add.w	r0, r7, #28
 8006fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006ff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006ff6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006ffa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006ffe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007002:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007006:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	b004      	add	sp, #16
 8007030:	4770      	bx	lr

08007032 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800705a:	2002      	movs	r0, #2
 800705c:	f7fc feea 	bl	8003e34 <HAL_Delay>
  
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0303 	and.w	r3, r3, #3
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070a4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80070aa:	431a      	orrs	r2, r3
                       Command->CPSM);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80070b0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80070c0:	f023 030f 	bic.w	r3, r3, #15
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3314      	adds	r3, #20
 8007102:	461a      	mov	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	4413      	add	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
}  
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007140:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007146:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800714c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007164:	2300      	movs	r3, #0

}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b088      	sub	sp, #32
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007180:	2310      	movs	r3, #16
 8007182:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007184:	2340      	movs	r3, #64	; 0x40
 8007186:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800718c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007190:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007192:	f107 0308 	add.w	r3, r7, #8
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff74 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800719e:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a2:	2110      	movs	r1, #16
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f979 	bl	800749c <SDMMC_GetCmdResp1>
 80071aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ac:	69fb      	ldr	r3, [r7, #28]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08a      	sub	sp, #40	; 0x28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80071c6:	2307      	movs	r3, #7
 80071c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071ca:	2340      	movs	r3, #64	; 0x40
 80071cc:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d8:	f107 0310 	add.w	r3, r7, #16
 80071dc:	4619      	mov	r1, r3
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff ff51 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80071e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e8:	2107      	movs	r1, #7
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f000 f956 	bl	800749c <SDMMC_GetCmdResp1>
 80071f0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3728      	adds	r7, #40	; 0x28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800720c:	2300      	movs	r3, #0
 800720e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff ff30 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f90c 	bl	8007444 <SDMMC_GetCmdError>
 800722c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722e:	69fb      	ldr	r3, [r7, #28]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007240:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007246:	2308      	movs	r3, #8
 8007248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007258:	f107 0308 	add.w	r3, r7, #8
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7ff ff11 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fb03 	bl	8007870 <SDMMC_GetCmdResp7>
 800726a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800726c:	69fb      	ldr	r3, [r7, #28]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3720      	adds	r7, #32
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b088      	sub	sp, #32
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007284:	2337      	movs	r3, #55	; 0x37
 8007286:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007288:	2340      	movs	r3, #64	; 0x40
 800728a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800728c:	2300      	movs	r3, #0
 800728e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007294:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007296:	f107 0308 	add.w	r3, r7, #8
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fef2 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80072a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a6:	2137      	movs	r1, #55	; 0x37
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f8f7 	bl	800749c <SDMMC_GetCmdResp1>
 80072ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072b0:	69fb      	ldr	r3, [r7, #28]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b088      	sub	sp, #32
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80072d0:	2329      	movs	r3, #41	; 0x29
 80072d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072d4:	2340      	movs	r3, #64	; 0x40
 80072d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072e2:	f107 0308 	add.w	r3, r7, #8
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff fecc 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa0a 	bl	8007708 <SDMMC_GetCmdResp3>
 80072f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f6:	69fb      	ldr	r3, [r7, #28]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b088      	sub	sp, #32
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800730e:	2306      	movs	r3, #6
 8007310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007312:	2340      	movs	r3, #64	; 0x40
 8007314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800731a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800731e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007320:	f107 0308 	add.w	r3, r7, #8
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fead 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800732c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007330:	2106      	movs	r1, #6
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8b2 	bl	800749c <SDMMC_GetCmdResp1>
 8007338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800733a:	69fb      	ldr	r3, [r7, #28]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007350:	2333      	movs	r3, #51	; 0x33
 8007352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007358:	2300      	movs	r3, #0
 800735a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800735c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007362:	f107 0308 	add.w	r3, r7, #8
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fe8c 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800736e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007372:	2133      	movs	r1, #51	; 0x33
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f891 	bl	800749c <SDMMC_GetCmdResp1>
 800737a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800737c:	69fb      	ldr	r3, [r7, #28]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007392:	2302      	movs	r3, #2
 8007394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007396:	23c0      	movs	r3, #192	; 0xc0
 8007398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800739e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a4:	f107 0308 	add.w	r3, r7, #8
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fe6b 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f961 	bl	8007678 <SDMMC_GetCmdResp2>
 80073b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073b8:	69fb      	ldr	r3, [r7, #28]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80073d0:	2309      	movs	r3, #9
 80073d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073d4:	23c0      	movs	r3, #192	; 0xc0
 80073d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fe4c 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f942 	bl	8007678 <SDMMC_GetCmdResp2>
 80073f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f6:	69fb      	ldr	r3, [r7, #28]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3720      	adds	r7, #32
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800740e:	2303      	movs	r3, #3
 8007410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800741a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007420:	f107 0308 	add.w	r3, r7, #8
 8007424:	4619      	mov	r1, r3
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff fe2d 	bl	8007086 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	2103      	movs	r1, #3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9a7 	bl	8007784 <SDMMC_GetCmdResp6>
 8007436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007438:	69fb      	ldr	r3, [r7, #28]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <SDMMC_GetCmdError+0x50>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a11      	ldr	r2, [pc, #68]	; (8007498 <SDMMC_GetCmdError+0x54>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	0a5b      	lsrs	r3, r3, #9
 8007458:	f241 3288 	movw	r2, #5000	; 0x1388
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1e5a      	subs	r2, r3, #1
 8007466:	60fa      	str	r2, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800746c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007470:	e009      	b.n	8007486 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f1      	beq.n	8007462 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	22c5      	movs	r2, #197	; 0xc5
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	20000064 	.word	0x20000064
 8007498:	10624dd3 	.word	0x10624dd3

0800749c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	460b      	mov	r3, r1
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80074aa:	4b70      	ldr	r3, [pc, #448]	; (800766c <SDMMC_GetCmdResp1+0x1d0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a70      	ldr	r2, [pc, #448]	; (8007670 <SDMMC_GetCmdResp1+0x1d4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	0a5a      	lsrs	r2, r3, #9
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	fb02 f303 	mul.w	r3, r2, r3
 80074bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	1e5a      	subs	r2, r3, #1
 80074c2:	61fa      	str	r2, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074cc:	e0c9      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0ef      	beq.n	80074be <SDMMC_GetCmdResp1+0x22>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ea      	bne.n	80074be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2204      	movs	r2, #4
 80074f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074fa:	2304      	movs	r3, #4
 80074fc:	e0b1      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d004      	beq.n	8007514 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007510:	2301      	movs	r3, #1
 8007512:	e0a6      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	22c5      	movs	r2, #197	; 0xc5
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f7ff fddd 	bl	80070da <SDIO_GetCommandResponse>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	4293      	cmp	r3, r2
 8007528:	d001      	beq.n	800752e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800752a:	2301      	movs	r3, #1
 800752c:	e099      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fddf 	bl	80070f4 <SDIO_GetResponse>
 8007536:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	4b4e      	ldr	r3, [pc, #312]	; (8007674 <SDMMC_GetCmdResp1+0x1d8>)
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007542:	2300      	movs	r3, #0
 8007544:	e08d      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	da02      	bge.n	8007552 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800754c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007550:	e087      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	e080      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800756a:	2380      	movs	r3, #128	; 0x80
 800756c:	e079      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800757c:	e071      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800758c:	e069      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759c:	e061      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80075a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075ac:	e059      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80075b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075bc:	e051      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80075c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075cc:	e049      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d002      	beq.n	80075de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80075d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075dc:	e041      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80075e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ec:	e039      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80075f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075fc:	e031      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007608:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800760c:	e029      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007618:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800761c:	e021      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007628:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800762c:	e019      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007638:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800763c:	e011      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007648:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800764c:	e009      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007658:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800765c:	e001      	b.n	8007662 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800765e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000064 	.word	0x20000064
 8007670:	10624dd3 	.word	0x10624dd3
 8007674:	fdffe008 	.word	0xfdffe008

08007678 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007680:	4b1f      	ldr	r3, [pc, #124]	; (8007700 <SDMMC_GetCmdResp2+0x88>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1f      	ldr	r2, [pc, #124]	; (8007704 <SDMMC_GetCmdResp2+0x8c>)
 8007686:	fba2 2303 	umull	r2, r3, r2, r3
 800768a:	0a5b      	lsrs	r3, r3, #9
 800768c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1e5a      	subs	r2, r3, #1
 800769a:	60fa      	str	r2, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076a4:	e026      	b.n	80076f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d0ef      	beq.n	8007696 <SDMMC_GetCmdResp2+0x1e>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1ea      	bne.n	8007696 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2204      	movs	r2, #4
 80076d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076d2:	2304      	movs	r3, #4
 80076d4:	e00e      	b.n	80076f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e003      	b.n	80076f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	22c5      	movs	r2, #197	; 0xc5
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000064 	.word	0x20000064
 8007704:	10624dd3 	.word	0x10624dd3

08007708 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007710:	4b1a      	ldr	r3, [pc, #104]	; (800777c <SDMMC_GetCmdResp3+0x74>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <SDMMC_GetCmdResp3+0x78>)
 8007716:	fba2 2303 	umull	r2, r3, r2, r3
 800771a:	0a5b      	lsrs	r3, r3, #9
 800771c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007720:	fb02 f303 	mul.w	r3, r2, r3
 8007724:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	1e5a      	subs	r2, r3, #1
 800772a:	60fa      	str	r2, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007734:	e01b      	b.n	800776e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0ef      	beq.n	8007726 <SDMMC_GetCmdResp3+0x1e>
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ea      	bne.n	8007726 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2204      	movs	r2, #4
 8007760:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007762:	2304      	movs	r3, #4
 8007764:	e003      	b.n	800776e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	22c5      	movs	r2, #197	; 0xc5
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000064 	.word	0x20000064
 8007780:	10624dd3 	.word	0x10624dd3

08007784 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	460b      	mov	r3, r1
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007792:	4b35      	ldr	r3, [pc, #212]	; (8007868 <SDMMC_GetCmdResp6+0xe4>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a35      	ldr	r2, [pc, #212]	; (800786c <SDMMC_GetCmdResp6+0xe8>)
 8007798:	fba2 2303 	umull	r2, r3, r2, r3
 800779c:	0a5b      	lsrs	r3, r3, #9
 800779e:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	1e5a      	subs	r2, r3, #1
 80077ac:	61fa      	str	r2, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d102      	bne.n	80077b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077b6:	e052      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0ef      	beq.n	80077a8 <SDMMC_GetCmdResp6+0x24>
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1ea      	bne.n	80077a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2204      	movs	r2, #4
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077e4:	2304      	movs	r3, #4
 80077e6:	e03a      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e02f      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fc6b 	bl	80070da <SDIO_GetCommandResponse>
 8007804:	4603      	mov	r3, r0
 8007806:	461a      	mov	r2, r3
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	4293      	cmp	r3, r2
 800780c:	d001      	beq.n	8007812 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800780e:	2301      	movs	r3, #1
 8007810:	e025      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22c5      	movs	r2, #197	; 0xc5
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff fc6a 	bl	80070f4 <SDIO_GetResponse>
 8007820:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d106      	bne.n	800783a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	0c1b      	lsrs	r3, r3, #16
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007836:	2300      	movs	r3, #0
 8007838:	e011      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d002      	beq.n	800784a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007848:	e009      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007858:	e001      	b.n	800785e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800785a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000064 	.word	0x20000064
 800786c:	10624dd3 	.word	0x10624dd3

08007870 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007878:	4b22      	ldr	r3, [pc, #136]	; (8007904 <SDMMC_GetCmdResp7+0x94>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a22      	ldr	r2, [pc, #136]	; (8007908 <SDMMC_GetCmdResp7+0x98>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	0a5b      	lsrs	r3, r3, #9
 8007884:	f241 3288 	movw	r2, #5000	; 0x1388
 8007888:	fb02 f303 	mul.w	r3, r2, r3
 800788c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1e5a      	subs	r2, r3, #1
 8007892:	60fa      	str	r2, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d102      	bne.n	800789e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007898:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800789c:	e02c      	b.n	80078f8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0ef      	beq.n	800788e <SDMMC_GetCmdResp7+0x1e>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ea      	bne.n	800788e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d004      	beq.n	80078ce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2204      	movs	r2, #4
 80078c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078ca:	2304      	movs	r3, #4
 80078cc:	e014      	b.n	80078f8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e009      	b.n	80078f8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2240      	movs	r2, #64	; 0x40
 80078f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80078f6:	2300      	movs	r3, #0
  
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	20000064 	.word	0x20000064
 8007908:	10624dd3 	.word	0x10624dd3

0800790c <_ZdlPvj>:
 800790c:	f000 b815 	b.w	800793a <_ZdlPv>

08007910 <_ZdaPv>:
 8007910:	f000 b813 	b.w	800793a <_ZdlPv>

08007914 <_Znwj>:
 8007914:	2801      	cmp	r0, #1
 8007916:	bf38      	it	cc
 8007918:	2001      	movcc	r0, #1
 800791a:	b510      	push	{r4, lr}
 800791c:	4604      	mov	r4, r0
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f84c 	bl	80079bc <malloc>
 8007924:	b930      	cbnz	r0, 8007934 <_Znwj+0x20>
 8007926:	f000 f80b 	bl	8007940 <_ZSt15get_new_handlerv>
 800792a:	b908      	cbnz	r0, 8007930 <_Znwj+0x1c>
 800792c:	f000 f810 	bl	8007950 <abort>
 8007930:	4780      	blx	r0
 8007932:	e7f4      	b.n	800791e <_Znwj+0xa>
 8007934:	bd10      	pop	{r4, pc}

08007936 <_Znaj>:
 8007936:	f7ff bfed 	b.w	8007914 <_Znwj>

0800793a <_ZdlPv>:
 800793a:	f000 b847 	b.w	80079cc <free>
	...

08007940 <_ZSt15get_new_handlerv>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <_ZSt15get_new_handlerv+0xc>)
 8007942:	6818      	ldr	r0, [r3, #0]
 8007944:	f3bf 8f5b 	dmb	ish
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	200016d4 	.word	0x200016d4

08007950 <abort>:
 8007950:	b508      	push	{r3, lr}
 8007952:	2006      	movs	r0, #6
 8007954:	f001 f848 	bl	80089e8 <raise>
 8007958:	2001      	movs	r0, #1
 800795a:	f7fb ff5f 	bl	800381c <_exit>

0800795e <atoi>:
 800795e:	220a      	movs	r2, #10
 8007960:	2100      	movs	r1, #0
 8007962:	f001 bfbf 	b.w	80098e4 <strtol>
	...

08007968 <__errno>:
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <__errno+0x8>)
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20000070 	.word	0x20000070

08007974 <__libc_init_array>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	4d0d      	ldr	r5, [pc, #52]	; (80079ac <__libc_init_array+0x38>)
 8007978:	4c0d      	ldr	r4, [pc, #52]	; (80079b0 <__libc_init_array+0x3c>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	2600      	movs	r6, #0
 8007980:	42a6      	cmp	r6, r4
 8007982:	d109      	bne.n	8007998 <__libc_init_array+0x24>
 8007984:	4d0b      	ldr	r5, [pc, #44]	; (80079b4 <__libc_init_array+0x40>)
 8007986:	4c0c      	ldr	r4, [pc, #48]	; (80079b8 <__libc_init_array+0x44>)
 8007988:	f005 f986 	bl	800cc98 <_init>
 800798c:	1b64      	subs	r4, r4, r5
 800798e:	10a4      	asrs	r4, r4, #2
 8007990:	2600      	movs	r6, #0
 8007992:	42a6      	cmp	r6, r4
 8007994:	d105      	bne.n	80079a2 <__libc_init_array+0x2e>
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	f855 3b04 	ldr.w	r3, [r5], #4
 800799c:	4798      	blx	r3
 800799e:	3601      	adds	r6, #1
 80079a0:	e7ee      	b.n	8007980 <__libc_init_array+0xc>
 80079a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a6:	4798      	blx	r3
 80079a8:	3601      	adds	r6, #1
 80079aa:	e7f2      	b.n	8007992 <__libc_init_array+0x1e>
 80079ac:	0800f18c 	.word	0x0800f18c
 80079b0:	0800f18c 	.word	0x0800f18c
 80079b4:	0800f18c 	.word	0x0800f18c
 80079b8:	0800f194 	.word	0x0800f194

080079bc <malloc>:
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <malloc+0xc>)
 80079be:	4601      	mov	r1, r0
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f000 b871 	b.w	8007aa8 <_malloc_r>
 80079c6:	bf00      	nop
 80079c8:	20000070 	.word	0x20000070

080079cc <free>:
 80079cc:	4b02      	ldr	r3, [pc, #8]	; (80079d8 <free+0xc>)
 80079ce:	4601      	mov	r1, r0
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f000 b819 	b.w	8007a08 <_free_r>
 80079d6:	bf00      	nop
 80079d8:	20000070 	.word	0x20000070

080079dc <memcpy>:
 80079dc:	440a      	add	r2, r1
 80079de:	4291      	cmp	r1, r2
 80079e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079e4:	d100      	bne.n	80079e8 <memcpy+0xc>
 80079e6:	4770      	bx	lr
 80079e8:	b510      	push	{r4, lr}
 80079ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f2:	4291      	cmp	r1, r2
 80079f4:	d1f9      	bne.n	80079ea <memcpy+0xe>
 80079f6:	bd10      	pop	{r4, pc}

080079f8 <memset>:
 80079f8:	4402      	add	r2, r0
 80079fa:	4603      	mov	r3, r0
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d100      	bne.n	8007a02 <memset+0xa>
 8007a00:	4770      	bx	lr
 8007a02:	f803 1b01 	strb.w	r1, [r3], #1
 8007a06:	e7f9      	b.n	80079fc <memset+0x4>

08007a08 <_free_r>:
 8007a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	d048      	beq.n	8007aa0 <_free_r+0x98>
 8007a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a12:	9001      	str	r0, [sp, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f1a1 0404 	sub.w	r4, r1, #4
 8007a1a:	bfb8      	it	lt
 8007a1c:	18e4      	addlt	r4, r4, r3
 8007a1e:	f003 fcc9 	bl	800b3b4 <__malloc_lock>
 8007a22:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <_free_r+0x9c>)
 8007a24:	9801      	ldr	r0, [sp, #4]
 8007a26:	6813      	ldr	r3, [r2, #0]
 8007a28:	4615      	mov	r5, r2
 8007a2a:	b933      	cbnz	r3, 8007a3a <_free_r+0x32>
 8007a2c:	6063      	str	r3, [r4, #4]
 8007a2e:	6014      	str	r4, [r2, #0]
 8007a30:	b003      	add	sp, #12
 8007a32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a36:	f003 bcc3 	b.w	800b3c0 <__malloc_unlock>
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	d90b      	bls.n	8007a56 <_free_r+0x4e>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	1862      	adds	r2, r4, r1
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bf04      	itt	eq
 8007a46:	681a      	ldreq	r2, [r3, #0]
 8007a48:	685b      	ldreq	r3, [r3, #4]
 8007a4a:	6063      	str	r3, [r4, #4]
 8007a4c:	bf04      	itt	eq
 8007a4e:	1852      	addeq	r2, r2, r1
 8007a50:	6022      	streq	r2, [r4, #0]
 8007a52:	602c      	str	r4, [r5, #0]
 8007a54:	e7ec      	b.n	8007a30 <_free_r+0x28>
 8007a56:	461a      	mov	r2, r3
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	b10b      	cbz	r3, 8007a60 <_free_r+0x58>
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	d9fa      	bls.n	8007a56 <_free_r+0x4e>
 8007a60:	6811      	ldr	r1, [r2, #0]
 8007a62:	1855      	adds	r5, r2, r1
 8007a64:	42a5      	cmp	r5, r4
 8007a66:	d10b      	bne.n	8007a80 <_free_r+0x78>
 8007a68:	6824      	ldr	r4, [r4, #0]
 8007a6a:	4421      	add	r1, r4
 8007a6c:	1854      	adds	r4, r2, r1
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	6011      	str	r1, [r2, #0]
 8007a72:	d1dd      	bne.n	8007a30 <_free_r+0x28>
 8007a74:	681c      	ldr	r4, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	6053      	str	r3, [r2, #4]
 8007a7a:	4421      	add	r1, r4
 8007a7c:	6011      	str	r1, [r2, #0]
 8007a7e:	e7d7      	b.n	8007a30 <_free_r+0x28>
 8007a80:	d902      	bls.n	8007a88 <_free_r+0x80>
 8007a82:	230c      	movs	r3, #12
 8007a84:	6003      	str	r3, [r0, #0]
 8007a86:	e7d3      	b.n	8007a30 <_free_r+0x28>
 8007a88:	6825      	ldr	r5, [r4, #0]
 8007a8a:	1961      	adds	r1, r4, r5
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf04      	itt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	6063      	str	r3, [r4, #4]
 8007a96:	bf04      	itt	eq
 8007a98:	1949      	addeq	r1, r1, r5
 8007a9a:	6021      	streq	r1, [r4, #0]
 8007a9c:	6054      	str	r4, [r2, #4]
 8007a9e:	e7c7      	b.n	8007a30 <_free_r+0x28>
 8007aa0:	b003      	add	sp, #12
 8007aa2:	bd30      	pop	{r4, r5, pc}
 8007aa4:	200016d8 	.word	0x200016d8

08007aa8 <_malloc_r>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	1ccd      	adds	r5, r1, #3
 8007aac:	f025 0503 	bic.w	r5, r5, #3
 8007ab0:	3508      	adds	r5, #8
 8007ab2:	2d0c      	cmp	r5, #12
 8007ab4:	bf38      	it	cc
 8007ab6:	250c      	movcc	r5, #12
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	4606      	mov	r6, r0
 8007abc:	db01      	blt.n	8007ac2 <_malloc_r+0x1a>
 8007abe:	42a9      	cmp	r1, r5
 8007ac0:	d903      	bls.n	8007aca <_malloc_r+0x22>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	6033      	str	r3, [r6, #0]
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aca:	f003 fc73 	bl	800b3b4 <__malloc_lock>
 8007ace:	4921      	ldr	r1, [pc, #132]	; (8007b54 <_malloc_r+0xac>)
 8007ad0:	680a      	ldr	r2, [r1, #0]
 8007ad2:	4614      	mov	r4, r2
 8007ad4:	b99c      	cbnz	r4, 8007afe <_malloc_r+0x56>
 8007ad6:	4f20      	ldr	r7, [pc, #128]	; (8007b58 <_malloc_r+0xb0>)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	b923      	cbnz	r3, 8007ae6 <_malloc_r+0x3e>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f000 ff44 	bl	800896c <_sbrk_r>
 8007ae4:	6038      	str	r0, [r7, #0]
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f000 ff3f 	bl	800896c <_sbrk_r>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	d123      	bne.n	8007b3a <_malloc_r+0x92>
 8007af2:	230c      	movs	r3, #12
 8007af4:	6033      	str	r3, [r6, #0]
 8007af6:	4630      	mov	r0, r6
 8007af8:	f003 fc62 	bl	800b3c0 <__malloc_unlock>
 8007afc:	e7e3      	b.n	8007ac6 <_malloc_r+0x1e>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	1b5b      	subs	r3, r3, r5
 8007b02:	d417      	bmi.n	8007b34 <_malloc_r+0x8c>
 8007b04:	2b0b      	cmp	r3, #11
 8007b06:	d903      	bls.n	8007b10 <_malloc_r+0x68>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	441c      	add	r4, r3
 8007b0c:	6025      	str	r5, [r4, #0]
 8007b0e:	e004      	b.n	8007b1a <_malloc_r+0x72>
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	42a2      	cmp	r2, r4
 8007b14:	bf0c      	ite	eq
 8007b16:	600b      	streq	r3, [r1, #0]
 8007b18:	6053      	strne	r3, [r2, #4]
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f003 fc50 	bl	800b3c0 <__malloc_unlock>
 8007b20:	f104 000b 	add.w	r0, r4, #11
 8007b24:	1d23      	adds	r3, r4, #4
 8007b26:	f020 0007 	bic.w	r0, r0, #7
 8007b2a:	1ac2      	subs	r2, r0, r3
 8007b2c:	d0cc      	beq.n	8007ac8 <_malloc_r+0x20>
 8007b2e:	1a1b      	subs	r3, r3, r0
 8007b30:	50a3      	str	r3, [r4, r2]
 8007b32:	e7c9      	b.n	8007ac8 <_malloc_r+0x20>
 8007b34:	4622      	mov	r2, r4
 8007b36:	6864      	ldr	r4, [r4, #4]
 8007b38:	e7cc      	b.n	8007ad4 <_malloc_r+0x2c>
 8007b3a:	1cc4      	adds	r4, r0, #3
 8007b3c:	f024 0403 	bic.w	r4, r4, #3
 8007b40:	42a0      	cmp	r0, r4
 8007b42:	d0e3      	beq.n	8007b0c <_malloc_r+0x64>
 8007b44:	1a21      	subs	r1, r4, r0
 8007b46:	4630      	mov	r0, r6
 8007b48:	f000 ff10 	bl	800896c <_sbrk_r>
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	d1dd      	bne.n	8007b0c <_malloc_r+0x64>
 8007b50:	e7cf      	b.n	8007af2 <_malloc_r+0x4a>
 8007b52:	bf00      	nop
 8007b54:	200016d8 	.word	0x200016d8
 8007b58:	200016dc 	.word	0x200016dc

08007b5c <__cvt>:
 8007b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b60:	ec55 4b10 	vmov	r4, r5, d0
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	460e      	mov	r6, r1
 8007b68:	4619      	mov	r1, r3
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	bfbb      	ittet	lt
 8007b6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b72:	461d      	movlt	r5, r3
 8007b74:	2300      	movge	r3, #0
 8007b76:	232d      	movlt	r3, #45	; 0x2d
 8007b78:	700b      	strb	r3, [r1, #0]
 8007b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b80:	4691      	mov	r9, r2
 8007b82:	f023 0820 	bic.w	r8, r3, #32
 8007b86:	bfbc      	itt	lt
 8007b88:	4622      	movlt	r2, r4
 8007b8a:	4614      	movlt	r4, r2
 8007b8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b90:	d005      	beq.n	8007b9e <__cvt+0x42>
 8007b92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b96:	d100      	bne.n	8007b9a <__cvt+0x3e>
 8007b98:	3601      	adds	r6, #1
 8007b9a:	2102      	movs	r1, #2
 8007b9c:	e000      	b.n	8007ba0 <__cvt+0x44>
 8007b9e:	2103      	movs	r1, #3
 8007ba0:	ab03      	add	r3, sp, #12
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	ab02      	add	r3, sp, #8
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	ec45 4b10 	vmov	d0, r4, r5
 8007bac:	4653      	mov	r3, sl
 8007bae:	4632      	mov	r2, r6
 8007bb0:	f002 f85e 	bl	8009c70 <_dtoa_r>
 8007bb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007bb8:	4607      	mov	r7, r0
 8007bba:	d102      	bne.n	8007bc2 <__cvt+0x66>
 8007bbc:	f019 0f01 	tst.w	r9, #1
 8007bc0:	d022      	beq.n	8007c08 <__cvt+0xac>
 8007bc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bc6:	eb07 0906 	add.w	r9, r7, r6
 8007bca:	d110      	bne.n	8007bee <__cvt+0x92>
 8007bcc:	783b      	ldrb	r3, [r7, #0]
 8007bce:	2b30      	cmp	r3, #48	; 0x30
 8007bd0:	d10a      	bne.n	8007be8 <__cvt+0x8c>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	f7f8 ff7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bde:	b918      	cbnz	r0, 8007be8 <__cvt+0x8c>
 8007be0:	f1c6 0601 	rsb	r6, r6, #1
 8007be4:	f8ca 6000 	str.w	r6, [sl]
 8007be8:	f8da 3000 	ldr.w	r3, [sl]
 8007bec:	4499      	add	r9, r3
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	f7f8 ff6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bfa:	b108      	cbz	r0, 8007c00 <__cvt+0xa4>
 8007bfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c00:	2230      	movs	r2, #48	; 0x30
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	454b      	cmp	r3, r9
 8007c06:	d307      	bcc.n	8007c18 <__cvt+0xbc>
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c0c:	1bdb      	subs	r3, r3, r7
 8007c0e:	4638      	mov	r0, r7
 8007c10:	6013      	str	r3, [r2, #0]
 8007c12:	b004      	add	sp, #16
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c18:	1c59      	adds	r1, r3, #1
 8007c1a:	9103      	str	r1, [sp, #12]
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	e7f0      	b.n	8007c02 <__cvt+0xa6>

08007c20 <__exponent>:
 8007c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c22:	4603      	mov	r3, r0
 8007c24:	2900      	cmp	r1, #0
 8007c26:	bfb8      	it	lt
 8007c28:	4249      	neglt	r1, r1
 8007c2a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c2e:	bfb4      	ite	lt
 8007c30:	222d      	movlt	r2, #45	; 0x2d
 8007c32:	222b      	movge	r2, #43	; 0x2b
 8007c34:	2909      	cmp	r1, #9
 8007c36:	7042      	strb	r2, [r0, #1]
 8007c38:	dd2a      	ble.n	8007c90 <__exponent+0x70>
 8007c3a:	f10d 0407 	add.w	r4, sp, #7
 8007c3e:	46a4      	mov	ip, r4
 8007c40:	270a      	movs	r7, #10
 8007c42:	46a6      	mov	lr, r4
 8007c44:	460a      	mov	r2, r1
 8007c46:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c4a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c4e:	3530      	adds	r5, #48	; 0x30
 8007c50:	2a63      	cmp	r2, #99	; 0x63
 8007c52:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	dcf1      	bgt.n	8007c42 <__exponent+0x22>
 8007c5e:	3130      	adds	r1, #48	; 0x30
 8007c60:	f1ae 0502 	sub.w	r5, lr, #2
 8007c64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c68:	1c44      	adds	r4, r0, #1
 8007c6a:	4629      	mov	r1, r5
 8007c6c:	4561      	cmp	r1, ip
 8007c6e:	d30a      	bcc.n	8007c86 <__exponent+0x66>
 8007c70:	f10d 0209 	add.w	r2, sp, #9
 8007c74:	eba2 020e 	sub.w	r2, r2, lr
 8007c78:	4565      	cmp	r5, ip
 8007c7a:	bf88      	it	hi
 8007c7c:	2200      	movhi	r2, #0
 8007c7e:	4413      	add	r3, r2
 8007c80:	1a18      	subs	r0, r3, r0
 8007c82:	b003      	add	sp, #12
 8007c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c8e:	e7ed      	b.n	8007c6c <__exponent+0x4c>
 8007c90:	2330      	movs	r3, #48	; 0x30
 8007c92:	3130      	adds	r1, #48	; 0x30
 8007c94:	7083      	strb	r3, [r0, #2]
 8007c96:	70c1      	strb	r1, [r0, #3]
 8007c98:	1d03      	adds	r3, r0, #4
 8007c9a:	e7f1      	b.n	8007c80 <__exponent+0x60>

08007c9c <_printf_float>:
 8007c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	ed2d 8b02 	vpush	{d8}
 8007ca4:	b08d      	sub	sp, #52	; 0x34
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007cac:	4616      	mov	r6, r2
 8007cae:	461f      	mov	r7, r3
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	f003 faef 	bl	800b294 <_localeconv_r>
 8007cb6:	f8d0 a000 	ldr.w	sl, [r0]
 8007cba:	4650      	mov	r0, sl
 8007cbc:	f7f8 fa90 	bl	80001e0 <strlen>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc4:	6823      	ldr	r3, [r4, #0]
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ccc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	f023 0307 	bic.w	r3, r3, #7
 8007cd6:	f103 0208 	add.w	r2, r3, #8
 8007cda:	f8c8 2000 	str.w	r2, [r8]
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007ce6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cee:	9307      	str	r3, [sp, #28]
 8007cf0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cf4:	ee08 0a10 	vmov	s16, r0
 8007cf8:	4b9f      	ldr	r3, [pc, #636]	; (8007f78 <_printf_float+0x2dc>)
 8007cfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007d02:	f7f8 ff1b 	bl	8000b3c <__aeabi_dcmpun>
 8007d06:	bb88      	cbnz	r0, 8007d6c <_printf_float+0xd0>
 8007d08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d0c:	4b9a      	ldr	r3, [pc, #616]	; (8007f78 <_printf_float+0x2dc>)
 8007d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d12:	f7f8 fef5 	bl	8000b00 <__aeabi_dcmple>
 8007d16:	bb48      	cbnz	r0, 8007d6c <_printf_float+0xd0>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fee4 	bl	8000aec <__aeabi_dcmplt>
 8007d24:	b110      	cbz	r0, 8007d2c <_printf_float+0x90>
 8007d26:	232d      	movs	r3, #45	; 0x2d
 8007d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d2c:	4b93      	ldr	r3, [pc, #588]	; (8007f7c <_printf_float+0x2e0>)
 8007d2e:	4894      	ldr	r0, [pc, #592]	; (8007f80 <_printf_float+0x2e4>)
 8007d30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d34:	bf94      	ite	ls
 8007d36:	4698      	movls	r8, r3
 8007d38:	4680      	movhi	r8, r0
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	6123      	str	r3, [r4, #16]
 8007d3e:	9b05      	ldr	r3, [sp, #20]
 8007d40:	f023 0204 	bic.w	r2, r3, #4
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	f04f 0900 	mov.w	r9, #0
 8007d4a:	9700      	str	r7, [sp, #0]
 8007d4c:	4633      	mov	r3, r6
 8007d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d50:	4621      	mov	r1, r4
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f9d8 	bl	8008108 <_printf_common>
 8007d58:	3001      	adds	r0, #1
 8007d5a:	f040 8090 	bne.w	8007e7e <_printf_float+0x1e2>
 8007d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d62:	b00d      	add	sp, #52	; 0x34
 8007d64:	ecbd 8b02 	vpop	{d8}
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fee2 	bl	8000b3c <__aeabi_dcmpun>
 8007d78:	b140      	cbz	r0, 8007d8c <_printf_float+0xf0>
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bfbc      	itt	lt
 8007d80:	232d      	movlt	r3, #45	; 0x2d
 8007d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d86:	487f      	ldr	r0, [pc, #508]	; (8007f84 <_printf_float+0x2e8>)
 8007d88:	4b7f      	ldr	r3, [pc, #508]	; (8007f88 <_printf_float+0x2ec>)
 8007d8a:	e7d1      	b.n	8007d30 <_printf_float+0x94>
 8007d8c:	6863      	ldr	r3, [r4, #4]
 8007d8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d92:	9206      	str	r2, [sp, #24]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	d13f      	bne.n	8007e18 <_printf_float+0x17c>
 8007d98:	2306      	movs	r3, #6
 8007d9a:	6063      	str	r3, [r4, #4]
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	6861      	ldr	r1, [r4, #4]
 8007da0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007da4:	2300      	movs	r3, #0
 8007da6:	9303      	str	r3, [sp, #12]
 8007da8:	ab0a      	add	r3, sp, #40	; 0x28
 8007daa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007dae:	ab09      	add	r3, sp, #36	; 0x24
 8007db0:	ec49 8b10 	vmov	d0, r8, r9
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	f7ff fecd 	bl	8007b5c <__cvt>
 8007dc2:	9b06      	ldr	r3, [sp, #24]
 8007dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dc6:	2b47      	cmp	r3, #71	; 0x47
 8007dc8:	4680      	mov	r8, r0
 8007dca:	d108      	bne.n	8007dde <_printf_float+0x142>
 8007dcc:	1cc8      	adds	r0, r1, #3
 8007dce:	db02      	blt.n	8007dd6 <_printf_float+0x13a>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	4299      	cmp	r1, r3
 8007dd4:	dd41      	ble.n	8007e5a <_printf_float+0x1be>
 8007dd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dda:	fa5f fb8b 	uxtb.w	fp, fp
 8007dde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007de2:	d820      	bhi.n	8007e26 <_printf_float+0x18a>
 8007de4:	3901      	subs	r1, #1
 8007de6:	465a      	mov	r2, fp
 8007de8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dec:	9109      	str	r1, [sp, #36]	; 0x24
 8007dee:	f7ff ff17 	bl	8007c20 <__exponent>
 8007df2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df4:	1813      	adds	r3, r2, r0
 8007df6:	2a01      	cmp	r2, #1
 8007df8:	4681      	mov	r9, r0
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	dc02      	bgt.n	8007e04 <_printf_float+0x168>
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	07d2      	lsls	r2, r2, #31
 8007e02:	d501      	bpl.n	8007e08 <_printf_float+0x16c>
 8007e04:	3301      	adds	r3, #1
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d09c      	beq.n	8007d4a <_printf_float+0xae>
 8007e10:	232d      	movs	r3, #45	; 0x2d
 8007e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e16:	e798      	b.n	8007d4a <_printf_float+0xae>
 8007e18:	9a06      	ldr	r2, [sp, #24]
 8007e1a:	2a47      	cmp	r2, #71	; 0x47
 8007e1c:	d1be      	bne.n	8007d9c <_printf_float+0x100>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1bc      	bne.n	8007d9c <_printf_float+0x100>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e7b9      	b.n	8007d9a <_printf_float+0xfe>
 8007e26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e2a:	d118      	bne.n	8007e5e <_printf_float+0x1c2>
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	dd0b      	ble.n	8007e4a <_printf_float+0x1ae>
 8007e32:	6121      	str	r1, [r4, #16]
 8007e34:	b913      	cbnz	r3, 8007e3c <_printf_float+0x1a0>
 8007e36:	6822      	ldr	r2, [r4, #0]
 8007e38:	07d0      	lsls	r0, r2, #31
 8007e3a:	d502      	bpl.n	8007e42 <_printf_float+0x1a6>
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	440b      	add	r3, r1
 8007e40:	6123      	str	r3, [r4, #16]
 8007e42:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	e7de      	b.n	8007e08 <_printf_float+0x16c>
 8007e4a:	b913      	cbnz	r3, 8007e52 <_printf_float+0x1b6>
 8007e4c:	6822      	ldr	r2, [r4, #0]
 8007e4e:	07d2      	lsls	r2, r2, #31
 8007e50:	d501      	bpl.n	8007e56 <_printf_float+0x1ba>
 8007e52:	3302      	adds	r3, #2
 8007e54:	e7f4      	b.n	8007e40 <_printf_float+0x1a4>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e7f2      	b.n	8007e40 <_printf_float+0x1a4>
 8007e5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e60:	4299      	cmp	r1, r3
 8007e62:	db05      	blt.n	8007e70 <_printf_float+0x1d4>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	6121      	str	r1, [r4, #16]
 8007e68:	07d8      	lsls	r0, r3, #31
 8007e6a:	d5ea      	bpl.n	8007e42 <_printf_float+0x1a6>
 8007e6c:	1c4b      	adds	r3, r1, #1
 8007e6e:	e7e7      	b.n	8007e40 <_printf_float+0x1a4>
 8007e70:	2900      	cmp	r1, #0
 8007e72:	bfd4      	ite	le
 8007e74:	f1c1 0202 	rsble	r2, r1, #2
 8007e78:	2201      	movgt	r2, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	e7e0      	b.n	8007e40 <_printf_float+0x1a4>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	055a      	lsls	r2, r3, #21
 8007e82:	d407      	bmi.n	8007e94 <_printf_float+0x1f8>
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	4642      	mov	r2, r8
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d12c      	bne.n	8007eec <_printf_float+0x250>
 8007e92:	e764      	b.n	8007d5e <_printf_float+0xc2>
 8007e94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e98:	f240 80e0 	bls.w	800805c <_printf_float+0x3c0>
 8007e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f7f8 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d034      	beq.n	8007f16 <_printf_float+0x27a>
 8007eac:	4a37      	ldr	r2, [pc, #220]	; (8007f8c <_printf_float+0x2f0>)
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	47b8      	blx	r7
 8007eb6:	3001      	adds	r0, #1
 8007eb8:	f43f af51 	beq.w	8007d5e <_printf_float+0xc2>
 8007ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	db02      	blt.n	8007eca <_printf_float+0x22e>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	07d8      	lsls	r0, r3, #31
 8007ec8:	d510      	bpl.n	8007eec <_printf_float+0x250>
 8007eca:	ee18 3a10 	vmov	r3, s16
 8007ece:	4652      	mov	r2, sl
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	47b8      	blx	r7
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	f43f af41 	beq.w	8007d5e <_printf_float+0xc2>
 8007edc:	f04f 0800 	mov.w	r8, #0
 8007ee0:	f104 091a 	add.w	r9, r4, #26
 8007ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4543      	cmp	r3, r8
 8007eea:	dc09      	bgt.n	8007f00 <_printf_float+0x264>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	079b      	lsls	r3, r3, #30
 8007ef0:	f100 8105 	bmi.w	80080fe <_printf_float+0x462>
 8007ef4:	68e0      	ldr	r0, [r4, #12]
 8007ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef8:	4298      	cmp	r0, r3
 8007efa:	bfb8      	it	lt
 8007efc:	4618      	movlt	r0, r3
 8007efe:	e730      	b.n	8007d62 <_printf_float+0xc6>
 8007f00:	2301      	movs	r3, #1
 8007f02:	464a      	mov	r2, r9
 8007f04:	4631      	mov	r1, r6
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	f43f af27 	beq.w	8007d5e <_printf_float+0xc2>
 8007f10:	f108 0801 	add.w	r8, r8, #1
 8007f14:	e7e6      	b.n	8007ee4 <_printf_float+0x248>
 8007f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc39      	bgt.n	8007f90 <_printf_float+0x2f4>
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	; (8007f8c <_printf_float+0x2f0>)
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4631      	mov	r1, r6
 8007f22:	4628      	mov	r0, r5
 8007f24:	47b8      	blx	r7
 8007f26:	3001      	adds	r0, #1
 8007f28:	f43f af19 	beq.w	8007d5e <_printf_float+0xc2>
 8007f2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f30:	4313      	orrs	r3, r2
 8007f32:	d102      	bne.n	8007f3a <_printf_float+0x29e>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	07d9      	lsls	r1, r3, #31
 8007f38:	d5d8      	bpl.n	8007eec <_printf_float+0x250>
 8007f3a:	ee18 3a10 	vmov	r3, s16
 8007f3e:	4652      	mov	r2, sl
 8007f40:	4631      	mov	r1, r6
 8007f42:	4628      	mov	r0, r5
 8007f44:	47b8      	blx	r7
 8007f46:	3001      	adds	r0, #1
 8007f48:	f43f af09 	beq.w	8007d5e <_printf_float+0xc2>
 8007f4c:	f04f 0900 	mov.w	r9, #0
 8007f50:	f104 0a1a 	add.w	sl, r4, #26
 8007f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f56:	425b      	negs	r3, r3
 8007f58:	454b      	cmp	r3, r9
 8007f5a:	dc01      	bgt.n	8007f60 <_printf_float+0x2c4>
 8007f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f5e:	e792      	b.n	8007e86 <_printf_float+0x1ea>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4652      	mov	r2, sl
 8007f64:	4631      	mov	r1, r6
 8007f66:	4628      	mov	r0, r5
 8007f68:	47b8      	blx	r7
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	f43f aef7 	beq.w	8007d5e <_printf_float+0xc2>
 8007f70:	f109 0901 	add.w	r9, r9, #1
 8007f74:	e7ee      	b.n	8007f54 <_printf_float+0x2b8>
 8007f76:	bf00      	nop
 8007f78:	7fefffff 	.word	0x7fefffff
 8007f7c:	0800ecc0 	.word	0x0800ecc0
 8007f80:	0800ecc4 	.word	0x0800ecc4
 8007f84:	0800eccc 	.word	0x0800eccc
 8007f88:	0800ecc8 	.word	0x0800ecc8
 8007f8c:	0800f131 	.word	0x0800f131
 8007f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f94:	429a      	cmp	r2, r3
 8007f96:	bfa8      	it	ge
 8007f98:	461a      	movge	r2, r3
 8007f9a:	2a00      	cmp	r2, #0
 8007f9c:	4691      	mov	r9, r2
 8007f9e:	dc37      	bgt.n	8008010 <_printf_float+0x374>
 8007fa0:	f04f 0b00 	mov.w	fp, #0
 8007fa4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fa8:	f104 021a 	add.w	r2, r4, #26
 8007fac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007fae:	9305      	str	r3, [sp, #20]
 8007fb0:	eba3 0309 	sub.w	r3, r3, r9
 8007fb4:	455b      	cmp	r3, fp
 8007fb6:	dc33      	bgt.n	8008020 <_printf_float+0x384>
 8007fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	db3b      	blt.n	8008038 <_printf_float+0x39c>
 8007fc0:	6823      	ldr	r3, [r4, #0]
 8007fc2:	07da      	lsls	r2, r3, #31
 8007fc4:	d438      	bmi.n	8008038 <_printf_float+0x39c>
 8007fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	eba2 0901 	sub.w	r9, r2, r1
 8007fd2:	4599      	cmp	r9, r3
 8007fd4:	bfa8      	it	ge
 8007fd6:	4699      	movge	r9, r3
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	dc35      	bgt.n	800804a <_printf_float+0x3ae>
 8007fde:	f04f 0800 	mov.w	r8, #0
 8007fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fe6:	f104 0a1a 	add.w	sl, r4, #26
 8007fea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fee:	1a9b      	subs	r3, r3, r2
 8007ff0:	eba3 0309 	sub.w	r3, r3, r9
 8007ff4:	4543      	cmp	r3, r8
 8007ff6:	f77f af79 	ble.w	8007eec <_printf_float+0x250>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	4652      	mov	r2, sl
 8007ffe:	4631      	mov	r1, r6
 8008000:	4628      	mov	r0, r5
 8008002:	47b8      	blx	r7
 8008004:	3001      	adds	r0, #1
 8008006:	f43f aeaa 	beq.w	8007d5e <_printf_float+0xc2>
 800800a:	f108 0801 	add.w	r8, r8, #1
 800800e:	e7ec      	b.n	8007fea <_printf_float+0x34e>
 8008010:	4613      	mov	r3, r2
 8008012:	4631      	mov	r1, r6
 8008014:	4642      	mov	r2, r8
 8008016:	4628      	mov	r0, r5
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	d1c0      	bne.n	8007fa0 <_printf_float+0x304>
 800801e:	e69e      	b.n	8007d5e <_printf_float+0xc2>
 8008020:	2301      	movs	r3, #1
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	9205      	str	r2, [sp, #20]
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f ae97 	beq.w	8007d5e <_printf_float+0xc2>
 8008030:	9a05      	ldr	r2, [sp, #20]
 8008032:	f10b 0b01 	add.w	fp, fp, #1
 8008036:	e7b9      	b.n	8007fac <_printf_float+0x310>
 8008038:	ee18 3a10 	vmov	r3, s16
 800803c:	4652      	mov	r2, sl
 800803e:	4631      	mov	r1, r6
 8008040:	4628      	mov	r0, r5
 8008042:	47b8      	blx	r7
 8008044:	3001      	adds	r0, #1
 8008046:	d1be      	bne.n	8007fc6 <_printf_float+0x32a>
 8008048:	e689      	b.n	8007d5e <_printf_float+0xc2>
 800804a:	9a05      	ldr	r2, [sp, #20]
 800804c:	464b      	mov	r3, r9
 800804e:	4442      	add	r2, r8
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	d1c1      	bne.n	8007fde <_printf_float+0x342>
 800805a:	e680      	b.n	8007d5e <_printf_float+0xc2>
 800805c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800805e:	2a01      	cmp	r2, #1
 8008060:	dc01      	bgt.n	8008066 <_printf_float+0x3ca>
 8008062:	07db      	lsls	r3, r3, #31
 8008064:	d538      	bpl.n	80080d8 <_printf_float+0x43c>
 8008066:	2301      	movs	r3, #1
 8008068:	4642      	mov	r2, r8
 800806a:	4631      	mov	r1, r6
 800806c:	4628      	mov	r0, r5
 800806e:	47b8      	blx	r7
 8008070:	3001      	adds	r0, #1
 8008072:	f43f ae74 	beq.w	8007d5e <_printf_float+0xc2>
 8008076:	ee18 3a10 	vmov	r3, s16
 800807a:	4652      	mov	r2, sl
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f ae6b 	beq.w	8007d5e <_printf_float+0xc2>
 8008088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	f7f8 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008094:	b9d8      	cbnz	r0, 80080ce <_printf_float+0x432>
 8008096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008098:	f108 0201 	add.w	r2, r8, #1
 800809c:	3b01      	subs	r3, #1
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	d10e      	bne.n	80080c6 <_printf_float+0x42a>
 80080a8:	e659      	b.n	8007d5e <_printf_float+0xc2>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4652      	mov	r2, sl
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae52 	beq.w	8007d5e <_printf_float+0xc2>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4543      	cmp	r3, r8
 80080c4:	dcf1      	bgt.n	80080aa <_printf_float+0x40e>
 80080c6:	464b      	mov	r3, r9
 80080c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080cc:	e6dc      	b.n	8007e88 <_printf_float+0x1ec>
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	f104 0a1a 	add.w	sl, r4, #26
 80080d6:	e7f2      	b.n	80080be <_printf_float+0x422>
 80080d8:	2301      	movs	r3, #1
 80080da:	4642      	mov	r2, r8
 80080dc:	e7df      	b.n	800809e <_printf_float+0x402>
 80080de:	2301      	movs	r3, #1
 80080e0:	464a      	mov	r2, r9
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae38 	beq.w	8007d5e <_printf_float+0xc2>
 80080ee:	f108 0801 	add.w	r8, r8, #1
 80080f2:	68e3      	ldr	r3, [r4, #12]
 80080f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080f6:	1a5b      	subs	r3, r3, r1
 80080f8:	4543      	cmp	r3, r8
 80080fa:	dcf0      	bgt.n	80080de <_printf_float+0x442>
 80080fc:	e6fa      	b.n	8007ef4 <_printf_float+0x258>
 80080fe:	f04f 0800 	mov.w	r8, #0
 8008102:	f104 0919 	add.w	r9, r4, #25
 8008106:	e7f4      	b.n	80080f2 <_printf_float+0x456>

08008108 <_printf_common>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	4616      	mov	r6, r2
 800810e:	4699      	mov	r9, r3
 8008110:	688a      	ldr	r2, [r1, #8]
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008118:	4293      	cmp	r3, r2
 800811a:	bfb8      	it	lt
 800811c:	4613      	movlt	r3, r2
 800811e:	6033      	str	r3, [r6, #0]
 8008120:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008124:	4607      	mov	r7, r0
 8008126:	460c      	mov	r4, r1
 8008128:	b10a      	cbz	r2, 800812e <_printf_common+0x26>
 800812a:	3301      	adds	r3, #1
 800812c:	6033      	str	r3, [r6, #0]
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	0699      	lsls	r1, r3, #26
 8008132:	bf42      	ittt	mi
 8008134:	6833      	ldrmi	r3, [r6, #0]
 8008136:	3302      	addmi	r3, #2
 8008138:	6033      	strmi	r3, [r6, #0]
 800813a:	6825      	ldr	r5, [r4, #0]
 800813c:	f015 0506 	ands.w	r5, r5, #6
 8008140:	d106      	bne.n	8008150 <_printf_common+0x48>
 8008142:	f104 0a19 	add.w	sl, r4, #25
 8008146:	68e3      	ldr	r3, [r4, #12]
 8008148:	6832      	ldr	r2, [r6, #0]
 800814a:	1a9b      	subs	r3, r3, r2
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc26      	bgt.n	800819e <_printf_common+0x96>
 8008150:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008154:	1e13      	subs	r3, r2, #0
 8008156:	6822      	ldr	r2, [r4, #0]
 8008158:	bf18      	it	ne
 800815a:	2301      	movne	r3, #1
 800815c:	0692      	lsls	r2, r2, #26
 800815e:	d42b      	bmi.n	80081b8 <_printf_common+0xb0>
 8008160:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008164:	4649      	mov	r1, r9
 8008166:	4638      	mov	r0, r7
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d01e      	beq.n	80081ac <_printf_common+0xa4>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	68e5      	ldr	r5, [r4, #12]
 8008172:	6832      	ldr	r2, [r6, #0]
 8008174:	f003 0306 	and.w	r3, r3, #6
 8008178:	2b04      	cmp	r3, #4
 800817a:	bf08      	it	eq
 800817c:	1aad      	subeq	r5, r5, r2
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	6922      	ldr	r2, [r4, #16]
 8008182:	bf0c      	ite	eq
 8008184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008188:	2500      	movne	r5, #0
 800818a:	4293      	cmp	r3, r2
 800818c:	bfc4      	itt	gt
 800818e:	1a9b      	subgt	r3, r3, r2
 8008190:	18ed      	addgt	r5, r5, r3
 8008192:	2600      	movs	r6, #0
 8008194:	341a      	adds	r4, #26
 8008196:	42b5      	cmp	r5, r6
 8008198:	d11a      	bne.n	80081d0 <_printf_common+0xc8>
 800819a:	2000      	movs	r0, #0
 800819c:	e008      	b.n	80081b0 <_printf_common+0xa8>
 800819e:	2301      	movs	r3, #1
 80081a0:	4652      	mov	r2, sl
 80081a2:	4649      	mov	r1, r9
 80081a4:	4638      	mov	r0, r7
 80081a6:	47c0      	blx	r8
 80081a8:	3001      	adds	r0, #1
 80081aa:	d103      	bne.n	80081b4 <_printf_common+0xac>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b4:	3501      	adds	r5, #1
 80081b6:	e7c6      	b.n	8008146 <_printf_common+0x3e>
 80081b8:	18e1      	adds	r1, r4, r3
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	2030      	movs	r0, #48	; 0x30
 80081be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c2:	4422      	add	r2, r4
 80081c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081cc:	3302      	adds	r3, #2
 80081ce:	e7c7      	b.n	8008160 <_printf_common+0x58>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4622      	mov	r2, r4
 80081d4:	4649      	mov	r1, r9
 80081d6:	4638      	mov	r0, r7
 80081d8:	47c0      	blx	r8
 80081da:	3001      	adds	r0, #1
 80081dc:	d0e6      	beq.n	80081ac <_printf_common+0xa4>
 80081de:	3601      	adds	r6, #1
 80081e0:	e7d9      	b.n	8008196 <_printf_common+0x8e>
	...

080081e4 <_printf_i>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	460c      	mov	r4, r1
 80081ea:	4691      	mov	r9, r2
 80081ec:	7e27      	ldrb	r7, [r4, #24]
 80081ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081f0:	2f78      	cmp	r7, #120	; 0x78
 80081f2:	4680      	mov	r8, r0
 80081f4:	469a      	mov	sl, r3
 80081f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081fa:	d807      	bhi.n	800820c <_printf_i+0x28>
 80081fc:	2f62      	cmp	r7, #98	; 0x62
 80081fe:	d80a      	bhi.n	8008216 <_printf_i+0x32>
 8008200:	2f00      	cmp	r7, #0
 8008202:	f000 80d8 	beq.w	80083b6 <_printf_i+0x1d2>
 8008206:	2f58      	cmp	r7, #88	; 0x58
 8008208:	f000 80a3 	beq.w	8008352 <_printf_i+0x16e>
 800820c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008210:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008214:	e03a      	b.n	800828c <_printf_i+0xa8>
 8008216:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800821a:	2b15      	cmp	r3, #21
 800821c:	d8f6      	bhi.n	800820c <_printf_i+0x28>
 800821e:	a001      	add	r0, pc, #4	; (adr r0, 8008224 <_printf_i+0x40>)
 8008220:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008224:	0800827d 	.word	0x0800827d
 8008228:	08008291 	.word	0x08008291
 800822c:	0800820d 	.word	0x0800820d
 8008230:	0800820d 	.word	0x0800820d
 8008234:	0800820d 	.word	0x0800820d
 8008238:	0800820d 	.word	0x0800820d
 800823c:	08008291 	.word	0x08008291
 8008240:	0800820d 	.word	0x0800820d
 8008244:	0800820d 	.word	0x0800820d
 8008248:	0800820d 	.word	0x0800820d
 800824c:	0800820d 	.word	0x0800820d
 8008250:	0800839d 	.word	0x0800839d
 8008254:	080082c1 	.word	0x080082c1
 8008258:	0800837f 	.word	0x0800837f
 800825c:	0800820d 	.word	0x0800820d
 8008260:	0800820d 	.word	0x0800820d
 8008264:	080083bf 	.word	0x080083bf
 8008268:	0800820d 	.word	0x0800820d
 800826c:	080082c1 	.word	0x080082c1
 8008270:	0800820d 	.word	0x0800820d
 8008274:	0800820d 	.word	0x0800820d
 8008278:	08008387 	.word	0x08008387
 800827c:	680b      	ldr	r3, [r1, #0]
 800827e:	1d1a      	adds	r2, r3, #4
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	600a      	str	r2, [r1, #0]
 8008284:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008288:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800828c:	2301      	movs	r3, #1
 800828e:	e0a3      	b.n	80083d8 <_printf_i+0x1f4>
 8008290:	6825      	ldr	r5, [r4, #0]
 8008292:	6808      	ldr	r0, [r1, #0]
 8008294:	062e      	lsls	r6, r5, #24
 8008296:	f100 0304 	add.w	r3, r0, #4
 800829a:	d50a      	bpl.n	80082b2 <_printf_i+0xce>
 800829c:	6805      	ldr	r5, [r0, #0]
 800829e:	600b      	str	r3, [r1, #0]
 80082a0:	2d00      	cmp	r5, #0
 80082a2:	da03      	bge.n	80082ac <_printf_i+0xc8>
 80082a4:	232d      	movs	r3, #45	; 0x2d
 80082a6:	426d      	negs	r5, r5
 80082a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ac:	485e      	ldr	r0, [pc, #376]	; (8008428 <_printf_i+0x244>)
 80082ae:	230a      	movs	r3, #10
 80082b0:	e019      	b.n	80082e6 <_printf_i+0x102>
 80082b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082b6:	6805      	ldr	r5, [r0, #0]
 80082b8:	600b      	str	r3, [r1, #0]
 80082ba:	bf18      	it	ne
 80082bc:	b22d      	sxthne	r5, r5
 80082be:	e7ef      	b.n	80082a0 <_printf_i+0xbc>
 80082c0:	680b      	ldr	r3, [r1, #0]
 80082c2:	6825      	ldr	r5, [r4, #0]
 80082c4:	1d18      	adds	r0, r3, #4
 80082c6:	6008      	str	r0, [r1, #0]
 80082c8:	0628      	lsls	r0, r5, #24
 80082ca:	d501      	bpl.n	80082d0 <_printf_i+0xec>
 80082cc:	681d      	ldr	r5, [r3, #0]
 80082ce:	e002      	b.n	80082d6 <_printf_i+0xf2>
 80082d0:	0669      	lsls	r1, r5, #25
 80082d2:	d5fb      	bpl.n	80082cc <_printf_i+0xe8>
 80082d4:	881d      	ldrh	r5, [r3, #0]
 80082d6:	4854      	ldr	r0, [pc, #336]	; (8008428 <_printf_i+0x244>)
 80082d8:	2f6f      	cmp	r7, #111	; 0x6f
 80082da:	bf0c      	ite	eq
 80082dc:	2308      	moveq	r3, #8
 80082de:	230a      	movne	r3, #10
 80082e0:	2100      	movs	r1, #0
 80082e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082e6:	6866      	ldr	r6, [r4, #4]
 80082e8:	60a6      	str	r6, [r4, #8]
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	bfa2      	ittt	ge
 80082ee:	6821      	ldrge	r1, [r4, #0]
 80082f0:	f021 0104 	bicge.w	r1, r1, #4
 80082f4:	6021      	strge	r1, [r4, #0]
 80082f6:	b90d      	cbnz	r5, 80082fc <_printf_i+0x118>
 80082f8:	2e00      	cmp	r6, #0
 80082fa:	d04d      	beq.n	8008398 <_printf_i+0x1b4>
 80082fc:	4616      	mov	r6, r2
 80082fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8008302:	fb03 5711 	mls	r7, r3, r1, r5
 8008306:	5dc7      	ldrb	r7, [r0, r7]
 8008308:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800830c:	462f      	mov	r7, r5
 800830e:	42bb      	cmp	r3, r7
 8008310:	460d      	mov	r5, r1
 8008312:	d9f4      	bls.n	80082fe <_printf_i+0x11a>
 8008314:	2b08      	cmp	r3, #8
 8008316:	d10b      	bne.n	8008330 <_printf_i+0x14c>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	07df      	lsls	r7, r3, #31
 800831c:	d508      	bpl.n	8008330 <_printf_i+0x14c>
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	6861      	ldr	r1, [r4, #4]
 8008322:	4299      	cmp	r1, r3
 8008324:	bfde      	ittt	le
 8008326:	2330      	movle	r3, #48	; 0x30
 8008328:	f806 3c01 	strble.w	r3, [r6, #-1]
 800832c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008330:	1b92      	subs	r2, r2, r6
 8008332:	6122      	str	r2, [r4, #16]
 8008334:	f8cd a000 	str.w	sl, [sp]
 8008338:	464b      	mov	r3, r9
 800833a:	aa03      	add	r2, sp, #12
 800833c:	4621      	mov	r1, r4
 800833e:	4640      	mov	r0, r8
 8008340:	f7ff fee2 	bl	8008108 <_printf_common>
 8008344:	3001      	adds	r0, #1
 8008346:	d14c      	bne.n	80083e2 <_printf_i+0x1fe>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	b004      	add	sp, #16
 800834e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008352:	4835      	ldr	r0, [pc, #212]	; (8008428 <_printf_i+0x244>)
 8008354:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	680e      	ldr	r6, [r1, #0]
 800835c:	061f      	lsls	r7, r3, #24
 800835e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008362:	600e      	str	r6, [r1, #0]
 8008364:	d514      	bpl.n	8008390 <_printf_i+0x1ac>
 8008366:	07d9      	lsls	r1, r3, #31
 8008368:	bf44      	itt	mi
 800836a:	f043 0320 	orrmi.w	r3, r3, #32
 800836e:	6023      	strmi	r3, [r4, #0]
 8008370:	b91d      	cbnz	r5, 800837a <_printf_i+0x196>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f023 0320 	bic.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	2310      	movs	r3, #16
 800837c:	e7b0      	b.n	80082e0 <_printf_i+0xfc>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	f043 0320 	orr.w	r3, r3, #32
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	2378      	movs	r3, #120	; 0x78
 8008388:	4828      	ldr	r0, [pc, #160]	; (800842c <_printf_i+0x248>)
 800838a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800838e:	e7e3      	b.n	8008358 <_printf_i+0x174>
 8008390:	065e      	lsls	r6, r3, #25
 8008392:	bf48      	it	mi
 8008394:	b2ad      	uxthmi	r5, r5
 8008396:	e7e6      	b.n	8008366 <_printf_i+0x182>
 8008398:	4616      	mov	r6, r2
 800839a:	e7bb      	b.n	8008314 <_printf_i+0x130>
 800839c:	680b      	ldr	r3, [r1, #0]
 800839e:	6826      	ldr	r6, [r4, #0]
 80083a0:	6960      	ldr	r0, [r4, #20]
 80083a2:	1d1d      	adds	r5, r3, #4
 80083a4:	600d      	str	r5, [r1, #0]
 80083a6:	0635      	lsls	r5, r6, #24
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	d501      	bpl.n	80083b0 <_printf_i+0x1cc>
 80083ac:	6018      	str	r0, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <_printf_i+0x1d2>
 80083b0:	0671      	lsls	r1, r6, #25
 80083b2:	d5fb      	bpl.n	80083ac <_printf_i+0x1c8>
 80083b4:	8018      	strh	r0, [r3, #0]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6123      	str	r3, [r4, #16]
 80083ba:	4616      	mov	r6, r2
 80083bc:	e7ba      	b.n	8008334 <_printf_i+0x150>
 80083be:	680b      	ldr	r3, [r1, #0]
 80083c0:	1d1a      	adds	r2, r3, #4
 80083c2:	600a      	str	r2, [r1, #0]
 80083c4:	681e      	ldr	r6, [r3, #0]
 80083c6:	6862      	ldr	r2, [r4, #4]
 80083c8:	2100      	movs	r1, #0
 80083ca:	4630      	mov	r0, r6
 80083cc:	f7f7 ff10 	bl	80001f0 <memchr>
 80083d0:	b108      	cbz	r0, 80083d6 <_printf_i+0x1f2>
 80083d2:	1b80      	subs	r0, r0, r6
 80083d4:	6060      	str	r0, [r4, #4]
 80083d6:	6863      	ldr	r3, [r4, #4]
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	2300      	movs	r3, #0
 80083dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e0:	e7a8      	b.n	8008334 <_printf_i+0x150>
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	4632      	mov	r2, r6
 80083e6:	4649      	mov	r1, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	47d0      	blx	sl
 80083ec:	3001      	adds	r0, #1
 80083ee:	d0ab      	beq.n	8008348 <_printf_i+0x164>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	d413      	bmi.n	800841e <_printf_i+0x23a>
 80083f6:	68e0      	ldr	r0, [r4, #12]
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	4298      	cmp	r0, r3
 80083fc:	bfb8      	it	lt
 80083fe:	4618      	movlt	r0, r3
 8008400:	e7a4      	b.n	800834c <_printf_i+0x168>
 8008402:	2301      	movs	r3, #1
 8008404:	4632      	mov	r2, r6
 8008406:	4649      	mov	r1, r9
 8008408:	4640      	mov	r0, r8
 800840a:	47d0      	blx	sl
 800840c:	3001      	adds	r0, #1
 800840e:	d09b      	beq.n	8008348 <_printf_i+0x164>
 8008410:	3501      	adds	r5, #1
 8008412:	68e3      	ldr	r3, [r4, #12]
 8008414:	9903      	ldr	r1, [sp, #12]
 8008416:	1a5b      	subs	r3, r3, r1
 8008418:	42ab      	cmp	r3, r5
 800841a:	dcf2      	bgt.n	8008402 <_printf_i+0x21e>
 800841c:	e7eb      	b.n	80083f6 <_printf_i+0x212>
 800841e:	2500      	movs	r5, #0
 8008420:	f104 0619 	add.w	r6, r4, #25
 8008424:	e7f5      	b.n	8008412 <_printf_i+0x22e>
 8008426:	bf00      	nop
 8008428:	0800ecd0 	.word	0x0800ecd0
 800842c:	0800ece1 	.word	0x0800ece1

08008430 <_scanf_float>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	b087      	sub	sp, #28
 8008436:	4617      	mov	r7, r2
 8008438:	9303      	str	r3, [sp, #12]
 800843a:	688b      	ldr	r3, [r1, #8]
 800843c:	1e5a      	subs	r2, r3, #1
 800843e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008442:	bf83      	ittte	hi
 8008444:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008448:	195b      	addhi	r3, r3, r5
 800844a:	9302      	strhi	r3, [sp, #8]
 800844c:	2300      	movls	r3, #0
 800844e:	bf86      	itte	hi
 8008450:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008454:	608b      	strhi	r3, [r1, #8]
 8008456:	9302      	strls	r3, [sp, #8]
 8008458:	680b      	ldr	r3, [r1, #0]
 800845a:	468b      	mov	fp, r1
 800845c:	2500      	movs	r5, #0
 800845e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008462:	f84b 3b1c 	str.w	r3, [fp], #28
 8008466:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800846a:	4680      	mov	r8, r0
 800846c:	460c      	mov	r4, r1
 800846e:	465e      	mov	r6, fp
 8008470:	46aa      	mov	sl, r5
 8008472:	46a9      	mov	r9, r5
 8008474:	9501      	str	r5, [sp, #4]
 8008476:	68a2      	ldr	r2, [r4, #8]
 8008478:	b152      	cbz	r2, 8008490 <_scanf_float+0x60>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b4e      	cmp	r3, #78	; 0x4e
 8008480:	d864      	bhi.n	800854c <_scanf_float+0x11c>
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d83c      	bhi.n	8008500 <_scanf_float+0xd0>
 8008486:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800848a:	b2c8      	uxtb	r0, r1
 800848c:	280e      	cmp	r0, #14
 800848e:	d93a      	bls.n	8008506 <_scanf_float+0xd6>
 8008490:	f1b9 0f00 	cmp.w	r9, #0
 8008494:	d003      	beq.n	800849e <_scanf_float+0x6e>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084a2:	f1ba 0f01 	cmp.w	sl, #1
 80084a6:	f200 8113 	bhi.w	80086d0 <_scanf_float+0x2a0>
 80084aa:	455e      	cmp	r6, fp
 80084ac:	f200 8105 	bhi.w	80086ba <_scanf_float+0x28a>
 80084b0:	2501      	movs	r5, #1
 80084b2:	4628      	mov	r0, r5
 80084b4:	b007      	add	sp, #28
 80084b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80084be:	2a0d      	cmp	r2, #13
 80084c0:	d8e6      	bhi.n	8008490 <_scanf_float+0x60>
 80084c2:	a101      	add	r1, pc, #4	; (adr r1, 80084c8 <_scanf_float+0x98>)
 80084c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084c8:	08008607 	.word	0x08008607
 80084cc:	08008491 	.word	0x08008491
 80084d0:	08008491 	.word	0x08008491
 80084d4:	08008491 	.word	0x08008491
 80084d8:	08008667 	.word	0x08008667
 80084dc:	0800863f 	.word	0x0800863f
 80084e0:	08008491 	.word	0x08008491
 80084e4:	08008491 	.word	0x08008491
 80084e8:	08008615 	.word	0x08008615
 80084ec:	08008491 	.word	0x08008491
 80084f0:	08008491 	.word	0x08008491
 80084f4:	08008491 	.word	0x08008491
 80084f8:	08008491 	.word	0x08008491
 80084fc:	080085cd 	.word	0x080085cd
 8008500:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008504:	e7db      	b.n	80084be <_scanf_float+0x8e>
 8008506:	290e      	cmp	r1, #14
 8008508:	d8c2      	bhi.n	8008490 <_scanf_float+0x60>
 800850a:	a001      	add	r0, pc, #4	; (adr r0, 8008510 <_scanf_float+0xe0>)
 800850c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008510:	080085bf 	.word	0x080085bf
 8008514:	08008491 	.word	0x08008491
 8008518:	080085bf 	.word	0x080085bf
 800851c:	08008653 	.word	0x08008653
 8008520:	08008491 	.word	0x08008491
 8008524:	0800856d 	.word	0x0800856d
 8008528:	080085a9 	.word	0x080085a9
 800852c:	080085a9 	.word	0x080085a9
 8008530:	080085a9 	.word	0x080085a9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085a9 	.word	0x080085a9
 800853c:	080085a9 	.word	0x080085a9
 8008540:	080085a9 	.word	0x080085a9
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080085a9 	.word	0x080085a9
 800854c:	2b6e      	cmp	r3, #110	; 0x6e
 800854e:	d809      	bhi.n	8008564 <_scanf_float+0x134>
 8008550:	2b60      	cmp	r3, #96	; 0x60
 8008552:	d8b2      	bhi.n	80084ba <_scanf_float+0x8a>
 8008554:	2b54      	cmp	r3, #84	; 0x54
 8008556:	d077      	beq.n	8008648 <_scanf_float+0x218>
 8008558:	2b59      	cmp	r3, #89	; 0x59
 800855a:	d199      	bne.n	8008490 <_scanf_float+0x60>
 800855c:	2d07      	cmp	r5, #7
 800855e:	d197      	bne.n	8008490 <_scanf_float+0x60>
 8008560:	2508      	movs	r5, #8
 8008562:	e029      	b.n	80085b8 <_scanf_float+0x188>
 8008564:	2b74      	cmp	r3, #116	; 0x74
 8008566:	d06f      	beq.n	8008648 <_scanf_float+0x218>
 8008568:	2b79      	cmp	r3, #121	; 0x79
 800856a:	e7f6      	b.n	800855a <_scanf_float+0x12a>
 800856c:	6821      	ldr	r1, [r4, #0]
 800856e:	05c8      	lsls	r0, r1, #23
 8008570:	d51a      	bpl.n	80085a8 <_scanf_float+0x178>
 8008572:	9b02      	ldr	r3, [sp, #8]
 8008574:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008578:	6021      	str	r1, [r4, #0]
 800857a:	f109 0901 	add.w	r9, r9, #1
 800857e:	b11b      	cbz	r3, 8008588 <_scanf_float+0x158>
 8008580:	3b01      	subs	r3, #1
 8008582:	3201      	adds	r2, #1
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	60a2      	str	r2, [r4, #8]
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	3b01      	subs	r3, #1
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3b01      	subs	r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	f340 8084 	ble.w	80086a8 <_scanf_float+0x278>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	3301      	adds	r3, #1
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	e766      	b.n	8008476 <_scanf_float+0x46>
 80085a8:	eb1a 0f05 	cmn.w	sl, r5
 80085ac:	f47f af70 	bne.w	8008490 <_scanf_float+0x60>
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80085b6:	6022      	str	r2, [r4, #0]
 80085b8:	f806 3b01 	strb.w	r3, [r6], #1
 80085bc:	e7e4      	b.n	8008588 <_scanf_float+0x158>
 80085be:	6822      	ldr	r2, [r4, #0]
 80085c0:	0610      	lsls	r0, r2, #24
 80085c2:	f57f af65 	bpl.w	8008490 <_scanf_float+0x60>
 80085c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085ca:	e7f4      	b.n	80085b6 <_scanf_float+0x186>
 80085cc:	f1ba 0f00 	cmp.w	sl, #0
 80085d0:	d10e      	bne.n	80085f0 <_scanf_float+0x1c0>
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	d10e      	bne.n	80085f6 <_scanf_float+0x1c6>
 80085d8:	6822      	ldr	r2, [r4, #0]
 80085da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80085de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80085e2:	d108      	bne.n	80085f6 <_scanf_float+0x1c6>
 80085e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80085e8:	6022      	str	r2, [r4, #0]
 80085ea:	f04f 0a01 	mov.w	sl, #1
 80085ee:	e7e3      	b.n	80085b8 <_scanf_float+0x188>
 80085f0:	f1ba 0f02 	cmp.w	sl, #2
 80085f4:	d055      	beq.n	80086a2 <_scanf_float+0x272>
 80085f6:	2d01      	cmp	r5, #1
 80085f8:	d002      	beq.n	8008600 <_scanf_float+0x1d0>
 80085fa:	2d04      	cmp	r5, #4
 80085fc:	f47f af48 	bne.w	8008490 <_scanf_float+0x60>
 8008600:	3501      	adds	r5, #1
 8008602:	b2ed      	uxtb	r5, r5
 8008604:	e7d8      	b.n	80085b8 <_scanf_float+0x188>
 8008606:	f1ba 0f01 	cmp.w	sl, #1
 800860a:	f47f af41 	bne.w	8008490 <_scanf_float+0x60>
 800860e:	f04f 0a02 	mov.w	sl, #2
 8008612:	e7d1      	b.n	80085b8 <_scanf_float+0x188>
 8008614:	b97d      	cbnz	r5, 8008636 <_scanf_float+0x206>
 8008616:	f1b9 0f00 	cmp.w	r9, #0
 800861a:	f47f af3c 	bne.w	8008496 <_scanf_float+0x66>
 800861e:	6822      	ldr	r2, [r4, #0]
 8008620:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008624:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008628:	f47f af39 	bne.w	800849e <_scanf_float+0x6e>
 800862c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008630:	6022      	str	r2, [r4, #0]
 8008632:	2501      	movs	r5, #1
 8008634:	e7c0      	b.n	80085b8 <_scanf_float+0x188>
 8008636:	2d03      	cmp	r5, #3
 8008638:	d0e2      	beq.n	8008600 <_scanf_float+0x1d0>
 800863a:	2d05      	cmp	r5, #5
 800863c:	e7de      	b.n	80085fc <_scanf_float+0x1cc>
 800863e:	2d02      	cmp	r5, #2
 8008640:	f47f af26 	bne.w	8008490 <_scanf_float+0x60>
 8008644:	2503      	movs	r5, #3
 8008646:	e7b7      	b.n	80085b8 <_scanf_float+0x188>
 8008648:	2d06      	cmp	r5, #6
 800864a:	f47f af21 	bne.w	8008490 <_scanf_float+0x60>
 800864e:	2507      	movs	r5, #7
 8008650:	e7b2      	b.n	80085b8 <_scanf_float+0x188>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	0591      	lsls	r1, r2, #22
 8008656:	f57f af1b 	bpl.w	8008490 <_scanf_float+0x60>
 800865a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	f8cd 9004 	str.w	r9, [sp, #4]
 8008664:	e7a8      	b.n	80085b8 <_scanf_float+0x188>
 8008666:	6822      	ldr	r2, [r4, #0]
 8008668:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800866c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008670:	d006      	beq.n	8008680 <_scanf_float+0x250>
 8008672:	0550      	lsls	r0, r2, #21
 8008674:	f57f af0c 	bpl.w	8008490 <_scanf_float+0x60>
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	f43f af0f 	beq.w	800849e <_scanf_float+0x6e>
 8008680:	0591      	lsls	r1, r2, #22
 8008682:	bf58      	it	pl
 8008684:	9901      	ldrpl	r1, [sp, #4]
 8008686:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800868a:	bf58      	it	pl
 800868c:	eba9 0101 	subpl.w	r1, r9, r1
 8008690:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008694:	bf58      	it	pl
 8008696:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	f04f 0900 	mov.w	r9, #0
 80086a0:	e78a      	b.n	80085b8 <_scanf_float+0x188>
 80086a2:	f04f 0a03 	mov.w	sl, #3
 80086a6:	e787      	b.n	80085b8 <_scanf_float+0x188>
 80086a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086ac:	4639      	mov	r1, r7
 80086ae:	4640      	mov	r0, r8
 80086b0:	4798      	blx	r3
 80086b2:	2800      	cmp	r0, #0
 80086b4:	f43f aedf 	beq.w	8008476 <_scanf_float+0x46>
 80086b8:	e6ea      	b.n	8008490 <_scanf_float+0x60>
 80086ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086c2:	463a      	mov	r2, r7
 80086c4:	4640      	mov	r0, r8
 80086c6:	4798      	blx	r3
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6123      	str	r3, [r4, #16]
 80086ce:	e6ec      	b.n	80084aa <_scanf_float+0x7a>
 80086d0:	1e6b      	subs	r3, r5, #1
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d825      	bhi.n	8008722 <_scanf_float+0x2f2>
 80086d6:	2d02      	cmp	r5, #2
 80086d8:	d836      	bhi.n	8008748 <_scanf_float+0x318>
 80086da:	455e      	cmp	r6, fp
 80086dc:	f67f aee8 	bls.w	80084b0 <_scanf_float+0x80>
 80086e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086e8:	463a      	mov	r2, r7
 80086ea:	4640      	mov	r0, r8
 80086ec:	4798      	blx	r3
 80086ee:	6923      	ldr	r3, [r4, #16]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	e7f1      	b.n	80086da <_scanf_float+0x2aa>
 80086f6:	9802      	ldr	r0, [sp, #8]
 80086f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008700:	9002      	str	r0, [sp, #8]
 8008702:	463a      	mov	r2, r7
 8008704:	4640      	mov	r0, r8
 8008706:	4798      	blx	r3
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	3b01      	subs	r3, #1
 800870c:	6123      	str	r3, [r4, #16]
 800870e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008712:	fa5f fa8a 	uxtb.w	sl, sl
 8008716:	f1ba 0f02 	cmp.w	sl, #2
 800871a:	d1ec      	bne.n	80086f6 <_scanf_float+0x2c6>
 800871c:	3d03      	subs	r5, #3
 800871e:	b2ed      	uxtb	r5, r5
 8008720:	1b76      	subs	r6, r6, r5
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	05da      	lsls	r2, r3, #23
 8008726:	d52f      	bpl.n	8008788 <_scanf_float+0x358>
 8008728:	055b      	lsls	r3, r3, #21
 800872a:	d510      	bpl.n	800874e <_scanf_float+0x31e>
 800872c:	455e      	cmp	r6, fp
 800872e:	f67f aebf 	bls.w	80084b0 <_scanf_float+0x80>
 8008732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008736:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800873a:	463a      	mov	r2, r7
 800873c:	4640      	mov	r0, r8
 800873e:	4798      	blx	r3
 8008740:	6923      	ldr	r3, [r4, #16]
 8008742:	3b01      	subs	r3, #1
 8008744:	6123      	str	r3, [r4, #16]
 8008746:	e7f1      	b.n	800872c <_scanf_float+0x2fc>
 8008748:	46aa      	mov	sl, r5
 800874a:	9602      	str	r6, [sp, #8]
 800874c:	e7df      	b.n	800870e <_scanf_float+0x2de>
 800874e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	2965      	cmp	r1, #101	; 0x65
 8008756:	f103 33ff 	add.w	r3, r3, #4294967295
 800875a:	f106 35ff 	add.w	r5, r6, #4294967295
 800875e:	6123      	str	r3, [r4, #16]
 8008760:	d00c      	beq.n	800877c <_scanf_float+0x34c>
 8008762:	2945      	cmp	r1, #69	; 0x45
 8008764:	d00a      	beq.n	800877c <_scanf_float+0x34c>
 8008766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800876a:	463a      	mov	r2, r7
 800876c:	4640      	mov	r0, r8
 800876e:	4798      	blx	r3
 8008770:	6923      	ldr	r3, [r4, #16]
 8008772:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008776:	3b01      	subs	r3, #1
 8008778:	1eb5      	subs	r5, r6, #2
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008780:	463a      	mov	r2, r7
 8008782:	4640      	mov	r0, r8
 8008784:	4798      	blx	r3
 8008786:	462e      	mov	r6, r5
 8008788:	6825      	ldr	r5, [r4, #0]
 800878a:	f015 0510 	ands.w	r5, r5, #16
 800878e:	d158      	bne.n	8008842 <_scanf_float+0x412>
 8008790:	7035      	strb	r5, [r6, #0]
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800879c:	d11c      	bne.n	80087d8 <_scanf_float+0x3a8>
 800879e:	9b01      	ldr	r3, [sp, #4]
 80087a0:	454b      	cmp	r3, r9
 80087a2:	eba3 0209 	sub.w	r2, r3, r9
 80087a6:	d124      	bne.n	80087f2 <_scanf_float+0x3c2>
 80087a8:	2200      	movs	r2, #0
 80087aa:	4659      	mov	r1, fp
 80087ac:	4640      	mov	r0, r8
 80087ae:	f001 f80d 	bl	80097cc <_strtod_r>
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	6821      	ldr	r1, [r4, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f011 0f02 	tst.w	r1, #2
 80087bc:	ec57 6b10 	vmov	r6, r7, d0
 80087c0:	f103 0204 	add.w	r2, r3, #4
 80087c4:	d020      	beq.n	8008808 <_scanf_float+0x3d8>
 80087c6:	9903      	ldr	r1, [sp, #12]
 80087c8:	600a      	str	r2, [r1, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	e9c3 6700 	strd	r6, r7, [r3]
 80087d0:	68e3      	ldr	r3, [r4, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60e3      	str	r3, [r4, #12]
 80087d6:	e66c      	b.n	80084b2 <_scanf_float+0x82>
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0e4      	beq.n	80087a8 <_scanf_float+0x378>
 80087de:	9905      	ldr	r1, [sp, #20]
 80087e0:	230a      	movs	r3, #10
 80087e2:	462a      	mov	r2, r5
 80087e4:	3101      	adds	r1, #1
 80087e6:	4640      	mov	r0, r8
 80087e8:	f001 f87a 	bl	80098e0 <_strtol_r>
 80087ec:	9b04      	ldr	r3, [sp, #16]
 80087ee:	9e05      	ldr	r6, [sp, #20]
 80087f0:	1ac2      	subs	r2, r0, r3
 80087f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087f6:	429e      	cmp	r6, r3
 80087f8:	bf28      	it	cs
 80087fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80087fe:	4912      	ldr	r1, [pc, #72]	; (8008848 <_scanf_float+0x418>)
 8008800:	4630      	mov	r0, r6
 8008802:	f000 f90d 	bl	8008a20 <siprintf>
 8008806:	e7cf      	b.n	80087a8 <_scanf_float+0x378>
 8008808:	f011 0f04 	tst.w	r1, #4
 800880c:	9903      	ldr	r1, [sp, #12]
 800880e:	600a      	str	r2, [r1, #0]
 8008810:	d1db      	bne.n	80087ca <_scanf_float+0x39a>
 8008812:	f8d3 8000 	ldr.w	r8, [r3]
 8008816:	ee10 2a10 	vmov	r2, s0
 800881a:	ee10 0a10 	vmov	r0, s0
 800881e:	463b      	mov	r3, r7
 8008820:	4639      	mov	r1, r7
 8008822:	f7f8 f98b 	bl	8000b3c <__aeabi_dcmpun>
 8008826:	b128      	cbz	r0, 8008834 <_scanf_float+0x404>
 8008828:	4808      	ldr	r0, [pc, #32]	; (800884c <_scanf_float+0x41c>)
 800882a:	f000 f8af 	bl	800898c <nanf>
 800882e:	ed88 0a00 	vstr	s0, [r8]
 8008832:	e7cd      	b.n	80087d0 <_scanf_float+0x3a0>
 8008834:	4630      	mov	r0, r6
 8008836:	4639      	mov	r1, r7
 8008838:	f7f8 f9de 	bl	8000bf8 <__aeabi_d2f>
 800883c:	f8c8 0000 	str.w	r0, [r8]
 8008840:	e7c6      	b.n	80087d0 <_scanf_float+0x3a0>
 8008842:	2500      	movs	r5, #0
 8008844:	e635      	b.n	80084b2 <_scanf_float+0x82>
 8008846:	bf00      	nop
 8008848:	0800ecf2 	.word	0x0800ecf2
 800884c:	0800f183 	.word	0x0800f183

08008850 <iprintf>:
 8008850:	b40f      	push	{r0, r1, r2, r3}
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <iprintf+0x2c>)
 8008854:	b513      	push	{r0, r1, r4, lr}
 8008856:	681c      	ldr	r4, [r3, #0]
 8008858:	b124      	cbz	r4, 8008864 <iprintf+0x14>
 800885a:	69a3      	ldr	r3, [r4, #24]
 800885c:	b913      	cbnz	r3, 8008864 <iprintf+0x14>
 800885e:	4620      	mov	r0, r4
 8008860:	f002 f90c 	bl	800aa7c <__sinit>
 8008864:	ab05      	add	r3, sp, #20
 8008866:	9a04      	ldr	r2, [sp, #16]
 8008868:	68a1      	ldr	r1, [r4, #8]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	4620      	mov	r0, r4
 800886e:	f003 fdcf 	bl	800c410 <_vfiprintf_r>
 8008872:	b002      	add	sp, #8
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	b004      	add	sp, #16
 800887a:	4770      	bx	lr
 800887c:	20000070 	.word	0x20000070

08008880 <_puts_r>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	460e      	mov	r6, r1
 8008884:	4605      	mov	r5, r0
 8008886:	b118      	cbz	r0, 8008890 <_puts_r+0x10>
 8008888:	6983      	ldr	r3, [r0, #24]
 800888a:	b90b      	cbnz	r3, 8008890 <_puts_r+0x10>
 800888c:	f002 f8f6 	bl	800aa7c <__sinit>
 8008890:	69ab      	ldr	r3, [r5, #24]
 8008892:	68ac      	ldr	r4, [r5, #8]
 8008894:	b913      	cbnz	r3, 800889c <_puts_r+0x1c>
 8008896:	4628      	mov	r0, r5
 8008898:	f002 f8f0 	bl	800aa7c <__sinit>
 800889c:	4b2c      	ldr	r3, [pc, #176]	; (8008950 <_puts_r+0xd0>)
 800889e:	429c      	cmp	r4, r3
 80088a0:	d120      	bne.n	80088e4 <_puts_r+0x64>
 80088a2:	686c      	ldr	r4, [r5, #4]
 80088a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a6:	07db      	lsls	r3, r3, #31
 80088a8:	d405      	bmi.n	80088b6 <_puts_r+0x36>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	0598      	lsls	r0, r3, #22
 80088ae:	d402      	bmi.n	80088b6 <_puts_r+0x36>
 80088b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b2:	f002 fcf4 	bl	800b29e <__retarget_lock_acquire_recursive>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	0719      	lsls	r1, r3, #28
 80088ba:	d51d      	bpl.n	80088f8 <_puts_r+0x78>
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	b1db      	cbz	r3, 80088f8 <_puts_r+0x78>
 80088c0:	3e01      	subs	r6, #1
 80088c2:	68a3      	ldr	r3, [r4, #8]
 80088c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088c8:	3b01      	subs	r3, #1
 80088ca:	60a3      	str	r3, [r4, #8]
 80088cc:	bb39      	cbnz	r1, 800891e <_puts_r+0x9e>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da38      	bge.n	8008944 <_puts_r+0xc4>
 80088d2:	4622      	mov	r2, r4
 80088d4:	210a      	movs	r1, #10
 80088d6:	4628      	mov	r0, r5
 80088d8:	f001 f85c 	bl	8009994 <__swbuf_r>
 80088dc:	3001      	adds	r0, #1
 80088de:	d011      	beq.n	8008904 <_puts_r+0x84>
 80088e0:	250a      	movs	r5, #10
 80088e2:	e011      	b.n	8008908 <_puts_r+0x88>
 80088e4:	4b1b      	ldr	r3, [pc, #108]	; (8008954 <_puts_r+0xd4>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d101      	bne.n	80088ee <_puts_r+0x6e>
 80088ea:	68ac      	ldr	r4, [r5, #8]
 80088ec:	e7da      	b.n	80088a4 <_puts_r+0x24>
 80088ee:	4b1a      	ldr	r3, [pc, #104]	; (8008958 <_puts_r+0xd8>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	bf08      	it	eq
 80088f4:	68ec      	ldreq	r4, [r5, #12]
 80088f6:	e7d5      	b.n	80088a4 <_puts_r+0x24>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f001 f8ae 	bl	8009a5c <__swsetup_r>
 8008900:	2800      	cmp	r0, #0
 8008902:	d0dd      	beq.n	80088c0 <_puts_r+0x40>
 8008904:	f04f 35ff 	mov.w	r5, #4294967295
 8008908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890a:	07da      	lsls	r2, r3, #31
 800890c:	d405      	bmi.n	800891a <_puts_r+0x9a>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	059b      	lsls	r3, r3, #22
 8008912:	d402      	bmi.n	800891a <_puts_r+0x9a>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f002 fcc3 	bl	800b2a0 <__retarget_lock_release_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	2b00      	cmp	r3, #0
 8008920:	da04      	bge.n	800892c <_puts_r+0xac>
 8008922:	69a2      	ldr	r2, [r4, #24]
 8008924:	429a      	cmp	r2, r3
 8008926:	dc06      	bgt.n	8008936 <_puts_r+0xb6>
 8008928:	290a      	cmp	r1, #10
 800892a:	d004      	beq.n	8008936 <_puts_r+0xb6>
 800892c:	6823      	ldr	r3, [r4, #0]
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	6022      	str	r2, [r4, #0]
 8008932:	7019      	strb	r1, [r3, #0]
 8008934:	e7c5      	b.n	80088c2 <_puts_r+0x42>
 8008936:	4622      	mov	r2, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f001 f82b 	bl	8009994 <__swbuf_r>
 800893e:	3001      	adds	r0, #1
 8008940:	d1bf      	bne.n	80088c2 <_puts_r+0x42>
 8008942:	e7df      	b.n	8008904 <_puts_r+0x84>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	250a      	movs	r5, #10
 8008948:	1c5a      	adds	r2, r3, #1
 800894a:	6022      	str	r2, [r4, #0]
 800894c:	701d      	strb	r5, [r3, #0]
 800894e:	e7db      	b.n	8008908 <_puts_r+0x88>
 8008950:	0800ef00 	.word	0x0800ef00
 8008954:	0800ef20 	.word	0x0800ef20
 8008958:	0800eee0 	.word	0x0800eee0

0800895c <puts>:
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <puts+0xc>)
 800895e:	4601      	mov	r1, r0
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	f7ff bf8d 	b.w	8008880 <_puts_r>
 8008966:	bf00      	nop
 8008968:	20000070 	.word	0x20000070

0800896c <_sbrk_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d06      	ldr	r5, [pc, #24]	; (8008988 <_sbrk_r+0x1c>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7fa ffc8 	bl	800390c <_sbrk>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_sbrk_r+0x1a>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_sbrk_r+0x1a>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20001860 	.word	0x20001860

0800898c <nanf>:
 800898c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008994 <nanf+0x8>
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	7fc00000 	.word	0x7fc00000

08008998 <_raise_r>:
 8008998:	291f      	cmp	r1, #31
 800899a:	b538      	push	{r3, r4, r5, lr}
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	d904      	bls.n	80089ac <_raise_r+0x14>
 80089a2:	2316      	movs	r3, #22
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089ae:	b112      	cbz	r2, 80089b6 <_raise_r+0x1e>
 80089b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089b4:	b94b      	cbnz	r3, 80089ca <_raise_r+0x32>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f830 	bl	8008a1c <_getpid_r>
 80089bc:	462a      	mov	r2, r5
 80089be:	4601      	mov	r1, r0
 80089c0:	4620      	mov	r0, r4
 80089c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c6:	f000 b817 	b.w	80089f8 <_kill_r>
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d00a      	beq.n	80089e4 <_raise_r+0x4c>
 80089ce:	1c59      	adds	r1, r3, #1
 80089d0:	d103      	bne.n	80089da <_raise_r+0x42>
 80089d2:	2316      	movs	r3, #22
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7e7      	b.n	80089aa <_raise_r+0x12>
 80089da:	2400      	movs	r4, #0
 80089dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e0:	4628      	mov	r0, r5
 80089e2:	4798      	blx	r3
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7e0      	b.n	80089aa <_raise_r+0x12>

080089e8 <raise>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <raise+0xc>)
 80089ea:	4601      	mov	r1, r0
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f7ff bfd3 	b.w	8008998 <_raise_r>
 80089f2:	bf00      	nop
 80089f4:	20000070 	.word	0x20000070

080089f8 <_kill_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	; (8008a18 <_kill_r+0x20>)
 80089fc:	2300      	movs	r3, #0
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	f7fa fef9 	bl	80037fc <_kill>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d102      	bne.n	8008a14 <_kill_r+0x1c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b103      	cbz	r3, 8008a14 <_kill_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	20001860 	.word	0x20001860

08008a1c <_getpid_r>:
 8008a1c:	f7fa bee6 	b.w	80037ec <_getpid>

08008a20 <siprintf>:
 8008a20:	b40e      	push	{r1, r2, r3}
 8008a22:	b500      	push	{lr}
 8008a24:	b09c      	sub	sp, #112	; 0x70
 8008a26:	ab1d      	add	r3, sp, #116	; 0x74
 8008a28:	9002      	str	r0, [sp, #8]
 8008a2a:	9006      	str	r0, [sp, #24]
 8008a2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a30:	4809      	ldr	r0, [pc, #36]	; (8008a58 <siprintf+0x38>)
 8008a32:	9107      	str	r1, [sp, #28]
 8008a34:	9104      	str	r1, [sp, #16]
 8008a36:	4909      	ldr	r1, [pc, #36]	; (8008a5c <siprintf+0x3c>)
 8008a38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a3c:	9105      	str	r1, [sp, #20]
 8008a3e:	6800      	ldr	r0, [r0, #0]
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	a902      	add	r1, sp, #8
 8008a44:	f003 f9e8 	bl	800be18 <_svfiprintf_r>
 8008a48:	9b02      	ldr	r3, [sp, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	b01c      	add	sp, #112	; 0x70
 8008a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a54:	b003      	add	sp, #12
 8008a56:	4770      	bx	lr
 8008a58:	20000070 	.word	0x20000070
 8008a5c:	ffff0208 	.word	0xffff0208

08008a60 <siscanf>:
 8008a60:	b40e      	push	{r1, r2, r3}
 8008a62:	b510      	push	{r4, lr}
 8008a64:	b09f      	sub	sp, #124	; 0x7c
 8008a66:	ac21      	add	r4, sp, #132	; 0x84
 8008a68:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008a6c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a70:	9201      	str	r2, [sp, #4]
 8008a72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008a76:	9004      	str	r0, [sp, #16]
 8008a78:	9008      	str	r0, [sp, #32]
 8008a7a:	f7f7 fbb1 	bl	80001e0 <strlen>
 8008a7e:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <siscanf+0x50>)
 8008a80:	9005      	str	r0, [sp, #20]
 8008a82:	9009      	str	r0, [sp, #36]	; 0x24
 8008a84:	930d      	str	r3, [sp, #52]	; 0x34
 8008a86:	480b      	ldr	r0, [pc, #44]	; (8008ab4 <siscanf+0x54>)
 8008a88:	9a01      	ldr	r2, [sp, #4]
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9403      	str	r4, [sp, #12]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9311      	str	r3, [sp, #68]	; 0x44
 8008a92:	9316      	str	r3, [sp, #88]	; 0x58
 8008a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008a9c:	a904      	add	r1, sp, #16
 8008a9e:	4623      	mov	r3, r4
 8008aa0:	f003 fb14 	bl	800c0cc <__ssvfiscanf_r>
 8008aa4:	b01f      	add	sp, #124	; 0x7c
 8008aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aaa:	b003      	add	sp, #12
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	08008adb 	.word	0x08008adb
 8008ab4:	20000070 	.word	0x20000070

08008ab8 <__sread>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac0:	f003 ff22 	bl	800c908 <_read_r>
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	bfab      	itete	ge
 8008ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aca:	89a3      	ldrhlt	r3, [r4, #12]
 8008acc:	181b      	addge	r3, r3, r0
 8008ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ad2:	bfac      	ite	ge
 8008ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ad6:	81a3      	strhlt	r3, [r4, #12]
 8008ad8:	bd10      	pop	{r4, pc}

08008ada <__seofread>:
 8008ada:	2000      	movs	r0, #0
 8008adc:	4770      	bx	lr

08008ade <__swrite>:
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	461f      	mov	r7, r3
 8008ae4:	898b      	ldrh	r3, [r1, #12]
 8008ae6:	05db      	lsls	r3, r3, #23
 8008ae8:	4605      	mov	r5, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4616      	mov	r6, r2
 8008aee:	d505      	bpl.n	8008afc <__swrite+0x1e>
 8008af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af4:	2302      	movs	r3, #2
 8008af6:	2200      	movs	r2, #0
 8008af8:	f002 fbd4 	bl	800b2a4 <_lseek_r>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	4632      	mov	r2, r6
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b12:	f000 bf91 	b.w	8009a38 <_write_r>

08008b16 <__sseek>:
 8008b16:	b510      	push	{r4, lr}
 8008b18:	460c      	mov	r4, r1
 8008b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1e:	f002 fbc1 	bl	800b2a4 <_lseek_r>
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	bf15      	itete	ne
 8008b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b32:	81a3      	strheq	r3, [r4, #12]
 8008b34:	bf18      	it	ne
 8008b36:	81a3      	strhne	r3, [r4, #12]
 8008b38:	bd10      	pop	{r4, pc}

08008b3a <__sclose>:
 8008b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b3e:	f000 bffb 	b.w	8009b38 <_close_r>

08008b42 <strcpy>:
 8008b42:	4603      	mov	r3, r0
 8008b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b48:	f803 2b01 	strb.w	r2, [r3], #1
 8008b4c:	2a00      	cmp	r2, #0
 8008b4e:	d1f9      	bne.n	8008b44 <strcpy+0x2>
 8008b50:	4770      	bx	lr

08008b52 <strstr>:
 8008b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b54:	780c      	ldrb	r4, [r1, #0]
 8008b56:	b164      	cbz	r4, 8008b72 <strstr+0x20>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	781a      	ldrb	r2, [r3, #0]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	1c5e      	adds	r6, r3, #1
 8008b60:	b90a      	cbnz	r2, 8008b66 <strstr+0x14>
 8008b62:	4610      	mov	r0, r2
 8008b64:	e005      	b.n	8008b72 <strstr+0x20>
 8008b66:	4294      	cmp	r4, r2
 8008b68:	d108      	bne.n	8008b7c <strstr+0x2a>
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8008b70:	b902      	cbnz	r2, 8008b74 <strstr+0x22>
 8008b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b74:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008b78:	4297      	cmp	r7, r2
 8008b7a:	d0f7      	beq.n	8008b6c <strstr+0x1a>
 8008b7c:	4633      	mov	r3, r6
 8008b7e:	e7ec      	b.n	8008b5a <strstr+0x8>

08008b80 <sulp>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4604      	mov	r4, r0
 8008b84:	460d      	mov	r5, r1
 8008b86:	ec45 4b10 	vmov	d0, r4, r5
 8008b8a:	4616      	mov	r6, r2
 8008b8c:	f002 ff8a 	bl	800baa4 <__ulp>
 8008b90:	ec51 0b10 	vmov	r0, r1, d0
 8008b94:	b17e      	cbz	r6, 8008bb6 <sulp+0x36>
 8008b96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd09      	ble.n	8008bb6 <sulp+0x36>
 8008ba2:	051b      	lsls	r3, r3, #20
 8008ba4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008ba8:	2400      	movs	r4, #0
 8008baa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008bae:	4622      	mov	r2, r4
 8008bb0:	462b      	mov	r3, r5
 8008bb2:	f7f7 fd29 	bl	8000608 <__aeabi_dmul>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}

08008bb8 <_strtod_l>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	b0a3      	sub	sp, #140	; 0x8c
 8008bbe:	461f      	mov	r7, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	931e      	str	r3, [sp, #120]	; 0x78
 8008bc4:	4ba4      	ldr	r3, [pc, #656]	; (8008e58 <_strtod_l+0x2a0>)
 8008bc6:	9219      	str	r2, [sp, #100]	; 0x64
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	4604      	mov	r4, r0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	4688      	mov	r8, r1
 8008bd2:	f7f7 fb05 	bl	80001e0 <strlen>
 8008bd6:	f04f 0a00 	mov.w	sl, #0
 8008bda:	4605      	mov	r5, r0
 8008bdc:	f04f 0b00 	mov.w	fp, #0
 8008be0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	2a2b      	cmp	r2, #43	; 0x2b
 8008bea:	d04c      	beq.n	8008c86 <_strtod_l+0xce>
 8008bec:	d839      	bhi.n	8008c62 <_strtod_l+0xaa>
 8008bee:	2a0d      	cmp	r2, #13
 8008bf0:	d832      	bhi.n	8008c58 <_strtod_l+0xa0>
 8008bf2:	2a08      	cmp	r2, #8
 8008bf4:	d832      	bhi.n	8008c5c <_strtod_l+0xa4>
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d03c      	beq.n	8008c74 <_strtod_l+0xbc>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	930e      	str	r3, [sp, #56]	; 0x38
 8008bfe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008c00:	7833      	ldrb	r3, [r6, #0]
 8008c02:	2b30      	cmp	r3, #48	; 0x30
 8008c04:	f040 80b4 	bne.w	8008d70 <_strtod_l+0x1b8>
 8008c08:	7873      	ldrb	r3, [r6, #1]
 8008c0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c0e:	2b58      	cmp	r3, #88	; 0x58
 8008c10:	d16c      	bne.n	8008cec <_strtod_l+0x134>
 8008c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	ab1e      	add	r3, sp, #120	; 0x78
 8008c18:	9702      	str	r7, [sp, #8]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4a8f      	ldr	r2, [pc, #572]	; (8008e5c <_strtod_l+0x2a4>)
 8008c1e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008c20:	a91d      	add	r1, sp, #116	; 0x74
 8008c22:	4620      	mov	r0, r4
 8008c24:	f002 f82e 	bl	800ac84 <__gethex>
 8008c28:	f010 0707 	ands.w	r7, r0, #7
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	d005      	beq.n	8008c3c <_strtod_l+0x84>
 8008c30:	2f06      	cmp	r7, #6
 8008c32:	d12a      	bne.n	8008c8a <_strtod_l+0xd2>
 8008c34:	3601      	adds	r6, #1
 8008c36:	2300      	movs	r3, #0
 8008c38:	961d      	str	r6, [sp, #116]	; 0x74
 8008c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8008c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f040 8596 	bne.w	8009770 <_strtod_l+0xbb8>
 8008c44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c46:	b1db      	cbz	r3, 8008c80 <_strtod_l+0xc8>
 8008c48:	4652      	mov	r2, sl
 8008c4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008c4e:	ec43 2b10 	vmov	d0, r2, r3
 8008c52:	b023      	add	sp, #140	; 0x8c
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	2a20      	cmp	r2, #32
 8008c5a:	d1ce      	bne.n	8008bfa <_strtod_l+0x42>
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	931d      	str	r3, [sp, #116]	; 0x74
 8008c60:	e7c0      	b.n	8008be4 <_strtod_l+0x2c>
 8008c62:	2a2d      	cmp	r2, #45	; 0x2d
 8008c64:	d1c9      	bne.n	8008bfa <_strtod_l+0x42>
 8008c66:	2201      	movs	r2, #1
 8008c68:	920e      	str	r2, [sp, #56]	; 0x38
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	921d      	str	r2, [sp, #116]	; 0x74
 8008c6e:	785b      	ldrb	r3, [r3, #1]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1c4      	bne.n	8008bfe <_strtod_l+0x46>
 8008c74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f040 8576 	bne.w	800976c <_strtod_l+0xbb4>
 8008c80:	4652      	mov	r2, sl
 8008c82:	465b      	mov	r3, fp
 8008c84:	e7e3      	b.n	8008c4e <_strtod_l+0x96>
 8008c86:	2200      	movs	r2, #0
 8008c88:	e7ee      	b.n	8008c68 <_strtod_l+0xb0>
 8008c8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008c8c:	b13a      	cbz	r2, 8008c9e <_strtod_l+0xe6>
 8008c8e:	2135      	movs	r1, #53	; 0x35
 8008c90:	a820      	add	r0, sp, #128	; 0x80
 8008c92:	f003 f812 	bl	800bcba <__copybits>
 8008c96:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f002 fbd7 	bl	800b44c <_Bfree>
 8008c9e:	3f01      	subs	r7, #1
 8008ca0:	2f05      	cmp	r7, #5
 8008ca2:	d807      	bhi.n	8008cb4 <_strtod_l+0xfc>
 8008ca4:	e8df f007 	tbb	[pc, r7]
 8008ca8:	1d180b0e 	.word	0x1d180b0e
 8008cac:	030e      	.short	0x030e
 8008cae:	f04f 0b00 	mov.w	fp, #0
 8008cb2:	46da      	mov	sl, fp
 8008cb4:	0728      	lsls	r0, r5, #28
 8008cb6:	d5c1      	bpl.n	8008c3c <_strtod_l+0x84>
 8008cb8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008cbc:	e7be      	b.n	8008c3c <_strtod_l+0x84>
 8008cbe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008cc2:	e7f7      	b.n	8008cb4 <_strtod_l+0xfc>
 8008cc4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008cc8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008cca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008cce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008cd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008cd6:	e7ed      	b.n	8008cb4 <_strtod_l+0xfc>
 8008cd8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008e60 <_strtod_l+0x2a8>
 8008cdc:	f04f 0a00 	mov.w	sl, #0
 8008ce0:	e7e8      	b.n	8008cb4 <_strtod_l+0xfc>
 8008ce2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ce6:	f04f 3aff 	mov.w	sl, #4294967295
 8008cea:	e7e3      	b.n	8008cb4 <_strtod_l+0xfc>
 8008cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	921d      	str	r2, [sp, #116]	; 0x74
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b30      	cmp	r3, #48	; 0x30
 8008cf6:	d0f9      	beq.n	8008cec <_strtod_l+0x134>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d09f      	beq.n	8008c3c <_strtod_l+0x84>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d06:	930a      	str	r3, [sp, #40]	; 0x28
 8008d08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d0c:	464f      	mov	r7, r9
 8008d0e:	220a      	movs	r2, #10
 8008d10:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008d12:	7806      	ldrb	r6, [r0, #0]
 8008d14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d18:	b2d9      	uxtb	r1, r3
 8008d1a:	2909      	cmp	r1, #9
 8008d1c:	d92a      	bls.n	8008d74 <_strtod_l+0x1bc>
 8008d1e:	9907      	ldr	r1, [sp, #28]
 8008d20:	462a      	mov	r2, r5
 8008d22:	f003 fe47 	bl	800c9b4 <strncmp>
 8008d26:	b398      	cbz	r0, 8008d90 <_strtod_l+0x1d8>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	4633      	mov	r3, r6
 8008d2c:	463d      	mov	r5, r7
 8008d2e:	9007      	str	r0, [sp, #28]
 8008d30:	4602      	mov	r2, r0
 8008d32:	2b65      	cmp	r3, #101	; 0x65
 8008d34:	d001      	beq.n	8008d3a <_strtod_l+0x182>
 8008d36:	2b45      	cmp	r3, #69	; 0x45
 8008d38:	d118      	bne.n	8008d6c <_strtod_l+0x1b4>
 8008d3a:	b91d      	cbnz	r5, 8008d44 <_strtod_l+0x18c>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	4303      	orrs	r3, r0
 8008d40:	d098      	beq.n	8008c74 <_strtod_l+0xbc>
 8008d42:	2500      	movs	r5, #0
 8008d44:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008d48:	f108 0301 	add.w	r3, r8, #1
 8008d4c:	931d      	str	r3, [sp, #116]	; 0x74
 8008d4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d52:	2b2b      	cmp	r3, #43	; 0x2b
 8008d54:	d075      	beq.n	8008e42 <_strtod_l+0x28a>
 8008d56:	2b2d      	cmp	r3, #45	; 0x2d
 8008d58:	d07b      	beq.n	8008e52 <_strtod_l+0x29a>
 8008d5a:	f04f 0c00 	mov.w	ip, #0
 8008d5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008d62:	2909      	cmp	r1, #9
 8008d64:	f240 8082 	bls.w	8008e6c <_strtod_l+0x2b4>
 8008d68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	e09d      	b.n	8008eac <_strtod_l+0x2f4>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e7c4      	b.n	8008cfe <_strtod_l+0x146>
 8008d74:	2f08      	cmp	r7, #8
 8008d76:	bfd8      	it	le
 8008d78:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008d7a:	f100 0001 	add.w	r0, r0, #1
 8008d7e:	bfda      	itte	le
 8008d80:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d84:	9309      	strle	r3, [sp, #36]	; 0x24
 8008d86:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008d8a:	3701      	adds	r7, #1
 8008d8c:	901d      	str	r0, [sp, #116]	; 0x74
 8008d8e:	e7bf      	b.n	8008d10 <_strtod_l+0x158>
 8008d90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d92:	195a      	adds	r2, r3, r5
 8008d94:	921d      	str	r2, [sp, #116]	; 0x74
 8008d96:	5d5b      	ldrb	r3, [r3, r5]
 8008d98:	2f00      	cmp	r7, #0
 8008d9a:	d037      	beq.n	8008e0c <_strtod_l+0x254>
 8008d9c:	9007      	str	r0, [sp, #28]
 8008d9e:	463d      	mov	r5, r7
 8008da0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008da4:	2a09      	cmp	r2, #9
 8008da6:	d912      	bls.n	8008dce <_strtod_l+0x216>
 8008da8:	2201      	movs	r2, #1
 8008daa:	e7c2      	b.n	8008d32 <_strtod_l+0x17a>
 8008dac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	921d      	str	r2, [sp, #116]	; 0x74
 8008db2:	785b      	ldrb	r3, [r3, #1]
 8008db4:	3001      	adds	r0, #1
 8008db6:	2b30      	cmp	r3, #48	; 0x30
 8008db8:	d0f8      	beq.n	8008dac <_strtod_l+0x1f4>
 8008dba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008dbe:	2a08      	cmp	r2, #8
 8008dc0:	f200 84db 	bhi.w	800977a <_strtod_l+0xbc2>
 8008dc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008dc6:	9007      	str	r0, [sp, #28]
 8008dc8:	2000      	movs	r0, #0
 8008dca:	920a      	str	r2, [sp, #40]	; 0x28
 8008dcc:	4605      	mov	r5, r0
 8008dce:	3b30      	subs	r3, #48	; 0x30
 8008dd0:	f100 0201 	add.w	r2, r0, #1
 8008dd4:	d014      	beq.n	8008e00 <_strtod_l+0x248>
 8008dd6:	9907      	ldr	r1, [sp, #28]
 8008dd8:	4411      	add	r1, r2
 8008dda:	9107      	str	r1, [sp, #28]
 8008ddc:	462a      	mov	r2, r5
 8008dde:	eb00 0e05 	add.w	lr, r0, r5
 8008de2:	210a      	movs	r1, #10
 8008de4:	4572      	cmp	r2, lr
 8008de6:	d113      	bne.n	8008e10 <_strtod_l+0x258>
 8008de8:	182a      	adds	r2, r5, r0
 8008dea:	2a08      	cmp	r2, #8
 8008dec:	f105 0501 	add.w	r5, r5, #1
 8008df0:	4405      	add	r5, r0
 8008df2:	dc1c      	bgt.n	8008e2e <_strtod_l+0x276>
 8008df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df6:	220a      	movs	r2, #10
 8008df8:	fb02 3301 	mla	r3, r2, r1, r3
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	2200      	movs	r2, #0
 8008e00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	911d      	str	r1, [sp, #116]	; 0x74
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	4610      	mov	r0, r2
 8008e0a:	e7c9      	b.n	8008da0 <_strtod_l+0x1e8>
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	e7d2      	b.n	8008db6 <_strtod_l+0x1fe>
 8008e10:	2a08      	cmp	r2, #8
 8008e12:	dc04      	bgt.n	8008e1e <_strtod_l+0x266>
 8008e14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008e16:	434e      	muls	r6, r1
 8008e18:	9609      	str	r6, [sp, #36]	; 0x24
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	e7e2      	b.n	8008de4 <_strtod_l+0x22c>
 8008e1e:	f102 0c01 	add.w	ip, r2, #1
 8008e22:	f1bc 0f10 	cmp.w	ip, #16
 8008e26:	bfd8      	it	le
 8008e28:	fb01 f909 	mulle.w	r9, r1, r9
 8008e2c:	e7f5      	b.n	8008e1a <_strtod_l+0x262>
 8008e2e:	2d10      	cmp	r5, #16
 8008e30:	bfdc      	itt	le
 8008e32:	220a      	movle	r2, #10
 8008e34:	fb02 3909 	mlale	r9, r2, r9, r3
 8008e38:	e7e1      	b.n	8008dfe <_strtod_l+0x246>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	9307      	str	r3, [sp, #28]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	e77c      	b.n	8008d3c <_strtod_l+0x184>
 8008e42:	f04f 0c00 	mov.w	ip, #0
 8008e46:	f108 0302 	add.w	r3, r8, #2
 8008e4a:	931d      	str	r3, [sp, #116]	; 0x74
 8008e4c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008e50:	e785      	b.n	8008d5e <_strtod_l+0x1a6>
 8008e52:	f04f 0c01 	mov.w	ip, #1
 8008e56:	e7f6      	b.n	8008e46 <_strtod_l+0x28e>
 8008e58:	0800efac 	.word	0x0800efac
 8008e5c:	0800ecf8 	.word	0x0800ecf8
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e66:	1c59      	adds	r1, r3, #1
 8008e68:	911d      	str	r1, [sp, #116]	; 0x74
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d0f9      	beq.n	8008e64 <_strtod_l+0x2ac>
 8008e70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008e74:	2908      	cmp	r1, #8
 8008e76:	f63f af79 	bhi.w	8008d6c <_strtod_l+0x1b4>
 8008e7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008e7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e84:	1c59      	adds	r1, r3, #1
 8008e86:	911d      	str	r1, [sp, #116]	; 0x74
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008e8e:	2e09      	cmp	r6, #9
 8008e90:	d937      	bls.n	8008f02 <_strtod_l+0x34a>
 8008e92:	9e08      	ldr	r6, [sp, #32]
 8008e94:	1b89      	subs	r1, r1, r6
 8008e96:	2908      	cmp	r1, #8
 8008e98:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008e9c:	dc02      	bgt.n	8008ea4 <_strtod_l+0x2ec>
 8008e9e:	4576      	cmp	r6, lr
 8008ea0:	bfa8      	it	ge
 8008ea2:	4676      	movge	r6, lr
 8008ea4:	f1bc 0f00 	cmp.w	ip, #0
 8008ea8:	d000      	beq.n	8008eac <_strtod_l+0x2f4>
 8008eaa:	4276      	negs	r6, r6
 8008eac:	2d00      	cmp	r5, #0
 8008eae:	d14f      	bne.n	8008f50 <_strtod_l+0x398>
 8008eb0:	9904      	ldr	r1, [sp, #16]
 8008eb2:	4301      	orrs	r1, r0
 8008eb4:	f47f aec2 	bne.w	8008c3c <_strtod_l+0x84>
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	f47f aedb 	bne.w	8008c74 <_strtod_l+0xbc>
 8008ebe:	2b69      	cmp	r3, #105	; 0x69
 8008ec0:	d027      	beq.n	8008f12 <_strtod_l+0x35a>
 8008ec2:	dc24      	bgt.n	8008f0e <_strtod_l+0x356>
 8008ec4:	2b49      	cmp	r3, #73	; 0x49
 8008ec6:	d024      	beq.n	8008f12 <_strtod_l+0x35a>
 8008ec8:	2b4e      	cmp	r3, #78	; 0x4e
 8008eca:	f47f aed3 	bne.w	8008c74 <_strtod_l+0xbc>
 8008ece:	499e      	ldr	r1, [pc, #632]	; (8009148 <_strtod_l+0x590>)
 8008ed0:	a81d      	add	r0, sp, #116	; 0x74
 8008ed2:	f002 f92f 	bl	800b134 <__match>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f43f aecc 	beq.w	8008c74 <_strtod_l+0xbc>
 8008edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b28      	cmp	r3, #40	; 0x28
 8008ee2:	d12d      	bne.n	8008f40 <_strtod_l+0x388>
 8008ee4:	4999      	ldr	r1, [pc, #612]	; (800914c <_strtod_l+0x594>)
 8008ee6:	aa20      	add	r2, sp, #128	; 0x80
 8008ee8:	a81d      	add	r0, sp, #116	; 0x74
 8008eea:	f002 f937 	bl	800b15c <__hexnan>
 8008eee:	2805      	cmp	r0, #5
 8008ef0:	d126      	bne.n	8008f40 <_strtod_l+0x388>
 8008ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008ef8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008efc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008f00:	e69c      	b.n	8008c3c <_strtod_l+0x84>
 8008f02:	210a      	movs	r1, #10
 8008f04:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008f08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008f0c:	e7b9      	b.n	8008e82 <_strtod_l+0x2ca>
 8008f0e:	2b6e      	cmp	r3, #110	; 0x6e
 8008f10:	e7db      	b.n	8008eca <_strtod_l+0x312>
 8008f12:	498f      	ldr	r1, [pc, #572]	; (8009150 <_strtod_l+0x598>)
 8008f14:	a81d      	add	r0, sp, #116	; 0x74
 8008f16:	f002 f90d 	bl	800b134 <__match>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	f43f aeaa 	beq.w	8008c74 <_strtod_l+0xbc>
 8008f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f22:	498c      	ldr	r1, [pc, #560]	; (8009154 <_strtod_l+0x59c>)
 8008f24:	3b01      	subs	r3, #1
 8008f26:	a81d      	add	r0, sp, #116	; 0x74
 8008f28:	931d      	str	r3, [sp, #116]	; 0x74
 8008f2a:	f002 f903 	bl	800b134 <__match>
 8008f2e:	b910      	cbnz	r0, 8008f36 <_strtod_l+0x37e>
 8008f30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f32:	3301      	adds	r3, #1
 8008f34:	931d      	str	r3, [sp, #116]	; 0x74
 8008f36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009164 <_strtod_l+0x5ac>
 8008f3a:	f04f 0a00 	mov.w	sl, #0
 8008f3e:	e67d      	b.n	8008c3c <_strtod_l+0x84>
 8008f40:	4885      	ldr	r0, [pc, #532]	; (8009158 <_strtod_l+0x5a0>)
 8008f42:	f003 fcf5 	bl	800c930 <nan>
 8008f46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008f4e:	e675      	b.n	8008c3c <_strtod_l+0x84>
 8008f50:	9b07      	ldr	r3, [sp, #28]
 8008f52:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f54:	1af3      	subs	r3, r6, r3
 8008f56:	2f00      	cmp	r7, #0
 8008f58:	bf08      	it	eq
 8008f5a:	462f      	moveq	r7, r5
 8008f5c:	2d10      	cmp	r5, #16
 8008f5e:	9308      	str	r3, [sp, #32]
 8008f60:	46a8      	mov	r8, r5
 8008f62:	bfa8      	it	ge
 8008f64:	f04f 0810 	movge.w	r8, #16
 8008f68:	f7f7 fad4 	bl	8000514 <__aeabi_ui2d>
 8008f6c:	2d09      	cmp	r5, #9
 8008f6e:	4682      	mov	sl, r0
 8008f70:	468b      	mov	fp, r1
 8008f72:	dd13      	ble.n	8008f9c <_strtod_l+0x3e4>
 8008f74:	4b79      	ldr	r3, [pc, #484]	; (800915c <_strtod_l+0x5a4>)
 8008f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008f7e:	f7f7 fb43 	bl	8000608 <__aeabi_dmul>
 8008f82:	4682      	mov	sl, r0
 8008f84:	4648      	mov	r0, r9
 8008f86:	468b      	mov	fp, r1
 8008f88:	f7f7 fac4 	bl	8000514 <__aeabi_ui2d>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4650      	mov	r0, sl
 8008f92:	4659      	mov	r1, fp
 8008f94:	f7f7 f982 	bl	800029c <__adddf3>
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	2d0f      	cmp	r5, #15
 8008f9e:	dc38      	bgt.n	8009012 <_strtod_l+0x45a>
 8008fa0:	9b08      	ldr	r3, [sp, #32]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f43f ae4a 	beq.w	8008c3c <_strtod_l+0x84>
 8008fa8:	dd24      	ble.n	8008ff4 <_strtod_l+0x43c>
 8008faa:	2b16      	cmp	r3, #22
 8008fac:	dc0b      	bgt.n	8008fc6 <_strtod_l+0x40e>
 8008fae:	4d6b      	ldr	r5, [pc, #428]	; (800915c <_strtod_l+0x5a4>)
 8008fb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008fb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008fb8:	4652      	mov	r2, sl
 8008fba:	465b      	mov	r3, fp
 8008fbc:	f7f7 fb24 	bl	8000608 <__aeabi_dmul>
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	e63a      	b.n	8008c3c <_strtod_l+0x84>
 8008fc6:	9a08      	ldr	r2, [sp, #32]
 8008fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	db20      	blt.n	8009012 <_strtod_l+0x45a>
 8008fd0:	4c62      	ldr	r4, [pc, #392]	; (800915c <_strtod_l+0x5a4>)
 8008fd2:	f1c5 050f 	rsb	r5, r5, #15
 8008fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	f7f7 fb11 	bl	8000608 <__aeabi_dmul>
 8008fe6:	9b08      	ldr	r3, [sp, #32]
 8008fe8:	1b5d      	subs	r5, r3, r5
 8008fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ff2:	e7e3      	b.n	8008fbc <_strtod_l+0x404>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	3316      	adds	r3, #22
 8008ff8:	db0b      	blt.n	8009012 <_strtod_l+0x45a>
 8008ffa:	9b07      	ldr	r3, [sp, #28]
 8008ffc:	4a57      	ldr	r2, [pc, #348]	; (800915c <_strtod_l+0x5a4>)
 8008ffe:	1b9e      	subs	r6, r3, r6
 8009000:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009004:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	f7f7 fc26 	bl	800085c <__aeabi_ddiv>
 8009010:	e7d6      	b.n	8008fc0 <_strtod_l+0x408>
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	eba5 0808 	sub.w	r8, r5, r8
 8009018:	4498      	add	r8, r3
 800901a:	f1b8 0f00 	cmp.w	r8, #0
 800901e:	dd71      	ble.n	8009104 <_strtod_l+0x54c>
 8009020:	f018 030f 	ands.w	r3, r8, #15
 8009024:	d00a      	beq.n	800903c <_strtod_l+0x484>
 8009026:	494d      	ldr	r1, [pc, #308]	; (800915c <_strtod_l+0x5a4>)
 8009028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800902c:	4652      	mov	r2, sl
 800902e:	465b      	mov	r3, fp
 8009030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009034:	f7f7 fae8 	bl	8000608 <__aeabi_dmul>
 8009038:	4682      	mov	sl, r0
 800903a:	468b      	mov	fp, r1
 800903c:	f038 080f 	bics.w	r8, r8, #15
 8009040:	d04d      	beq.n	80090de <_strtod_l+0x526>
 8009042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009046:	dd22      	ble.n	800908e <_strtod_l+0x4d6>
 8009048:	2500      	movs	r5, #0
 800904a:	462e      	mov	r6, r5
 800904c:	9509      	str	r5, [sp, #36]	; 0x24
 800904e:	9507      	str	r5, [sp, #28]
 8009050:	2322      	movs	r3, #34	; 0x22
 8009052:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009164 <_strtod_l+0x5ac>
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	f04f 0a00 	mov.w	sl, #0
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	f43f adec 	beq.w	8008c3c <_strtod_l+0x84>
 8009064:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009066:	4620      	mov	r0, r4
 8009068:	f002 f9f0 	bl	800b44c <_Bfree>
 800906c:	9907      	ldr	r1, [sp, #28]
 800906e:	4620      	mov	r0, r4
 8009070:	f002 f9ec 	bl	800b44c <_Bfree>
 8009074:	4631      	mov	r1, r6
 8009076:	4620      	mov	r0, r4
 8009078:	f002 f9e8 	bl	800b44c <_Bfree>
 800907c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800907e:	4620      	mov	r0, r4
 8009080:	f002 f9e4 	bl	800b44c <_Bfree>
 8009084:	4629      	mov	r1, r5
 8009086:	4620      	mov	r0, r4
 8009088:	f002 f9e0 	bl	800b44c <_Bfree>
 800908c:	e5d6      	b.n	8008c3c <_strtod_l+0x84>
 800908e:	2300      	movs	r3, #0
 8009090:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009094:	4650      	mov	r0, sl
 8009096:	4659      	mov	r1, fp
 8009098:	4699      	mov	r9, r3
 800909a:	f1b8 0f01 	cmp.w	r8, #1
 800909e:	dc21      	bgt.n	80090e4 <_strtod_l+0x52c>
 80090a0:	b10b      	cbz	r3, 80090a6 <_strtod_l+0x4ee>
 80090a2:	4682      	mov	sl, r0
 80090a4:	468b      	mov	fp, r1
 80090a6:	4b2e      	ldr	r3, [pc, #184]	; (8009160 <_strtod_l+0x5a8>)
 80090a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80090ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80090b0:	4652      	mov	r2, sl
 80090b2:	465b      	mov	r3, fp
 80090b4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80090b8:	f7f7 faa6 	bl	8000608 <__aeabi_dmul>
 80090bc:	4b29      	ldr	r3, [pc, #164]	; (8009164 <_strtod_l+0x5ac>)
 80090be:	460a      	mov	r2, r1
 80090c0:	400b      	ands	r3, r1
 80090c2:	4929      	ldr	r1, [pc, #164]	; (8009168 <_strtod_l+0x5b0>)
 80090c4:	428b      	cmp	r3, r1
 80090c6:	4682      	mov	sl, r0
 80090c8:	d8be      	bhi.n	8009048 <_strtod_l+0x490>
 80090ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80090ce:	428b      	cmp	r3, r1
 80090d0:	bf86      	itte	hi
 80090d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800916c <_strtod_l+0x5b4>
 80090d6:	f04f 3aff 	movhi.w	sl, #4294967295
 80090da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80090de:	2300      	movs	r3, #0
 80090e0:	9304      	str	r3, [sp, #16]
 80090e2:	e081      	b.n	80091e8 <_strtod_l+0x630>
 80090e4:	f018 0f01 	tst.w	r8, #1
 80090e8:	d007      	beq.n	80090fa <_strtod_l+0x542>
 80090ea:	4b1d      	ldr	r3, [pc, #116]	; (8009160 <_strtod_l+0x5a8>)
 80090ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fa88 	bl	8000608 <__aeabi_dmul>
 80090f8:	2301      	movs	r3, #1
 80090fa:	f109 0901 	add.w	r9, r9, #1
 80090fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009102:	e7ca      	b.n	800909a <_strtod_l+0x4e2>
 8009104:	d0eb      	beq.n	80090de <_strtod_l+0x526>
 8009106:	f1c8 0800 	rsb	r8, r8, #0
 800910a:	f018 020f 	ands.w	r2, r8, #15
 800910e:	d00a      	beq.n	8009126 <_strtod_l+0x56e>
 8009110:	4b12      	ldr	r3, [pc, #72]	; (800915c <_strtod_l+0x5a4>)
 8009112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009116:	4650      	mov	r0, sl
 8009118:	4659      	mov	r1, fp
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	f7f7 fb9d 	bl	800085c <__aeabi_ddiv>
 8009122:	4682      	mov	sl, r0
 8009124:	468b      	mov	fp, r1
 8009126:	ea5f 1828 	movs.w	r8, r8, asr #4
 800912a:	d0d8      	beq.n	80090de <_strtod_l+0x526>
 800912c:	f1b8 0f1f 	cmp.w	r8, #31
 8009130:	dd1e      	ble.n	8009170 <_strtod_l+0x5b8>
 8009132:	2500      	movs	r5, #0
 8009134:	462e      	mov	r6, r5
 8009136:	9509      	str	r5, [sp, #36]	; 0x24
 8009138:	9507      	str	r5, [sp, #28]
 800913a:	2322      	movs	r3, #34	; 0x22
 800913c:	f04f 0a00 	mov.w	sl, #0
 8009140:	f04f 0b00 	mov.w	fp, #0
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	e789      	b.n	800905c <_strtod_l+0x4a4>
 8009148:	0800eccd 	.word	0x0800eccd
 800914c:	0800ed0c 	.word	0x0800ed0c
 8009150:	0800ecc5 	.word	0x0800ecc5
 8009154:	0800ee4c 	.word	0x0800ee4c
 8009158:	0800f183 	.word	0x0800f183
 800915c:	0800f048 	.word	0x0800f048
 8009160:	0800f020 	.word	0x0800f020
 8009164:	7ff00000 	.word	0x7ff00000
 8009168:	7ca00000 	.word	0x7ca00000
 800916c:	7fefffff 	.word	0x7fefffff
 8009170:	f018 0310 	ands.w	r3, r8, #16
 8009174:	bf18      	it	ne
 8009176:	236a      	movne	r3, #106	; 0x6a
 8009178:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009530 <_strtod_l+0x978>
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	2300      	movs	r3, #0
 8009184:	f018 0f01 	tst.w	r8, #1
 8009188:	d004      	beq.n	8009194 <_strtod_l+0x5dc>
 800918a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800918e:	f7f7 fa3b 	bl	8000608 <__aeabi_dmul>
 8009192:	2301      	movs	r3, #1
 8009194:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009198:	f109 0908 	add.w	r9, r9, #8
 800919c:	d1f2      	bne.n	8009184 <_strtod_l+0x5cc>
 800919e:	b10b      	cbz	r3, 80091a4 <_strtod_l+0x5ec>
 80091a0:	4682      	mov	sl, r0
 80091a2:	468b      	mov	fp, r1
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	b1bb      	cbz	r3, 80091d8 <_strtod_l+0x620>
 80091a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80091ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	4659      	mov	r1, fp
 80091b4:	dd10      	ble.n	80091d8 <_strtod_l+0x620>
 80091b6:	2b1f      	cmp	r3, #31
 80091b8:	f340 8128 	ble.w	800940c <_strtod_l+0x854>
 80091bc:	2b34      	cmp	r3, #52	; 0x34
 80091be:	bfde      	ittt	le
 80091c0:	3b20      	suble	r3, #32
 80091c2:	f04f 32ff 	movle.w	r2, #4294967295
 80091c6:	fa02 f303 	lslle.w	r3, r2, r3
 80091ca:	f04f 0a00 	mov.w	sl, #0
 80091ce:	bfcc      	ite	gt
 80091d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80091d4:	ea03 0b01 	andle.w	fp, r3, r1
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	4650      	mov	r0, sl
 80091de:	4659      	mov	r1, fp
 80091e0:	f7f7 fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	d1a4      	bne.n	8009132 <_strtod_l+0x57a>
 80091e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80091ee:	462b      	mov	r3, r5
 80091f0:	463a      	mov	r2, r7
 80091f2:	4620      	mov	r0, r4
 80091f4:	f002 f996 	bl	800b524 <__s2b>
 80091f8:	9009      	str	r0, [sp, #36]	; 0x24
 80091fa:	2800      	cmp	r0, #0
 80091fc:	f43f af24 	beq.w	8009048 <_strtod_l+0x490>
 8009200:	9b07      	ldr	r3, [sp, #28]
 8009202:	1b9e      	subs	r6, r3, r6
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	2b00      	cmp	r3, #0
 8009208:	bfb4      	ite	lt
 800920a:	4633      	movlt	r3, r6
 800920c:	2300      	movge	r3, #0
 800920e:	9310      	str	r3, [sp, #64]	; 0x40
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	2500      	movs	r5, #0
 8009214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009218:	9318      	str	r3, [sp, #96]	; 0x60
 800921a:	462e      	mov	r6, r5
 800921c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921e:	4620      	mov	r0, r4
 8009220:	6859      	ldr	r1, [r3, #4]
 8009222:	f002 f8d3 	bl	800b3cc <_Balloc>
 8009226:	9007      	str	r0, [sp, #28]
 8009228:	2800      	cmp	r0, #0
 800922a:	f43f af11 	beq.w	8009050 <_strtod_l+0x498>
 800922e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009230:	691a      	ldr	r2, [r3, #16]
 8009232:	3202      	adds	r2, #2
 8009234:	f103 010c 	add.w	r1, r3, #12
 8009238:	0092      	lsls	r2, r2, #2
 800923a:	300c      	adds	r0, #12
 800923c:	f7fe fbce 	bl	80079dc <memcpy>
 8009240:	ec4b ab10 	vmov	d0, sl, fp
 8009244:	aa20      	add	r2, sp, #128	; 0x80
 8009246:	a91f      	add	r1, sp, #124	; 0x7c
 8009248:	4620      	mov	r0, r4
 800924a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800924e:	f002 fca5 	bl	800bb9c <__d2b>
 8009252:	901e      	str	r0, [sp, #120]	; 0x78
 8009254:	2800      	cmp	r0, #0
 8009256:	f43f aefb 	beq.w	8009050 <_strtod_l+0x498>
 800925a:	2101      	movs	r1, #1
 800925c:	4620      	mov	r0, r4
 800925e:	f002 f9fb 	bl	800b658 <__i2b>
 8009262:	4606      	mov	r6, r0
 8009264:	2800      	cmp	r0, #0
 8009266:	f43f aef3 	beq.w	8009050 <_strtod_l+0x498>
 800926a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800926c:	9904      	ldr	r1, [sp, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfab      	itete	ge
 8009272:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009274:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009276:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009278:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800927c:	bfac      	ite	ge
 800927e:	eb03 0902 	addge.w	r9, r3, r2
 8009282:	1ad7      	sublt	r7, r2, r3
 8009284:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009286:	eba3 0801 	sub.w	r8, r3, r1
 800928a:	4490      	add	r8, r2
 800928c:	4ba3      	ldr	r3, [pc, #652]	; (800951c <_strtod_l+0x964>)
 800928e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009292:	4598      	cmp	r8, r3
 8009294:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009298:	f280 80cc 	bge.w	8009434 <_strtod_l+0x87c>
 800929c:	eba3 0308 	sub.w	r3, r3, r8
 80092a0:	2b1f      	cmp	r3, #31
 80092a2:	eba2 0203 	sub.w	r2, r2, r3
 80092a6:	f04f 0101 	mov.w	r1, #1
 80092aa:	f300 80b6 	bgt.w	800941a <_strtod_l+0x862>
 80092ae:	fa01 f303 	lsl.w	r3, r1, r3
 80092b2:	9311      	str	r3, [sp, #68]	; 0x44
 80092b4:	2300      	movs	r3, #0
 80092b6:	930c      	str	r3, [sp, #48]	; 0x30
 80092b8:	eb09 0802 	add.w	r8, r9, r2
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	45c1      	cmp	r9, r8
 80092c0:	4417      	add	r7, r2
 80092c2:	441f      	add	r7, r3
 80092c4:	464b      	mov	r3, r9
 80092c6:	bfa8      	it	ge
 80092c8:	4643      	movge	r3, r8
 80092ca:	42bb      	cmp	r3, r7
 80092cc:	bfa8      	it	ge
 80092ce:	463b      	movge	r3, r7
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bfc2      	ittt	gt
 80092d4:	eba8 0803 	subgt.w	r8, r8, r3
 80092d8:	1aff      	subgt	r7, r7, r3
 80092da:	eba9 0903 	subgt.w	r9, r9, r3
 80092de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dd17      	ble.n	8009314 <_strtod_l+0x75c>
 80092e4:	4631      	mov	r1, r6
 80092e6:	461a      	mov	r2, r3
 80092e8:	4620      	mov	r0, r4
 80092ea:	f002 fa71 	bl	800b7d0 <__pow5mult>
 80092ee:	4606      	mov	r6, r0
 80092f0:	2800      	cmp	r0, #0
 80092f2:	f43f aead 	beq.w	8009050 <_strtod_l+0x498>
 80092f6:	4601      	mov	r1, r0
 80092f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80092fa:	4620      	mov	r0, r4
 80092fc:	f002 f9c2 	bl	800b684 <__multiply>
 8009300:	900f      	str	r0, [sp, #60]	; 0x3c
 8009302:	2800      	cmp	r0, #0
 8009304:	f43f aea4 	beq.w	8009050 <_strtod_l+0x498>
 8009308:	991e      	ldr	r1, [sp, #120]	; 0x78
 800930a:	4620      	mov	r0, r4
 800930c:	f002 f89e 	bl	800b44c <_Bfree>
 8009310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009312:	931e      	str	r3, [sp, #120]	; 0x78
 8009314:	f1b8 0f00 	cmp.w	r8, #0
 8009318:	f300 8091 	bgt.w	800943e <_strtod_l+0x886>
 800931c:	9b08      	ldr	r3, [sp, #32]
 800931e:	2b00      	cmp	r3, #0
 8009320:	dd08      	ble.n	8009334 <_strtod_l+0x77c>
 8009322:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009324:	9907      	ldr	r1, [sp, #28]
 8009326:	4620      	mov	r0, r4
 8009328:	f002 fa52 	bl	800b7d0 <__pow5mult>
 800932c:	9007      	str	r0, [sp, #28]
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f ae8e 	beq.w	8009050 <_strtod_l+0x498>
 8009334:	2f00      	cmp	r7, #0
 8009336:	dd08      	ble.n	800934a <_strtod_l+0x792>
 8009338:	9907      	ldr	r1, [sp, #28]
 800933a:	463a      	mov	r2, r7
 800933c:	4620      	mov	r0, r4
 800933e:	f002 faa1 	bl	800b884 <__lshift>
 8009342:	9007      	str	r0, [sp, #28]
 8009344:	2800      	cmp	r0, #0
 8009346:	f43f ae83 	beq.w	8009050 <_strtod_l+0x498>
 800934a:	f1b9 0f00 	cmp.w	r9, #0
 800934e:	dd08      	ble.n	8009362 <_strtod_l+0x7aa>
 8009350:	4631      	mov	r1, r6
 8009352:	464a      	mov	r2, r9
 8009354:	4620      	mov	r0, r4
 8009356:	f002 fa95 	bl	800b884 <__lshift>
 800935a:	4606      	mov	r6, r0
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f ae77 	beq.w	8009050 <_strtod_l+0x498>
 8009362:	9a07      	ldr	r2, [sp, #28]
 8009364:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009366:	4620      	mov	r0, r4
 8009368:	f002 fb14 	bl	800b994 <__mdiff>
 800936c:	4605      	mov	r5, r0
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f ae6e 	beq.w	8009050 <_strtod_l+0x498>
 8009374:	68c3      	ldr	r3, [r0, #12]
 8009376:	930f      	str	r3, [sp, #60]	; 0x3c
 8009378:	2300      	movs	r3, #0
 800937a:	60c3      	str	r3, [r0, #12]
 800937c:	4631      	mov	r1, r6
 800937e:	f002 faed 	bl	800b95c <__mcmp>
 8009382:	2800      	cmp	r0, #0
 8009384:	da65      	bge.n	8009452 <_strtod_l+0x89a>
 8009386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009388:	ea53 030a 	orrs.w	r3, r3, sl
 800938c:	f040 8087 	bne.w	800949e <_strtod_l+0x8e6>
 8009390:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009394:	2b00      	cmp	r3, #0
 8009396:	f040 8082 	bne.w	800949e <_strtod_l+0x8e6>
 800939a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800939e:	0d1b      	lsrs	r3, r3, #20
 80093a0:	051b      	lsls	r3, r3, #20
 80093a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093a6:	d97a      	bls.n	800949e <_strtod_l+0x8e6>
 80093a8:	696b      	ldr	r3, [r5, #20]
 80093aa:	b913      	cbnz	r3, 80093b2 <_strtod_l+0x7fa>
 80093ac:	692b      	ldr	r3, [r5, #16]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	dd75      	ble.n	800949e <_strtod_l+0x8e6>
 80093b2:	4629      	mov	r1, r5
 80093b4:	2201      	movs	r2, #1
 80093b6:	4620      	mov	r0, r4
 80093b8:	f002 fa64 	bl	800b884 <__lshift>
 80093bc:	4631      	mov	r1, r6
 80093be:	4605      	mov	r5, r0
 80093c0:	f002 facc 	bl	800b95c <__mcmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	dd6a      	ble.n	800949e <_strtod_l+0x8e6>
 80093c8:	9904      	ldr	r1, [sp, #16]
 80093ca:	4a55      	ldr	r2, [pc, #340]	; (8009520 <_strtod_l+0x968>)
 80093cc:	465b      	mov	r3, fp
 80093ce:	2900      	cmp	r1, #0
 80093d0:	f000 8085 	beq.w	80094de <_strtod_l+0x926>
 80093d4:	ea02 010b 	and.w	r1, r2, fp
 80093d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80093dc:	dc7f      	bgt.n	80094de <_strtod_l+0x926>
 80093de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80093e2:	f77f aeaa 	ble.w	800913a <_strtod_l+0x582>
 80093e6:	4a4f      	ldr	r2, [pc, #316]	; (8009524 <_strtod_l+0x96c>)
 80093e8:	2300      	movs	r3, #0
 80093ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80093ee:	4650      	mov	r0, sl
 80093f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80093f4:	4659      	mov	r1, fp
 80093f6:	f7f7 f907 	bl	8000608 <__aeabi_dmul>
 80093fa:	460b      	mov	r3, r1
 80093fc:	4303      	orrs	r3, r0
 80093fe:	bf08      	it	eq
 8009400:	2322      	moveq	r3, #34	; 0x22
 8009402:	4682      	mov	sl, r0
 8009404:	468b      	mov	fp, r1
 8009406:	bf08      	it	eq
 8009408:	6023      	streq	r3, [r4, #0]
 800940a:	e62b      	b.n	8009064 <_strtod_l+0x4ac>
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	ea03 0a0a 	and.w	sl, r3, sl
 8009418:	e6de      	b.n	80091d8 <_strtod_l+0x620>
 800941a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800941e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800942a:	fa01 f308 	lsl.w	r3, r1, r8
 800942e:	930c      	str	r3, [sp, #48]	; 0x30
 8009430:	9111      	str	r1, [sp, #68]	; 0x44
 8009432:	e741      	b.n	80092b8 <_strtod_l+0x700>
 8009434:	2300      	movs	r3, #0
 8009436:	930c      	str	r3, [sp, #48]	; 0x30
 8009438:	2301      	movs	r3, #1
 800943a:	9311      	str	r3, [sp, #68]	; 0x44
 800943c:	e73c      	b.n	80092b8 <_strtod_l+0x700>
 800943e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009440:	4642      	mov	r2, r8
 8009442:	4620      	mov	r0, r4
 8009444:	f002 fa1e 	bl	800b884 <__lshift>
 8009448:	901e      	str	r0, [sp, #120]	; 0x78
 800944a:	2800      	cmp	r0, #0
 800944c:	f47f af66 	bne.w	800931c <_strtod_l+0x764>
 8009450:	e5fe      	b.n	8009050 <_strtod_l+0x498>
 8009452:	465f      	mov	r7, fp
 8009454:	d16e      	bne.n	8009534 <_strtod_l+0x97c>
 8009456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800945c:	b342      	cbz	r2, 80094b0 <_strtod_l+0x8f8>
 800945e:	4a32      	ldr	r2, [pc, #200]	; (8009528 <_strtod_l+0x970>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d128      	bne.n	80094b6 <_strtod_l+0x8fe>
 8009464:	9b04      	ldr	r3, [sp, #16]
 8009466:	4650      	mov	r0, sl
 8009468:	b1eb      	cbz	r3, 80094a6 <_strtod_l+0x8ee>
 800946a:	4a2d      	ldr	r2, [pc, #180]	; (8009520 <_strtod_l+0x968>)
 800946c:	403a      	ands	r2, r7
 800946e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009472:	f04f 31ff 	mov.w	r1, #4294967295
 8009476:	d819      	bhi.n	80094ac <_strtod_l+0x8f4>
 8009478:	0d12      	lsrs	r2, r2, #20
 800947a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800947e:	fa01 f303 	lsl.w	r3, r1, r3
 8009482:	4298      	cmp	r0, r3
 8009484:	d117      	bne.n	80094b6 <_strtod_l+0x8fe>
 8009486:	4b29      	ldr	r3, [pc, #164]	; (800952c <_strtod_l+0x974>)
 8009488:	429f      	cmp	r7, r3
 800948a:	d102      	bne.n	8009492 <_strtod_l+0x8da>
 800948c:	3001      	adds	r0, #1
 800948e:	f43f addf 	beq.w	8009050 <_strtod_l+0x498>
 8009492:	4b23      	ldr	r3, [pc, #140]	; (8009520 <_strtod_l+0x968>)
 8009494:	403b      	ands	r3, r7
 8009496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800949a:	f04f 0a00 	mov.w	sl, #0
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1a0      	bne.n	80093e6 <_strtod_l+0x82e>
 80094a4:	e5de      	b.n	8009064 <_strtod_l+0x4ac>
 80094a6:	f04f 33ff 	mov.w	r3, #4294967295
 80094aa:	e7ea      	b.n	8009482 <_strtod_l+0x8ca>
 80094ac:	460b      	mov	r3, r1
 80094ae:	e7e8      	b.n	8009482 <_strtod_l+0x8ca>
 80094b0:	ea53 030a 	orrs.w	r3, r3, sl
 80094b4:	d088      	beq.n	80093c8 <_strtod_l+0x810>
 80094b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094b8:	b1db      	cbz	r3, 80094f2 <_strtod_l+0x93a>
 80094ba:	423b      	tst	r3, r7
 80094bc:	d0ef      	beq.n	800949e <_strtod_l+0x8e6>
 80094be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094c0:	9a04      	ldr	r2, [sp, #16]
 80094c2:	4650      	mov	r0, sl
 80094c4:	4659      	mov	r1, fp
 80094c6:	b1c3      	cbz	r3, 80094fa <_strtod_l+0x942>
 80094c8:	f7ff fb5a 	bl	8008b80 <sulp>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094d4:	f7f6 fee2 	bl	800029c <__adddf3>
 80094d8:	4682      	mov	sl, r0
 80094da:	468b      	mov	fp, r1
 80094dc:	e7df      	b.n	800949e <_strtod_l+0x8e6>
 80094de:	4013      	ands	r3, r2
 80094e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094ec:	f04f 3aff 	mov.w	sl, #4294967295
 80094f0:	e7d5      	b.n	800949e <_strtod_l+0x8e6>
 80094f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094f4:	ea13 0f0a 	tst.w	r3, sl
 80094f8:	e7e0      	b.n	80094bc <_strtod_l+0x904>
 80094fa:	f7ff fb41 	bl	8008b80 <sulp>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009506:	f7f6 fec7 	bl	8000298 <__aeabi_dsub>
 800950a:	2200      	movs	r2, #0
 800950c:	2300      	movs	r3, #0
 800950e:	4682      	mov	sl, r0
 8009510:	468b      	mov	fp, r1
 8009512:	f7f7 fae1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009516:	2800      	cmp	r0, #0
 8009518:	d0c1      	beq.n	800949e <_strtod_l+0x8e6>
 800951a:	e60e      	b.n	800913a <_strtod_l+0x582>
 800951c:	fffffc02 	.word	0xfffffc02
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	39500000 	.word	0x39500000
 8009528:	000fffff 	.word	0x000fffff
 800952c:	7fefffff 	.word	0x7fefffff
 8009530:	0800ed20 	.word	0x0800ed20
 8009534:	4631      	mov	r1, r6
 8009536:	4628      	mov	r0, r5
 8009538:	f002 fb8c 	bl	800bc54 <__ratio>
 800953c:	ec59 8b10 	vmov	r8, r9, d0
 8009540:	ee10 0a10 	vmov	r0, s0
 8009544:	2200      	movs	r2, #0
 8009546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800954a:	4649      	mov	r1, r9
 800954c:	f7f7 fad8 	bl	8000b00 <__aeabi_dcmple>
 8009550:	2800      	cmp	r0, #0
 8009552:	d07c      	beq.n	800964e <_strtod_l+0xa96>
 8009554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d04c      	beq.n	80095f4 <_strtod_l+0xa3c>
 800955a:	4b95      	ldr	r3, [pc, #596]	; (80097b0 <_strtod_l+0xbf8>)
 800955c:	2200      	movs	r2, #0
 800955e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009562:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80097b0 <_strtod_l+0xbf8>
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	4b92      	ldr	r3, [pc, #584]	; (80097b4 <_strtod_l+0xbfc>)
 800956c:	403b      	ands	r3, r7
 800956e:	9311      	str	r3, [sp, #68]	; 0x44
 8009570:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009572:	4b91      	ldr	r3, [pc, #580]	; (80097b8 <_strtod_l+0xc00>)
 8009574:	429a      	cmp	r2, r3
 8009576:	f040 80b2 	bne.w	80096de <_strtod_l+0xb26>
 800957a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800957e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009582:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009586:	ec4b ab10 	vmov	d0, sl, fp
 800958a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800958e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009592:	f002 fa87 	bl	800baa4 <__ulp>
 8009596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800959a:	ec53 2b10 	vmov	r2, r3, d0
 800959e:	f7f7 f833 	bl	8000608 <__aeabi_dmul>
 80095a2:	4652      	mov	r2, sl
 80095a4:	465b      	mov	r3, fp
 80095a6:	f7f6 fe79 	bl	800029c <__adddf3>
 80095aa:	460b      	mov	r3, r1
 80095ac:	4981      	ldr	r1, [pc, #516]	; (80097b4 <_strtod_l+0xbfc>)
 80095ae:	4a83      	ldr	r2, [pc, #524]	; (80097bc <_strtod_l+0xc04>)
 80095b0:	4019      	ands	r1, r3
 80095b2:	4291      	cmp	r1, r2
 80095b4:	4682      	mov	sl, r0
 80095b6:	d95e      	bls.n	8009676 <_strtod_l+0xabe>
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80095be:	4293      	cmp	r3, r2
 80095c0:	d103      	bne.n	80095ca <_strtod_l+0xa12>
 80095c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c4:	3301      	adds	r3, #1
 80095c6:	f43f ad43 	beq.w	8009050 <_strtod_l+0x498>
 80095ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80097c8 <_strtod_l+0xc10>
 80095ce:	f04f 3aff 	mov.w	sl, #4294967295
 80095d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80095d4:	4620      	mov	r0, r4
 80095d6:	f001 ff39 	bl	800b44c <_Bfree>
 80095da:	9907      	ldr	r1, [sp, #28]
 80095dc:	4620      	mov	r0, r4
 80095de:	f001 ff35 	bl	800b44c <_Bfree>
 80095e2:	4631      	mov	r1, r6
 80095e4:	4620      	mov	r0, r4
 80095e6:	f001 ff31 	bl	800b44c <_Bfree>
 80095ea:	4629      	mov	r1, r5
 80095ec:	4620      	mov	r0, r4
 80095ee:	f001 ff2d 	bl	800b44c <_Bfree>
 80095f2:	e613      	b.n	800921c <_strtod_l+0x664>
 80095f4:	f1ba 0f00 	cmp.w	sl, #0
 80095f8:	d11b      	bne.n	8009632 <_strtod_l+0xa7a>
 80095fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095fe:	b9f3      	cbnz	r3, 800963e <_strtod_l+0xa86>
 8009600:	4b6b      	ldr	r3, [pc, #428]	; (80097b0 <_strtod_l+0xbf8>)
 8009602:	2200      	movs	r2, #0
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	f7f7 fa70 	bl	8000aec <__aeabi_dcmplt>
 800960c:	b9d0      	cbnz	r0, 8009644 <_strtod_l+0xa8c>
 800960e:	4640      	mov	r0, r8
 8009610:	4649      	mov	r1, r9
 8009612:	4b6b      	ldr	r3, [pc, #428]	; (80097c0 <_strtod_l+0xc08>)
 8009614:	2200      	movs	r2, #0
 8009616:	f7f6 fff7 	bl	8000608 <__aeabi_dmul>
 800961a:	4680      	mov	r8, r0
 800961c:	4689      	mov	r9, r1
 800961e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009622:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009626:	931b      	str	r3, [sp, #108]	; 0x6c
 8009628:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800962c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009630:	e79b      	b.n	800956a <_strtod_l+0x9b2>
 8009632:	f1ba 0f01 	cmp.w	sl, #1
 8009636:	d102      	bne.n	800963e <_strtod_l+0xa86>
 8009638:	2f00      	cmp	r7, #0
 800963a:	f43f ad7e 	beq.w	800913a <_strtod_l+0x582>
 800963e:	4b61      	ldr	r3, [pc, #388]	; (80097c4 <_strtod_l+0xc0c>)
 8009640:	2200      	movs	r2, #0
 8009642:	e78c      	b.n	800955e <_strtod_l+0x9a6>
 8009644:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80097c0 <_strtod_l+0xc08>
 8009648:	f04f 0800 	mov.w	r8, #0
 800964c:	e7e7      	b.n	800961e <_strtod_l+0xa66>
 800964e:	4b5c      	ldr	r3, [pc, #368]	; (80097c0 <_strtod_l+0xc08>)
 8009650:	4640      	mov	r0, r8
 8009652:	4649      	mov	r1, r9
 8009654:	2200      	movs	r2, #0
 8009656:	f7f6 ffd7 	bl	8000608 <__aeabi_dmul>
 800965a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800965c:	4680      	mov	r8, r0
 800965e:	4689      	mov	r9, r1
 8009660:	b933      	cbnz	r3, 8009670 <_strtod_l+0xab8>
 8009662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009666:	9012      	str	r0, [sp, #72]	; 0x48
 8009668:	9313      	str	r3, [sp, #76]	; 0x4c
 800966a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800966e:	e7dd      	b.n	800962c <_strtod_l+0xa74>
 8009670:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009674:	e7f9      	b.n	800966a <_strtod_l+0xab2>
 8009676:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800967a:	9b04      	ldr	r3, [sp, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1a8      	bne.n	80095d2 <_strtod_l+0xa1a>
 8009680:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009684:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009686:	0d1b      	lsrs	r3, r3, #20
 8009688:	051b      	lsls	r3, r3, #20
 800968a:	429a      	cmp	r2, r3
 800968c:	d1a1      	bne.n	80095d2 <_strtod_l+0xa1a>
 800968e:	4640      	mov	r0, r8
 8009690:	4649      	mov	r1, r9
 8009692:	f7f7 fb19 	bl	8000cc8 <__aeabi_d2lz>
 8009696:	f7f6 ff89 	bl	80005ac <__aeabi_l2d>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4640      	mov	r0, r8
 80096a0:	4649      	mov	r1, r9
 80096a2:	f7f6 fdf9 	bl	8000298 <__aeabi_dsub>
 80096a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096ac:	ea43 030a 	orr.w	r3, r3, sl
 80096b0:	4313      	orrs	r3, r2
 80096b2:	4680      	mov	r8, r0
 80096b4:	4689      	mov	r9, r1
 80096b6:	d053      	beq.n	8009760 <_strtod_l+0xba8>
 80096b8:	a335      	add	r3, pc, #212	; (adr r3, 8009790 <_strtod_l+0xbd8>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f7 fa15 	bl	8000aec <__aeabi_dcmplt>
 80096c2:	2800      	cmp	r0, #0
 80096c4:	f47f acce 	bne.w	8009064 <_strtod_l+0x4ac>
 80096c8:	a333      	add	r3, pc, #204	; (adr r3, 8009798 <_strtod_l+0xbe0>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	4640      	mov	r0, r8
 80096d0:	4649      	mov	r1, r9
 80096d2:	f7f7 fa29 	bl	8000b28 <__aeabi_dcmpgt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f43f af7b 	beq.w	80095d2 <_strtod_l+0xa1a>
 80096dc:	e4c2      	b.n	8009064 <_strtod_l+0x4ac>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	b333      	cbz	r3, 8009730 <_strtod_l+0xb78>
 80096e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80096e8:	d822      	bhi.n	8009730 <_strtod_l+0xb78>
 80096ea:	a32d      	add	r3, pc, #180	; (adr r3, 80097a0 <_strtod_l+0xbe8>)
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	f7f7 fa04 	bl	8000b00 <__aeabi_dcmple>
 80096f8:	b1a0      	cbz	r0, 8009724 <_strtod_l+0xb6c>
 80096fa:	4649      	mov	r1, r9
 80096fc:	4640      	mov	r0, r8
 80096fe:	f7f7 fa5b 	bl	8000bb8 <__aeabi_d2uiz>
 8009702:	2801      	cmp	r0, #1
 8009704:	bf38      	it	cc
 8009706:	2001      	movcc	r0, #1
 8009708:	f7f6 ff04 	bl	8000514 <__aeabi_ui2d>
 800970c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970e:	4680      	mov	r8, r0
 8009710:	4689      	mov	r9, r1
 8009712:	bb13      	cbnz	r3, 800975a <_strtod_l+0xba2>
 8009714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009718:	9014      	str	r0, [sp, #80]	; 0x50
 800971a:	9315      	str	r3, [sp, #84]	; 0x54
 800971c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009720:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009728:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800972c:	1a9b      	subs	r3, r3, r2
 800972e:	930d      	str	r3, [sp, #52]	; 0x34
 8009730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009734:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800973c:	f002 f9b2 	bl	800baa4 <__ulp>
 8009740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009744:	ec53 2b10 	vmov	r2, r3, d0
 8009748:	f7f6 ff5e 	bl	8000608 <__aeabi_dmul>
 800974c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009750:	f7f6 fda4 	bl	800029c <__adddf3>
 8009754:	4682      	mov	sl, r0
 8009756:	468b      	mov	fp, r1
 8009758:	e78f      	b.n	800967a <_strtod_l+0xac2>
 800975a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800975e:	e7dd      	b.n	800971c <_strtod_l+0xb64>
 8009760:	a311      	add	r3, pc, #68	; (adr r3, 80097a8 <_strtod_l+0xbf0>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	f7f7 f9c1 	bl	8000aec <__aeabi_dcmplt>
 800976a:	e7b4      	b.n	80096d6 <_strtod_l+0xb1e>
 800976c:	2300      	movs	r3, #0
 800976e:	930e      	str	r3, [sp, #56]	; 0x38
 8009770:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009772:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	f7ff ba65 	b.w	8008c44 <_strtod_l+0x8c>
 800977a:	2b65      	cmp	r3, #101	; 0x65
 800977c:	f43f ab5d 	beq.w	8008e3a <_strtod_l+0x282>
 8009780:	2b45      	cmp	r3, #69	; 0x45
 8009782:	f43f ab5a 	beq.w	8008e3a <_strtod_l+0x282>
 8009786:	2201      	movs	r2, #1
 8009788:	f7ff bb92 	b.w	8008eb0 <_strtod_l+0x2f8>
 800978c:	f3af 8000 	nop.w
 8009790:	94a03595 	.word	0x94a03595
 8009794:	3fdfffff 	.word	0x3fdfffff
 8009798:	35afe535 	.word	0x35afe535
 800979c:	3fe00000 	.word	0x3fe00000
 80097a0:	ffc00000 	.word	0xffc00000
 80097a4:	41dfffff 	.word	0x41dfffff
 80097a8:	94a03595 	.word	0x94a03595
 80097ac:	3fcfffff 	.word	0x3fcfffff
 80097b0:	3ff00000 	.word	0x3ff00000
 80097b4:	7ff00000 	.word	0x7ff00000
 80097b8:	7fe00000 	.word	0x7fe00000
 80097bc:	7c9fffff 	.word	0x7c9fffff
 80097c0:	3fe00000 	.word	0x3fe00000
 80097c4:	bff00000 	.word	0xbff00000
 80097c8:	7fefffff 	.word	0x7fefffff

080097cc <_strtod_r>:
 80097cc:	4b01      	ldr	r3, [pc, #4]	; (80097d4 <_strtod_r+0x8>)
 80097ce:	f7ff b9f3 	b.w	8008bb8 <_strtod_l>
 80097d2:	bf00      	nop
 80097d4:	200000d8 	.word	0x200000d8

080097d8 <_strtol_l.isra.0>:
 80097d8:	2b01      	cmp	r3, #1
 80097da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097de:	d001      	beq.n	80097e4 <_strtol_l.isra.0+0xc>
 80097e0:	2b24      	cmp	r3, #36	; 0x24
 80097e2:	d906      	bls.n	80097f2 <_strtol_l.isra.0+0x1a>
 80097e4:	f7fe f8c0 	bl	8007968 <__errno>
 80097e8:	2316      	movs	r3, #22
 80097ea:	6003      	str	r3, [r0, #0]
 80097ec:	2000      	movs	r0, #0
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	4f3a      	ldr	r7, [pc, #232]	; (80098dc <_strtol_l.isra.0+0x104>)
 80097f4:	468e      	mov	lr, r1
 80097f6:	4676      	mov	r6, lr
 80097f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80097fc:	5de5      	ldrb	r5, [r4, r7]
 80097fe:	f015 0508 	ands.w	r5, r5, #8
 8009802:	d1f8      	bne.n	80097f6 <_strtol_l.isra.0+0x1e>
 8009804:	2c2d      	cmp	r4, #45	; 0x2d
 8009806:	d134      	bne.n	8009872 <_strtol_l.isra.0+0x9a>
 8009808:	f89e 4000 	ldrb.w	r4, [lr]
 800980c:	f04f 0801 	mov.w	r8, #1
 8009810:	f106 0e02 	add.w	lr, r6, #2
 8009814:	2b00      	cmp	r3, #0
 8009816:	d05c      	beq.n	80098d2 <_strtol_l.isra.0+0xfa>
 8009818:	2b10      	cmp	r3, #16
 800981a:	d10c      	bne.n	8009836 <_strtol_l.isra.0+0x5e>
 800981c:	2c30      	cmp	r4, #48	; 0x30
 800981e:	d10a      	bne.n	8009836 <_strtol_l.isra.0+0x5e>
 8009820:	f89e 4000 	ldrb.w	r4, [lr]
 8009824:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009828:	2c58      	cmp	r4, #88	; 0x58
 800982a:	d14d      	bne.n	80098c8 <_strtol_l.isra.0+0xf0>
 800982c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009830:	2310      	movs	r3, #16
 8009832:	f10e 0e02 	add.w	lr, lr, #2
 8009836:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800983a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800983e:	2600      	movs	r6, #0
 8009840:	fbbc f9f3 	udiv	r9, ip, r3
 8009844:	4635      	mov	r5, r6
 8009846:	fb03 ca19 	mls	sl, r3, r9, ip
 800984a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800984e:	2f09      	cmp	r7, #9
 8009850:	d818      	bhi.n	8009884 <_strtol_l.isra.0+0xac>
 8009852:	463c      	mov	r4, r7
 8009854:	42a3      	cmp	r3, r4
 8009856:	dd24      	ble.n	80098a2 <_strtol_l.isra.0+0xca>
 8009858:	2e00      	cmp	r6, #0
 800985a:	db1f      	blt.n	800989c <_strtol_l.isra.0+0xc4>
 800985c:	45a9      	cmp	r9, r5
 800985e:	d31d      	bcc.n	800989c <_strtol_l.isra.0+0xc4>
 8009860:	d101      	bne.n	8009866 <_strtol_l.isra.0+0x8e>
 8009862:	45a2      	cmp	sl, r4
 8009864:	db1a      	blt.n	800989c <_strtol_l.isra.0+0xc4>
 8009866:	fb05 4503 	mla	r5, r5, r3, r4
 800986a:	2601      	movs	r6, #1
 800986c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009870:	e7eb      	b.n	800984a <_strtol_l.isra.0+0x72>
 8009872:	2c2b      	cmp	r4, #43	; 0x2b
 8009874:	bf08      	it	eq
 8009876:	f89e 4000 	ldrbeq.w	r4, [lr]
 800987a:	46a8      	mov	r8, r5
 800987c:	bf08      	it	eq
 800987e:	f106 0e02 	addeq.w	lr, r6, #2
 8009882:	e7c7      	b.n	8009814 <_strtol_l.isra.0+0x3c>
 8009884:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009888:	2f19      	cmp	r7, #25
 800988a:	d801      	bhi.n	8009890 <_strtol_l.isra.0+0xb8>
 800988c:	3c37      	subs	r4, #55	; 0x37
 800988e:	e7e1      	b.n	8009854 <_strtol_l.isra.0+0x7c>
 8009890:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009894:	2f19      	cmp	r7, #25
 8009896:	d804      	bhi.n	80098a2 <_strtol_l.isra.0+0xca>
 8009898:	3c57      	subs	r4, #87	; 0x57
 800989a:	e7db      	b.n	8009854 <_strtol_l.isra.0+0x7c>
 800989c:	f04f 36ff 	mov.w	r6, #4294967295
 80098a0:	e7e4      	b.n	800986c <_strtol_l.isra.0+0x94>
 80098a2:	2e00      	cmp	r6, #0
 80098a4:	da05      	bge.n	80098b2 <_strtol_l.isra.0+0xda>
 80098a6:	2322      	movs	r3, #34	; 0x22
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	4665      	mov	r5, ip
 80098ac:	b942      	cbnz	r2, 80098c0 <_strtol_l.isra.0+0xe8>
 80098ae:	4628      	mov	r0, r5
 80098b0:	e79d      	b.n	80097ee <_strtol_l.isra.0+0x16>
 80098b2:	f1b8 0f00 	cmp.w	r8, #0
 80098b6:	d000      	beq.n	80098ba <_strtol_l.isra.0+0xe2>
 80098b8:	426d      	negs	r5, r5
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	d0f7      	beq.n	80098ae <_strtol_l.isra.0+0xd6>
 80098be:	b10e      	cbz	r6, 80098c4 <_strtol_l.isra.0+0xec>
 80098c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	e7f2      	b.n	80098ae <_strtol_l.isra.0+0xd6>
 80098c8:	2430      	movs	r4, #48	; 0x30
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1b3      	bne.n	8009836 <_strtol_l.isra.0+0x5e>
 80098ce:	2308      	movs	r3, #8
 80098d0:	e7b1      	b.n	8009836 <_strtol_l.isra.0+0x5e>
 80098d2:	2c30      	cmp	r4, #48	; 0x30
 80098d4:	d0a4      	beq.n	8009820 <_strtol_l.isra.0+0x48>
 80098d6:	230a      	movs	r3, #10
 80098d8:	e7ad      	b.n	8009836 <_strtol_l.isra.0+0x5e>
 80098da:	bf00      	nop
 80098dc:	0800ed49 	.word	0x0800ed49

080098e0 <_strtol_r>:
 80098e0:	f7ff bf7a 	b.w	80097d8 <_strtol_l.isra.0>

080098e4 <strtol>:
 80098e4:	4613      	mov	r3, r2
 80098e6:	460a      	mov	r2, r1
 80098e8:	4601      	mov	r1, r0
 80098ea:	4802      	ldr	r0, [pc, #8]	; (80098f4 <strtol+0x10>)
 80098ec:	6800      	ldr	r0, [r0, #0]
 80098ee:	f7ff bf73 	b.w	80097d8 <_strtol_l.isra.0>
 80098f2:	bf00      	nop
 80098f4:	20000070 	.word	0x20000070

080098f8 <_vsiprintf_r>:
 80098f8:	b500      	push	{lr}
 80098fa:	b09b      	sub	sp, #108	; 0x6c
 80098fc:	9100      	str	r1, [sp, #0]
 80098fe:	9104      	str	r1, [sp, #16]
 8009900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009904:	9105      	str	r1, [sp, #20]
 8009906:	9102      	str	r1, [sp, #8]
 8009908:	4905      	ldr	r1, [pc, #20]	; (8009920 <_vsiprintf_r+0x28>)
 800990a:	9103      	str	r1, [sp, #12]
 800990c:	4669      	mov	r1, sp
 800990e:	f002 fa83 	bl	800be18 <_svfiprintf_r>
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	2200      	movs	r2, #0
 8009916:	701a      	strb	r2, [r3, #0]
 8009918:	b01b      	add	sp, #108	; 0x6c
 800991a:	f85d fb04 	ldr.w	pc, [sp], #4
 800991e:	bf00      	nop
 8009920:	ffff0208 	.word	0xffff0208

08009924 <vsiprintf>:
 8009924:	4613      	mov	r3, r2
 8009926:	460a      	mov	r2, r1
 8009928:	4601      	mov	r1, r0
 800992a:	4802      	ldr	r0, [pc, #8]	; (8009934 <vsiprintf+0x10>)
 800992c:	6800      	ldr	r0, [r0, #0]
 800992e:	f7ff bfe3 	b.w	80098f8 <_vsiprintf_r>
 8009932:	bf00      	nop
 8009934:	20000070 	.word	0x20000070

08009938 <_vsiscanf_r>:
 8009938:	b510      	push	{r4, lr}
 800993a:	b09c      	sub	sp, #112	; 0x70
 800993c:	4604      	mov	r4, r0
 800993e:	f44f 7001 	mov.w	r0, #516	; 0x204
 8009942:	f8ad 0014 	strh.w	r0, [sp, #20]
 8009946:	4608      	mov	r0, r1
 8009948:	e9cd 3200 	strd	r3, r2, [sp]
 800994c:	9102      	str	r1, [sp, #8]
 800994e:	9106      	str	r1, [sp, #24]
 8009950:	f7f6 fc46 	bl	80001e0 <strlen>
 8009954:	4909      	ldr	r1, [pc, #36]	; (800997c <_vsiscanf_r+0x44>)
 8009956:	910b      	str	r1, [sp, #44]	; 0x2c
 8009958:	2100      	movs	r1, #0
 800995a:	910f      	str	r1, [sp, #60]	; 0x3c
 800995c:	9114      	str	r1, [sp, #80]	; 0x50
 800995e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009962:	9003      	str	r0, [sp, #12]
 8009964:	9007      	str	r0, [sp, #28]
 8009966:	f8ad 1016 	strh.w	r1, [sp, #22]
 800996a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800996e:	a902      	add	r1, sp, #8
 8009970:	4620      	mov	r0, r4
 8009972:	f002 fbab 	bl	800c0cc <__ssvfiscanf_r>
 8009976:	b01c      	add	sp, #112	; 0x70
 8009978:	bd10      	pop	{r4, pc}
 800997a:	bf00      	nop
 800997c:	08008adb 	.word	0x08008adb

08009980 <vsiscanf>:
 8009980:	4613      	mov	r3, r2
 8009982:	460a      	mov	r2, r1
 8009984:	4601      	mov	r1, r0
 8009986:	4802      	ldr	r0, [pc, #8]	; (8009990 <vsiscanf+0x10>)
 8009988:	6800      	ldr	r0, [r0, #0]
 800998a:	f7ff bfd5 	b.w	8009938 <_vsiscanf_r>
 800998e:	bf00      	nop
 8009990:	20000070 	.word	0x20000070

08009994 <__swbuf_r>:
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	4614      	mov	r4, r2
 800999a:	4605      	mov	r5, r0
 800999c:	b118      	cbz	r0, 80099a6 <__swbuf_r+0x12>
 800999e:	6983      	ldr	r3, [r0, #24]
 80099a0:	b90b      	cbnz	r3, 80099a6 <__swbuf_r+0x12>
 80099a2:	f001 f86b 	bl	800aa7c <__sinit>
 80099a6:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <__swbuf_r+0x98>)
 80099a8:	429c      	cmp	r4, r3
 80099aa:	d12b      	bne.n	8009a04 <__swbuf_r+0x70>
 80099ac:	686c      	ldr	r4, [r5, #4]
 80099ae:	69a3      	ldr	r3, [r4, #24]
 80099b0:	60a3      	str	r3, [r4, #8]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	071a      	lsls	r2, r3, #28
 80099b6:	d52f      	bpl.n	8009a18 <__swbuf_r+0x84>
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b36b      	cbz	r3, 8009a18 <__swbuf_r+0x84>
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	6820      	ldr	r0, [r4, #0]
 80099c0:	1ac0      	subs	r0, r0, r3
 80099c2:	6963      	ldr	r3, [r4, #20]
 80099c4:	b2f6      	uxtb	r6, r6
 80099c6:	4283      	cmp	r3, r0
 80099c8:	4637      	mov	r7, r6
 80099ca:	dc04      	bgt.n	80099d6 <__swbuf_r+0x42>
 80099cc:	4621      	mov	r1, r4
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 ffc0 	bl	800a954 <_fflush_r>
 80099d4:	bb30      	cbnz	r0, 8009a24 <__swbuf_r+0x90>
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	3b01      	subs	r3, #1
 80099da:	60a3      	str	r3, [r4, #8]
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	6022      	str	r2, [r4, #0]
 80099e2:	701e      	strb	r6, [r3, #0]
 80099e4:	6963      	ldr	r3, [r4, #20]
 80099e6:	3001      	adds	r0, #1
 80099e8:	4283      	cmp	r3, r0
 80099ea:	d004      	beq.n	80099f6 <__swbuf_r+0x62>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	07db      	lsls	r3, r3, #31
 80099f0:	d506      	bpl.n	8009a00 <__swbuf_r+0x6c>
 80099f2:	2e0a      	cmp	r6, #10
 80099f4:	d104      	bne.n	8009a00 <__swbuf_r+0x6c>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 ffab 	bl	800a954 <_fflush_r>
 80099fe:	b988      	cbnz	r0, 8009a24 <__swbuf_r+0x90>
 8009a00:	4638      	mov	r0, r7
 8009a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a04:	4b0a      	ldr	r3, [pc, #40]	; (8009a30 <__swbuf_r+0x9c>)
 8009a06:	429c      	cmp	r4, r3
 8009a08:	d101      	bne.n	8009a0e <__swbuf_r+0x7a>
 8009a0a:	68ac      	ldr	r4, [r5, #8]
 8009a0c:	e7cf      	b.n	80099ae <__swbuf_r+0x1a>
 8009a0e:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <__swbuf_r+0xa0>)
 8009a10:	429c      	cmp	r4, r3
 8009a12:	bf08      	it	eq
 8009a14:	68ec      	ldreq	r4, [r5, #12]
 8009a16:	e7ca      	b.n	80099ae <__swbuf_r+0x1a>
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f81e 	bl	8009a5c <__swsetup_r>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d0cb      	beq.n	80099bc <__swbuf_r+0x28>
 8009a24:	f04f 37ff 	mov.w	r7, #4294967295
 8009a28:	e7ea      	b.n	8009a00 <__swbuf_r+0x6c>
 8009a2a:	bf00      	nop
 8009a2c:	0800ef00 	.word	0x0800ef00
 8009a30:	0800ef20 	.word	0x0800ef20
 8009a34:	0800eee0 	.word	0x0800eee0

08009a38 <_write_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_write_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f9 ff0f 	bl	800386a <_write>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_write_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_write_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20001860 	.word	0x20001860

08009a5c <__swsetup_r>:
 8009a5c:	4b32      	ldr	r3, [pc, #200]	; (8009b28 <__swsetup_r+0xcc>)
 8009a5e:	b570      	push	{r4, r5, r6, lr}
 8009a60:	681d      	ldr	r5, [r3, #0]
 8009a62:	4606      	mov	r6, r0
 8009a64:	460c      	mov	r4, r1
 8009a66:	b125      	cbz	r5, 8009a72 <__swsetup_r+0x16>
 8009a68:	69ab      	ldr	r3, [r5, #24]
 8009a6a:	b913      	cbnz	r3, 8009a72 <__swsetup_r+0x16>
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	f001 f805 	bl	800aa7c <__sinit>
 8009a72:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <__swsetup_r+0xd0>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	d10f      	bne.n	8009a98 <__swsetup_r+0x3c>
 8009a78:	686c      	ldr	r4, [r5, #4]
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a80:	0719      	lsls	r1, r3, #28
 8009a82:	d42c      	bmi.n	8009ade <__swsetup_r+0x82>
 8009a84:	06dd      	lsls	r5, r3, #27
 8009a86:	d411      	bmi.n	8009aac <__swsetup_r+0x50>
 8009a88:	2309      	movs	r3, #9
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a90:	81a3      	strh	r3, [r4, #12]
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	e03e      	b.n	8009b16 <__swsetup_r+0xba>
 8009a98:	4b25      	ldr	r3, [pc, #148]	; (8009b30 <__swsetup_r+0xd4>)
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	d101      	bne.n	8009aa2 <__swsetup_r+0x46>
 8009a9e:	68ac      	ldr	r4, [r5, #8]
 8009aa0:	e7eb      	b.n	8009a7a <__swsetup_r+0x1e>
 8009aa2:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <__swsetup_r+0xd8>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	bf08      	it	eq
 8009aa8:	68ec      	ldreq	r4, [r5, #12]
 8009aaa:	e7e6      	b.n	8009a7a <__swsetup_r+0x1e>
 8009aac:	0758      	lsls	r0, r3, #29
 8009aae:	d512      	bpl.n	8009ad6 <__swsetup_r+0x7a>
 8009ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ab2:	b141      	cbz	r1, 8009ac6 <__swsetup_r+0x6a>
 8009ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d002      	beq.n	8009ac2 <__swsetup_r+0x66>
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7fd ffa3 	bl	8007a08 <_free_r>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009acc:	81a3      	strh	r3, [r4, #12]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	6063      	str	r3, [r4, #4]
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	f043 0308 	orr.w	r3, r3, #8
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	6923      	ldr	r3, [r4, #16]
 8009ae0:	b94b      	cbnz	r3, 8009af6 <__swsetup_r+0x9a>
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009aec:	d003      	beq.n	8009af6 <__swsetup_r+0x9a>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4630      	mov	r0, r6
 8009af2:	f001 fc0d 	bl	800b310 <__smakebuf_r>
 8009af6:	89a0      	ldrh	r0, [r4, #12]
 8009af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009afc:	f010 0301 	ands.w	r3, r0, #1
 8009b00:	d00a      	beq.n	8009b18 <__swsetup_r+0xbc>
 8009b02:	2300      	movs	r3, #0
 8009b04:	60a3      	str	r3, [r4, #8]
 8009b06:	6963      	ldr	r3, [r4, #20]
 8009b08:	425b      	negs	r3, r3
 8009b0a:	61a3      	str	r3, [r4, #24]
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	b943      	cbnz	r3, 8009b22 <__swsetup_r+0xc6>
 8009b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b14:	d1ba      	bne.n	8009a8c <__swsetup_r+0x30>
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	0781      	lsls	r1, r0, #30
 8009b1a:	bf58      	it	pl
 8009b1c:	6963      	ldrpl	r3, [r4, #20]
 8009b1e:	60a3      	str	r3, [r4, #8]
 8009b20:	e7f4      	b.n	8009b0c <__swsetup_r+0xb0>
 8009b22:	2000      	movs	r0, #0
 8009b24:	e7f7      	b.n	8009b16 <__swsetup_r+0xba>
 8009b26:	bf00      	nop
 8009b28:	20000070 	.word	0x20000070
 8009b2c:	0800ef00 	.word	0x0800ef00
 8009b30:	0800ef20 	.word	0x0800ef20
 8009b34:	0800eee0 	.word	0x0800eee0

08009b38 <_close_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	; (8009b54 <_close_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7f9 fead 	bl	80038a2 <_close>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_close_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_close_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20001860 	.word	0x20001860

08009b58 <quorem>:
 8009b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	6903      	ldr	r3, [r0, #16]
 8009b5e:	690c      	ldr	r4, [r1, #16]
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	4607      	mov	r7, r0
 8009b64:	f2c0 8081 	blt.w	8009c6a <quorem+0x112>
 8009b68:	3c01      	subs	r4, #1
 8009b6a:	f101 0814 	add.w	r8, r1, #20
 8009b6e:	f100 0514 	add.w	r5, r0, #20
 8009b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b80:	3301      	adds	r3, #1
 8009b82:	429a      	cmp	r2, r3
 8009b84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b90:	d331      	bcc.n	8009bf6 <quorem+0x9e>
 8009b92:	f04f 0e00 	mov.w	lr, #0
 8009b96:	4640      	mov	r0, r8
 8009b98:	46ac      	mov	ip, r5
 8009b9a:	46f2      	mov	sl, lr
 8009b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ba0:	b293      	uxth	r3, r2
 8009ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8009ba6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	ebaa 0303 	sub.w	r3, sl, r3
 8009bb0:	0c12      	lsrs	r2, r2, #16
 8009bb2:	f8dc a000 	ldr.w	sl, [ip]
 8009bb6:	fb06 e202 	mla	r2, r6, r2, lr
 8009bba:	fa13 f38a 	uxtah	r3, r3, sl
 8009bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bc2:	fa1f fa82 	uxth.w	sl, r2
 8009bc6:	f8dc 2000 	ldr.w	r2, [ip]
 8009bca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd8:	4581      	cmp	r9, r0
 8009bda:	f84c 3b04 	str.w	r3, [ip], #4
 8009bde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009be2:	d2db      	bcs.n	8009b9c <quorem+0x44>
 8009be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8009be8:	b92b      	cbnz	r3, 8009bf6 <quorem+0x9e>
 8009bea:	9b01      	ldr	r3, [sp, #4]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	d32e      	bcc.n	8009c52 <quorem+0xfa>
 8009bf4:	613c      	str	r4, [r7, #16]
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f001 feb0 	bl	800b95c <__mcmp>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	db24      	blt.n	8009c4a <quorem+0xf2>
 8009c00:	3601      	adds	r6, #1
 8009c02:	4628      	mov	r0, r5
 8009c04:	f04f 0c00 	mov.w	ip, #0
 8009c08:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8009c10:	b293      	uxth	r3, r2
 8009c12:	ebac 0303 	sub.w	r3, ip, r3
 8009c16:	0c12      	lsrs	r2, r2, #16
 8009c18:	fa13 f38e 	uxtah	r3, r3, lr
 8009c1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c2a:	45c1      	cmp	r9, r8
 8009c2c:	f840 3b04 	str.w	r3, [r0], #4
 8009c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c34:	d2e8      	bcs.n	8009c08 <quorem+0xb0>
 8009c36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c3e:	b922      	cbnz	r2, 8009c4a <quorem+0xf2>
 8009c40:	3b04      	subs	r3, #4
 8009c42:	429d      	cmp	r5, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	d30a      	bcc.n	8009c5e <quorem+0x106>
 8009c48:	613c      	str	r4, [r7, #16]
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	b003      	add	sp, #12
 8009c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c52:	6812      	ldr	r2, [r2, #0]
 8009c54:	3b04      	subs	r3, #4
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	d1cc      	bne.n	8009bf4 <quorem+0x9c>
 8009c5a:	3c01      	subs	r4, #1
 8009c5c:	e7c7      	b.n	8009bee <quorem+0x96>
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	3b04      	subs	r3, #4
 8009c62:	2a00      	cmp	r2, #0
 8009c64:	d1f0      	bne.n	8009c48 <quorem+0xf0>
 8009c66:	3c01      	subs	r4, #1
 8009c68:	e7eb      	b.n	8009c42 <quorem+0xea>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e7ee      	b.n	8009c4c <quorem+0xf4>
	...

08009c70 <_dtoa_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	ed2d 8b02 	vpush	{d8}
 8009c78:	ec57 6b10 	vmov	r6, r7, d0
 8009c7c:	b095      	sub	sp, #84	; 0x54
 8009c7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c84:	9105      	str	r1, [sp, #20]
 8009c86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c90:	b975      	cbnz	r5, 8009cb0 <_dtoa_r+0x40>
 8009c92:	2010      	movs	r0, #16
 8009c94:	f7fd fe92 	bl	80079bc <malloc>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009c9c:	b920      	cbnz	r0, 8009ca8 <_dtoa_r+0x38>
 8009c9e:	4bb2      	ldr	r3, [pc, #712]	; (8009f68 <_dtoa_r+0x2f8>)
 8009ca0:	21ea      	movs	r1, #234	; 0xea
 8009ca2:	48b2      	ldr	r0, [pc, #712]	; (8009f6c <_dtoa_r+0x2fc>)
 8009ca4:	f002 ff5e 	bl	800cb64 <__assert_func>
 8009ca8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cac:	6005      	str	r5, [r0, #0]
 8009cae:	60c5      	str	r5, [r0, #12]
 8009cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	b151      	cbz	r1, 8009ccc <_dtoa_r+0x5c>
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	604a      	str	r2, [r1, #4]
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4093      	lsls	r3, r2
 8009cbe:	608b      	str	r3, [r1, #8]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f001 fbc3 	bl	800b44c <_Bfree>
 8009cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	1e3b      	subs	r3, r7, #0
 8009cce:	bfb9      	ittee	lt
 8009cd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cd4:	9303      	strlt	r3, [sp, #12]
 8009cd6:	2300      	movge	r3, #0
 8009cd8:	f8c8 3000 	strge.w	r3, [r8]
 8009cdc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ce0:	4ba3      	ldr	r3, [pc, #652]	; (8009f70 <_dtoa_r+0x300>)
 8009ce2:	bfbc      	itt	lt
 8009ce4:	2201      	movlt	r2, #1
 8009ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8009cea:	ea33 0309 	bics.w	r3, r3, r9
 8009cee:	d11b      	bne.n	8009d28 <_dtoa_r+0xb8>
 8009cf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cfc:	4333      	orrs	r3, r6
 8009cfe:	f000 857a 	beq.w	800a7f6 <_dtoa_r+0xb86>
 8009d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d04:	b963      	cbnz	r3, 8009d20 <_dtoa_r+0xb0>
 8009d06:	4b9b      	ldr	r3, [pc, #620]	; (8009f74 <_dtoa_r+0x304>)
 8009d08:	e024      	b.n	8009d54 <_dtoa_r+0xe4>
 8009d0a:	4b9b      	ldr	r3, [pc, #620]	; (8009f78 <_dtoa_r+0x308>)
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	9800      	ldr	r0, [sp, #0]
 8009d16:	b015      	add	sp, #84	; 0x54
 8009d18:	ecbd 8b02 	vpop	{d8}
 8009d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d20:	4b94      	ldr	r3, [pc, #592]	; (8009f74 <_dtoa_r+0x304>)
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	3303      	adds	r3, #3
 8009d26:	e7f3      	b.n	8009d10 <_dtoa_r+0xa0>
 8009d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	ec51 0b17 	vmov	r0, r1, d7
 8009d32:	2300      	movs	r3, #0
 8009d34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d38:	f7f6 fece 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	b158      	cbz	r0, 8009d58 <_dtoa_r+0xe8>
 8009d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d42:	2301      	movs	r3, #1
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 8551 	beq.w	800a7f0 <_dtoa_r+0xb80>
 8009d4e:	488b      	ldr	r0, [pc, #556]	; (8009f7c <_dtoa_r+0x30c>)
 8009d50:	6018      	str	r0, [r3, #0]
 8009d52:	1e43      	subs	r3, r0, #1
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	e7dd      	b.n	8009d14 <_dtoa_r+0xa4>
 8009d58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d5c:	aa12      	add	r2, sp, #72	; 0x48
 8009d5e:	a913      	add	r1, sp, #76	; 0x4c
 8009d60:	4620      	mov	r0, r4
 8009d62:	f001 ff1b 	bl	800bb9c <__d2b>
 8009d66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d6a:	4683      	mov	fp, r0
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	d07c      	beq.n	8009e6a <_dtoa_r+0x1fa>
 8009d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009d76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009d7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d8a:	4b7d      	ldr	r3, [pc, #500]	; (8009f80 <_dtoa_r+0x310>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4630      	mov	r0, r6
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fa81 	bl	8000298 <__aeabi_dsub>
 8009d96:	a36e      	add	r3, pc, #440	; (adr r3, 8009f50 <_dtoa_r+0x2e0>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 fc34 	bl	8000608 <__aeabi_dmul>
 8009da0:	a36d      	add	r3, pc, #436	; (adr r3, 8009f58 <_dtoa_r+0x2e8>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f7f6 fa79 	bl	800029c <__adddf3>
 8009daa:	4606      	mov	r6, r0
 8009dac:	4628      	mov	r0, r5
 8009dae:	460f      	mov	r7, r1
 8009db0:	f7f6 fbc0 	bl	8000534 <__aeabi_i2d>
 8009db4:	a36a      	add	r3, pc, #424	; (adr r3, 8009f60 <_dtoa_r+0x2f0>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	f7f6 fa69 	bl	800029c <__adddf3>
 8009dca:	4606      	mov	r6, r0
 8009dcc:	460f      	mov	r7, r1
 8009dce:	f7f6 fecb 	bl	8000b68 <__aeabi_d2iz>
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fe86 	bl	8000aec <__aeabi_dcmplt>
 8009de0:	b148      	cbz	r0, 8009df6 <_dtoa_r+0x186>
 8009de2:	4650      	mov	r0, sl
 8009de4:	f7f6 fba6 	bl	8000534 <__aeabi_i2d>
 8009de8:	4632      	mov	r2, r6
 8009dea:	463b      	mov	r3, r7
 8009dec:	f7f6 fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8009df0:	b908      	cbnz	r0, 8009df6 <_dtoa_r+0x186>
 8009df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009df6:	f1ba 0f16 	cmp.w	sl, #22
 8009dfa:	d854      	bhi.n	8009ea6 <_dtoa_r+0x236>
 8009dfc:	4b61      	ldr	r3, [pc, #388]	; (8009f84 <_dtoa_r+0x314>)
 8009dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e0a:	f7f6 fe6f 	bl	8000aec <__aeabi_dcmplt>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d04b      	beq.n	8009eaa <_dtoa_r+0x23a>
 8009e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e16:	2300      	movs	r3, #0
 8009e18:	930e      	str	r3, [sp, #56]	; 0x38
 8009e1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e1c:	1b5d      	subs	r5, r3, r5
 8009e1e:	1e6b      	subs	r3, r5, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	bf43      	ittte	mi
 8009e24:	2300      	movmi	r3, #0
 8009e26:	f1c5 0801 	rsbmi	r8, r5, #1
 8009e2a:	9304      	strmi	r3, [sp, #16]
 8009e2c:	f04f 0800 	movpl.w	r8, #0
 8009e30:	f1ba 0f00 	cmp.w	sl, #0
 8009e34:	db3b      	blt.n	8009eae <_dtoa_r+0x23e>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009e3c:	4453      	add	r3, sl
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	2300      	movs	r3, #0
 8009e42:	9306      	str	r3, [sp, #24]
 8009e44:	9b05      	ldr	r3, [sp, #20]
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d869      	bhi.n	8009f1e <_dtoa_r+0x2ae>
 8009e4a:	2b05      	cmp	r3, #5
 8009e4c:	bfc4      	itt	gt
 8009e4e:	3b04      	subgt	r3, #4
 8009e50:	9305      	strgt	r3, [sp, #20]
 8009e52:	9b05      	ldr	r3, [sp, #20]
 8009e54:	f1a3 0302 	sub.w	r3, r3, #2
 8009e58:	bfcc      	ite	gt
 8009e5a:	2500      	movgt	r5, #0
 8009e5c:	2501      	movle	r5, #1
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d869      	bhi.n	8009f36 <_dtoa_r+0x2c6>
 8009e62:	e8df f003 	tbb	[pc, r3]
 8009e66:	4e2c      	.short	0x4e2c
 8009e68:	5a4c      	.short	0x5a4c
 8009e6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009e6e:	441d      	add	r5, r3
 8009e70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	bfc1      	itttt	gt
 8009e78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e80:	fa09 f303 	lslgt.w	r3, r9, r3
 8009e84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e88:	bfda      	itte	le
 8009e8a:	f1c3 0320 	rsble	r3, r3, #32
 8009e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8009e92:	4318      	orrgt	r0, r3
 8009e94:	f7f6 fb3e 	bl	8000514 <__aeabi_ui2d>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4606      	mov	r6, r0
 8009e9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009ea0:	3d01      	subs	r5, #1
 8009ea2:	9310      	str	r3, [sp, #64]	; 0x40
 8009ea4:	e771      	b.n	8009d8a <_dtoa_r+0x11a>
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e7b6      	b.n	8009e18 <_dtoa_r+0x1a8>
 8009eaa:	900e      	str	r0, [sp, #56]	; 0x38
 8009eac:	e7b5      	b.n	8009e1a <_dtoa_r+0x1aa>
 8009eae:	f1ca 0300 	rsb	r3, sl, #0
 8009eb2:	9306      	str	r3, [sp, #24]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	eba8 080a 	sub.w	r8, r8, sl
 8009eba:	930d      	str	r3, [sp, #52]	; 0x34
 8009ebc:	e7c2      	b.n	8009e44 <_dtoa_r+0x1d4>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9308      	str	r3, [sp, #32]
 8009ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	dc39      	bgt.n	8009f3c <_dtoa_r+0x2cc>
 8009ec8:	f04f 0901 	mov.w	r9, #1
 8009ecc:	f8cd 9004 	str.w	r9, [sp, #4]
 8009ed0:	464b      	mov	r3, r9
 8009ed2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ed8:	2200      	movs	r2, #0
 8009eda:	6042      	str	r2, [r0, #4]
 8009edc:	2204      	movs	r2, #4
 8009ede:	f102 0614 	add.w	r6, r2, #20
 8009ee2:	429e      	cmp	r6, r3
 8009ee4:	6841      	ldr	r1, [r0, #4]
 8009ee6:	d92f      	bls.n	8009f48 <_dtoa_r+0x2d8>
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f001 fa6f 	bl	800b3cc <_Balloc>
 8009eee:	9000      	str	r0, [sp, #0]
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d14b      	bne.n	8009f8c <_dtoa_r+0x31c>
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <_dtoa_r+0x318>)
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009efc:	e6d1      	b.n	8009ca2 <_dtoa_r+0x32>
 8009efe:	2301      	movs	r3, #1
 8009f00:	e7de      	b.n	8009ec0 <_dtoa_r+0x250>
 8009f02:	2300      	movs	r3, #0
 8009f04:	9308      	str	r3, [sp, #32]
 8009f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f08:	eb0a 0903 	add.w	r9, sl, r3
 8009f0c:	f109 0301 	add.w	r3, r9, #1
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	bfb8      	it	lt
 8009f16:	2301      	movlt	r3, #1
 8009f18:	e7dd      	b.n	8009ed6 <_dtoa_r+0x266>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e7f2      	b.n	8009f04 <_dtoa_r+0x294>
 8009f1e:	2501      	movs	r5, #1
 8009f20:	2300      	movs	r3, #0
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	9508      	str	r5, [sp, #32]
 8009f26:	f04f 39ff 	mov.w	r9, #4294967295
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f30:	2312      	movs	r3, #18
 8009f32:	9209      	str	r2, [sp, #36]	; 0x24
 8009f34:	e7cf      	b.n	8009ed6 <_dtoa_r+0x266>
 8009f36:	2301      	movs	r3, #1
 8009f38:	9308      	str	r3, [sp, #32]
 8009f3a:	e7f4      	b.n	8009f26 <_dtoa_r+0x2b6>
 8009f3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009f40:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f44:	464b      	mov	r3, r9
 8009f46:	e7c6      	b.n	8009ed6 <_dtoa_r+0x266>
 8009f48:	3101      	adds	r1, #1
 8009f4a:	6041      	str	r1, [r0, #4]
 8009f4c:	0052      	lsls	r2, r2, #1
 8009f4e:	e7c6      	b.n	8009ede <_dtoa_r+0x26e>
 8009f50:	636f4361 	.word	0x636f4361
 8009f54:	3fd287a7 	.word	0x3fd287a7
 8009f58:	8b60c8b3 	.word	0x8b60c8b3
 8009f5c:	3fc68a28 	.word	0x3fc68a28
 8009f60:	509f79fb 	.word	0x509f79fb
 8009f64:	3fd34413 	.word	0x3fd34413
 8009f68:	0800ee56 	.word	0x0800ee56
 8009f6c:	0800ee6d 	.word	0x0800ee6d
 8009f70:	7ff00000 	.word	0x7ff00000
 8009f74:	0800ee52 	.word	0x0800ee52
 8009f78:	0800ee49 	.word	0x0800ee49
 8009f7c:	0800f132 	.word	0x0800f132
 8009f80:	3ff80000 	.word	0x3ff80000
 8009f84:	0800f048 	.word	0x0800f048
 8009f88:	0800eecc 	.word	0x0800eecc
 8009f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f8e:	9a00      	ldr	r2, [sp, #0]
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	2b0e      	cmp	r3, #14
 8009f96:	f200 80ad 	bhi.w	800a0f4 <_dtoa_r+0x484>
 8009f9a:	2d00      	cmp	r5, #0
 8009f9c:	f000 80aa 	beq.w	800a0f4 <_dtoa_r+0x484>
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	dd36      	ble.n	800a014 <_dtoa_r+0x3a4>
 8009fa6:	4ac3      	ldr	r2, [pc, #780]	; (800a2b4 <_dtoa_r+0x644>)
 8009fa8:	f00a 030f 	and.w	r3, sl, #15
 8009fac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009fb0:	ed93 7b00 	vldr	d7, [r3]
 8009fb4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009fb8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009fbc:	eeb0 8a47 	vmov.f32	s16, s14
 8009fc0:	eef0 8a67 	vmov.f32	s17, s15
 8009fc4:	d016      	beq.n	8009ff4 <_dtoa_r+0x384>
 8009fc6:	4bbc      	ldr	r3, [pc, #752]	; (800a2b8 <_dtoa_r+0x648>)
 8009fc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd0:	f7f6 fc44 	bl	800085c <__aeabi_ddiv>
 8009fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd8:	f007 070f 	and.w	r7, r7, #15
 8009fdc:	2503      	movs	r5, #3
 8009fde:	4eb6      	ldr	r6, [pc, #728]	; (800a2b8 <_dtoa_r+0x648>)
 8009fe0:	b957      	cbnz	r7, 8009ff8 <_dtoa_r+0x388>
 8009fe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe6:	ec53 2b18 	vmov	r2, r3, d8
 8009fea:	f7f6 fc37 	bl	800085c <__aeabi_ddiv>
 8009fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ff2:	e029      	b.n	800a048 <_dtoa_r+0x3d8>
 8009ff4:	2502      	movs	r5, #2
 8009ff6:	e7f2      	b.n	8009fde <_dtoa_r+0x36e>
 8009ff8:	07f9      	lsls	r1, r7, #31
 8009ffa:	d508      	bpl.n	800a00e <_dtoa_r+0x39e>
 8009ffc:	ec51 0b18 	vmov	r0, r1, d8
 800a000:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a004:	f7f6 fb00 	bl	8000608 <__aeabi_dmul>
 800a008:	ec41 0b18 	vmov	d8, r0, r1
 800a00c:	3501      	adds	r5, #1
 800a00e:	107f      	asrs	r7, r7, #1
 800a010:	3608      	adds	r6, #8
 800a012:	e7e5      	b.n	8009fe0 <_dtoa_r+0x370>
 800a014:	f000 80a6 	beq.w	800a164 <_dtoa_r+0x4f4>
 800a018:	f1ca 0600 	rsb	r6, sl, #0
 800a01c:	4ba5      	ldr	r3, [pc, #660]	; (800a2b4 <_dtoa_r+0x644>)
 800a01e:	4fa6      	ldr	r7, [pc, #664]	; (800a2b8 <_dtoa_r+0x648>)
 800a020:	f006 020f 	and.w	r2, r6, #15
 800a024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a030:	f7f6 faea 	bl	8000608 <__aeabi_dmul>
 800a034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a038:	1136      	asrs	r6, r6, #4
 800a03a:	2300      	movs	r3, #0
 800a03c:	2502      	movs	r5, #2
 800a03e:	2e00      	cmp	r6, #0
 800a040:	f040 8085 	bne.w	800a14e <_dtoa_r+0x4de>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1d2      	bne.n	8009fee <_dtoa_r+0x37e>
 800a048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 808c 	beq.w	800a168 <_dtoa_r+0x4f8>
 800a050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a054:	4b99      	ldr	r3, [pc, #612]	; (800a2bc <_dtoa_r+0x64c>)
 800a056:	2200      	movs	r2, #0
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fd46 	bl	8000aec <__aeabi_dcmplt>
 800a060:	2800      	cmp	r0, #0
 800a062:	f000 8081 	beq.w	800a168 <_dtoa_r+0x4f8>
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d07d      	beq.n	800a168 <_dtoa_r+0x4f8>
 800a06c:	f1b9 0f00 	cmp.w	r9, #0
 800a070:	dd3c      	ble.n	800a0ec <_dtoa_r+0x47c>
 800a072:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a076:	9307      	str	r3, [sp, #28]
 800a078:	2200      	movs	r2, #0
 800a07a:	4b91      	ldr	r3, [pc, #580]	; (800a2c0 <_dtoa_r+0x650>)
 800a07c:	4630      	mov	r0, r6
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 fac2 	bl	8000608 <__aeabi_dmul>
 800a084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a088:	3501      	adds	r5, #1
 800a08a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a08e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a092:	4628      	mov	r0, r5
 800a094:	f7f6 fa4e 	bl	8000534 <__aeabi_i2d>
 800a098:	4632      	mov	r2, r6
 800a09a:	463b      	mov	r3, r7
 800a09c:	f7f6 fab4 	bl	8000608 <__aeabi_dmul>
 800a0a0:	4b88      	ldr	r3, [pc, #544]	; (800a2c4 <_dtoa_r+0x654>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f7f6 f8fa 	bl	800029c <__adddf3>
 800a0a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b0:	9303      	str	r3, [sp, #12]
 800a0b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d15c      	bne.n	800a172 <_dtoa_r+0x502>
 800a0b8:	4b83      	ldr	r3, [pc, #524]	; (800a2c8 <_dtoa_r+0x658>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	4630      	mov	r0, r6
 800a0be:	4639      	mov	r1, r7
 800a0c0:	f7f6 f8ea 	bl	8000298 <__aeabi_dsub>
 800a0c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	460f      	mov	r7, r1
 800a0cc:	f7f6 fd2c 	bl	8000b28 <__aeabi_dcmpgt>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	f040 8296 	bne.w	800a602 <_dtoa_r+0x992>
 800a0d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a0da:	4630      	mov	r0, r6
 800a0dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 fd03 	bl	8000aec <__aeabi_dcmplt>
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	f040 8288 	bne.w	800a5fc <_dtoa_r+0x98c>
 800a0ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f2c0 8158 	blt.w	800a3ac <_dtoa_r+0x73c>
 800a0fc:	f1ba 0f0e 	cmp.w	sl, #14
 800a100:	f300 8154 	bgt.w	800a3ac <_dtoa_r+0x73c>
 800a104:	4b6b      	ldr	r3, [pc, #428]	; (800a2b4 <_dtoa_r+0x644>)
 800a106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a10a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	f280 80e3 	bge.w	800a2dc <_dtoa_r+0x66c>
 800a116:	9b01      	ldr	r3, [sp, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f300 80df 	bgt.w	800a2dc <_dtoa_r+0x66c>
 800a11e:	f040 826d 	bne.w	800a5fc <_dtoa_r+0x98c>
 800a122:	4b69      	ldr	r3, [pc, #420]	; (800a2c8 <_dtoa_r+0x658>)
 800a124:	2200      	movs	r2, #0
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fa6d 	bl	8000608 <__aeabi_dmul>
 800a12e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a132:	f7f6 fcef 	bl	8000b14 <__aeabi_dcmpge>
 800a136:	9e01      	ldr	r6, [sp, #4]
 800a138:	4637      	mov	r7, r6
 800a13a:	2800      	cmp	r0, #0
 800a13c:	f040 8243 	bne.w	800a5c6 <_dtoa_r+0x956>
 800a140:	9d00      	ldr	r5, [sp, #0]
 800a142:	2331      	movs	r3, #49	; 0x31
 800a144:	f805 3b01 	strb.w	r3, [r5], #1
 800a148:	f10a 0a01 	add.w	sl, sl, #1
 800a14c:	e23f      	b.n	800a5ce <_dtoa_r+0x95e>
 800a14e:	07f2      	lsls	r2, r6, #31
 800a150:	d505      	bpl.n	800a15e <_dtoa_r+0x4ee>
 800a152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a156:	f7f6 fa57 	bl	8000608 <__aeabi_dmul>
 800a15a:	3501      	adds	r5, #1
 800a15c:	2301      	movs	r3, #1
 800a15e:	1076      	asrs	r6, r6, #1
 800a160:	3708      	adds	r7, #8
 800a162:	e76c      	b.n	800a03e <_dtoa_r+0x3ce>
 800a164:	2502      	movs	r5, #2
 800a166:	e76f      	b.n	800a048 <_dtoa_r+0x3d8>
 800a168:	9b01      	ldr	r3, [sp, #4]
 800a16a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a16e:	930c      	str	r3, [sp, #48]	; 0x30
 800a170:	e78d      	b.n	800a08e <_dtoa_r+0x41e>
 800a172:	9900      	ldr	r1, [sp, #0]
 800a174:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a178:	4b4e      	ldr	r3, [pc, #312]	; (800a2b4 <_dtoa_r+0x644>)
 800a17a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a17e:	4401      	add	r1, r0
 800a180:	9102      	str	r1, [sp, #8]
 800a182:	9908      	ldr	r1, [sp, #32]
 800a184:	eeb0 8a47 	vmov.f32	s16, s14
 800a188:	eef0 8a67 	vmov.f32	s17, s15
 800a18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a194:	2900      	cmp	r1, #0
 800a196:	d045      	beq.n	800a224 <_dtoa_r+0x5b4>
 800a198:	494c      	ldr	r1, [pc, #304]	; (800a2cc <_dtoa_r+0x65c>)
 800a19a:	2000      	movs	r0, #0
 800a19c:	f7f6 fb5e 	bl	800085c <__aeabi_ddiv>
 800a1a0:	ec53 2b18 	vmov	r2, r3, d8
 800a1a4:	f7f6 f878 	bl	8000298 <__aeabi_dsub>
 800a1a8:	9d00      	ldr	r5, [sp, #0]
 800a1aa:	ec41 0b18 	vmov	d8, r0, r1
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	f7f6 fcd9 	bl	8000b68 <__aeabi_d2iz>
 800a1b6:	900c      	str	r0, [sp, #48]	; 0x30
 800a1b8:	f7f6 f9bc 	bl	8000534 <__aeabi_i2d>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 f868 	bl	8000298 <__aeabi_dsub>
 800a1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ca:	3330      	adds	r3, #48	; 0x30
 800a1cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a1d0:	ec53 2b18 	vmov	r2, r3, d8
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	f7f6 fc88 	bl	8000aec <__aeabi_dcmplt>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	d165      	bne.n	800a2ac <_dtoa_r+0x63c>
 800a1e0:	4632      	mov	r2, r6
 800a1e2:	463b      	mov	r3, r7
 800a1e4:	4935      	ldr	r1, [pc, #212]	; (800a2bc <_dtoa_r+0x64c>)
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	f7f6 f856 	bl	8000298 <__aeabi_dsub>
 800a1ec:	ec53 2b18 	vmov	r2, r3, d8
 800a1f0:	f7f6 fc7c 	bl	8000aec <__aeabi_dcmplt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f040 80b9 	bne.w	800a36c <_dtoa_r+0x6fc>
 800a1fa:	9b02      	ldr	r3, [sp, #8]
 800a1fc:	429d      	cmp	r5, r3
 800a1fe:	f43f af75 	beq.w	800a0ec <_dtoa_r+0x47c>
 800a202:	4b2f      	ldr	r3, [pc, #188]	; (800a2c0 <_dtoa_r+0x650>)
 800a204:	ec51 0b18 	vmov	r0, r1, d8
 800a208:	2200      	movs	r2, #0
 800a20a:	f7f6 f9fd 	bl	8000608 <__aeabi_dmul>
 800a20e:	4b2c      	ldr	r3, [pc, #176]	; (800a2c0 <_dtoa_r+0x650>)
 800a210:	ec41 0b18 	vmov	d8, r0, r1
 800a214:	2200      	movs	r2, #0
 800a216:	4630      	mov	r0, r6
 800a218:	4639      	mov	r1, r7
 800a21a:	f7f6 f9f5 	bl	8000608 <__aeabi_dmul>
 800a21e:	4606      	mov	r6, r0
 800a220:	460f      	mov	r7, r1
 800a222:	e7c4      	b.n	800a1ae <_dtoa_r+0x53e>
 800a224:	ec51 0b17 	vmov	r0, r1, d7
 800a228:	f7f6 f9ee 	bl	8000608 <__aeabi_dmul>
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	9d00      	ldr	r5, [sp, #0]
 800a230:	930c      	str	r3, [sp, #48]	; 0x30
 800a232:	ec41 0b18 	vmov	d8, r0, r1
 800a236:	4639      	mov	r1, r7
 800a238:	4630      	mov	r0, r6
 800a23a:	f7f6 fc95 	bl	8000b68 <__aeabi_d2iz>
 800a23e:	9011      	str	r0, [sp, #68]	; 0x44
 800a240:	f7f6 f978 	bl	8000534 <__aeabi_i2d>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	4630      	mov	r0, r6
 800a24a:	4639      	mov	r1, r7
 800a24c:	f7f6 f824 	bl	8000298 <__aeabi_dsub>
 800a250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a252:	3330      	adds	r3, #48	; 0x30
 800a254:	f805 3b01 	strb.w	r3, [r5], #1
 800a258:	9b02      	ldr	r3, [sp, #8]
 800a25a:	429d      	cmp	r5, r3
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	d134      	bne.n	800a2d0 <_dtoa_r+0x660>
 800a266:	4b19      	ldr	r3, [pc, #100]	; (800a2cc <_dtoa_r+0x65c>)
 800a268:	ec51 0b18 	vmov	r0, r1, d8
 800a26c:	f7f6 f816 	bl	800029c <__adddf3>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f7f6 fc56 	bl	8000b28 <__aeabi_dcmpgt>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d175      	bne.n	800a36c <_dtoa_r+0x6fc>
 800a280:	ec53 2b18 	vmov	r2, r3, d8
 800a284:	4911      	ldr	r1, [pc, #68]	; (800a2cc <_dtoa_r+0x65c>)
 800a286:	2000      	movs	r0, #0
 800a288:	f7f6 f806 	bl	8000298 <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	f7f6 fc2a 	bl	8000aec <__aeabi_dcmplt>
 800a298:	2800      	cmp	r0, #0
 800a29a:	f43f af27 	beq.w	800a0ec <_dtoa_r+0x47c>
 800a29e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2a0:	1e6b      	subs	r3, r5, #1
 800a2a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a2a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2a8:	2b30      	cmp	r3, #48	; 0x30
 800a2aa:	d0f8      	beq.n	800a29e <_dtoa_r+0x62e>
 800a2ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2b0:	e04a      	b.n	800a348 <_dtoa_r+0x6d8>
 800a2b2:	bf00      	nop
 800a2b4:	0800f048 	.word	0x0800f048
 800a2b8:	0800f020 	.word	0x0800f020
 800a2bc:	3ff00000 	.word	0x3ff00000
 800a2c0:	40240000 	.word	0x40240000
 800a2c4:	401c0000 	.word	0x401c0000
 800a2c8:	40140000 	.word	0x40140000
 800a2cc:	3fe00000 	.word	0x3fe00000
 800a2d0:	4baf      	ldr	r3, [pc, #700]	; (800a590 <_dtoa_r+0x920>)
 800a2d2:	f7f6 f999 	bl	8000608 <__aeabi_dmul>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	460f      	mov	r7, r1
 800a2da:	e7ac      	b.n	800a236 <_dtoa_r+0x5c6>
 800a2dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2e0:	9d00      	ldr	r5, [sp, #0]
 800a2e2:	4642      	mov	r2, r8
 800a2e4:	464b      	mov	r3, r9
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f6 fab7 	bl	800085c <__aeabi_ddiv>
 800a2ee:	f7f6 fc3b 	bl	8000b68 <__aeabi_d2iz>
 800a2f2:	9002      	str	r0, [sp, #8]
 800a2f4:	f7f6 f91e 	bl	8000534 <__aeabi_i2d>
 800a2f8:	4642      	mov	r2, r8
 800a2fa:	464b      	mov	r3, r9
 800a2fc:	f7f6 f984 	bl	8000608 <__aeabi_dmul>
 800a300:	4602      	mov	r2, r0
 800a302:	460b      	mov	r3, r1
 800a304:	4630      	mov	r0, r6
 800a306:	4639      	mov	r1, r7
 800a308:	f7f5 ffc6 	bl	8000298 <__aeabi_dsub>
 800a30c:	9e02      	ldr	r6, [sp, #8]
 800a30e:	9f01      	ldr	r7, [sp, #4]
 800a310:	3630      	adds	r6, #48	; 0x30
 800a312:	f805 6b01 	strb.w	r6, [r5], #1
 800a316:	9e00      	ldr	r6, [sp, #0]
 800a318:	1bae      	subs	r6, r5, r6
 800a31a:	42b7      	cmp	r7, r6
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	d137      	bne.n	800a392 <_dtoa_r+0x722>
 800a322:	f7f5 ffbb 	bl	800029c <__adddf3>
 800a326:	4642      	mov	r2, r8
 800a328:	464b      	mov	r3, r9
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	f7f6 fbfb 	bl	8000b28 <__aeabi_dcmpgt>
 800a332:	b9c8      	cbnz	r0, 800a368 <_dtoa_r+0x6f8>
 800a334:	4642      	mov	r2, r8
 800a336:	464b      	mov	r3, r9
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	f7f6 fbcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a340:	b110      	cbz	r0, 800a348 <_dtoa_r+0x6d8>
 800a342:	9b02      	ldr	r3, [sp, #8]
 800a344:	07d9      	lsls	r1, r3, #31
 800a346:	d40f      	bmi.n	800a368 <_dtoa_r+0x6f8>
 800a348:	4620      	mov	r0, r4
 800a34a:	4659      	mov	r1, fp
 800a34c:	f001 f87e 	bl	800b44c <_Bfree>
 800a350:	2300      	movs	r3, #0
 800a352:	702b      	strb	r3, [r5, #0]
 800a354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a356:	f10a 0001 	add.w	r0, sl, #1
 800a35a:	6018      	str	r0, [r3, #0]
 800a35c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f43f acd8 	beq.w	8009d14 <_dtoa_r+0xa4>
 800a364:	601d      	str	r5, [r3, #0]
 800a366:	e4d5      	b.n	8009d14 <_dtoa_r+0xa4>
 800a368:	f8cd a01c 	str.w	sl, [sp, #28]
 800a36c:	462b      	mov	r3, r5
 800a36e:	461d      	mov	r5, r3
 800a370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a374:	2a39      	cmp	r2, #57	; 0x39
 800a376:	d108      	bne.n	800a38a <_dtoa_r+0x71a>
 800a378:	9a00      	ldr	r2, [sp, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d1f7      	bne.n	800a36e <_dtoa_r+0x6fe>
 800a37e:	9a07      	ldr	r2, [sp, #28]
 800a380:	9900      	ldr	r1, [sp, #0]
 800a382:	3201      	adds	r2, #1
 800a384:	9207      	str	r2, [sp, #28]
 800a386:	2230      	movs	r2, #48	; 0x30
 800a388:	700a      	strb	r2, [r1, #0]
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	3201      	adds	r2, #1
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e78c      	b.n	800a2ac <_dtoa_r+0x63c>
 800a392:	4b7f      	ldr	r3, [pc, #508]	; (800a590 <_dtoa_r+0x920>)
 800a394:	2200      	movs	r2, #0
 800a396:	f7f6 f937 	bl	8000608 <__aeabi_dmul>
 800a39a:	2200      	movs	r2, #0
 800a39c:	2300      	movs	r3, #0
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	f7f6 fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d09b      	beq.n	800a2e2 <_dtoa_r+0x672>
 800a3aa:	e7cd      	b.n	800a348 <_dtoa_r+0x6d8>
 800a3ac:	9a08      	ldr	r2, [sp, #32]
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	f000 80c4 	beq.w	800a53c <_dtoa_r+0x8cc>
 800a3b4:	9a05      	ldr	r2, [sp, #20]
 800a3b6:	2a01      	cmp	r2, #1
 800a3b8:	f300 80a8 	bgt.w	800a50c <_dtoa_r+0x89c>
 800a3bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3be:	2a00      	cmp	r2, #0
 800a3c0:	f000 80a0 	beq.w	800a504 <_dtoa_r+0x894>
 800a3c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3c8:	9e06      	ldr	r6, [sp, #24]
 800a3ca:	4645      	mov	r5, r8
 800a3cc:	9a04      	ldr	r2, [sp, #16]
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	441a      	add	r2, r3
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	4498      	add	r8, r3
 800a3d6:	9204      	str	r2, [sp, #16]
 800a3d8:	f001 f93e 	bl	800b658 <__i2b>
 800a3dc:	4607      	mov	r7, r0
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	dd0b      	ble.n	800a3fa <_dtoa_r+0x78a>
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd08      	ble.n	800a3fa <_dtoa_r+0x78a>
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	9a04      	ldr	r2, [sp, #16]
 800a3ec:	bfa8      	it	ge
 800a3ee:	462b      	movge	r3, r5
 800a3f0:	eba8 0803 	sub.w	r8, r8, r3
 800a3f4:	1aed      	subs	r5, r5, r3
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	b1fb      	cbz	r3, 800a43e <_dtoa_r+0x7ce>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 809f 	beq.w	800a544 <_dtoa_r+0x8d4>
 800a406:	2e00      	cmp	r6, #0
 800a408:	dd11      	ble.n	800a42e <_dtoa_r+0x7be>
 800a40a:	4639      	mov	r1, r7
 800a40c:	4632      	mov	r2, r6
 800a40e:	4620      	mov	r0, r4
 800a410:	f001 f9de 	bl	800b7d0 <__pow5mult>
 800a414:	465a      	mov	r2, fp
 800a416:	4601      	mov	r1, r0
 800a418:	4607      	mov	r7, r0
 800a41a:	4620      	mov	r0, r4
 800a41c:	f001 f932 	bl	800b684 <__multiply>
 800a420:	4659      	mov	r1, fp
 800a422:	9007      	str	r0, [sp, #28]
 800a424:	4620      	mov	r0, r4
 800a426:	f001 f811 	bl	800b44c <_Bfree>
 800a42a:	9b07      	ldr	r3, [sp, #28]
 800a42c:	469b      	mov	fp, r3
 800a42e:	9b06      	ldr	r3, [sp, #24]
 800a430:	1b9a      	subs	r2, r3, r6
 800a432:	d004      	beq.n	800a43e <_dtoa_r+0x7ce>
 800a434:	4659      	mov	r1, fp
 800a436:	4620      	mov	r0, r4
 800a438:	f001 f9ca 	bl	800b7d0 <__pow5mult>
 800a43c:	4683      	mov	fp, r0
 800a43e:	2101      	movs	r1, #1
 800a440:	4620      	mov	r0, r4
 800a442:	f001 f909 	bl	800b658 <__i2b>
 800a446:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a448:	2b00      	cmp	r3, #0
 800a44a:	4606      	mov	r6, r0
 800a44c:	dd7c      	ble.n	800a548 <_dtoa_r+0x8d8>
 800a44e:	461a      	mov	r2, r3
 800a450:	4601      	mov	r1, r0
 800a452:	4620      	mov	r0, r4
 800a454:	f001 f9bc 	bl	800b7d0 <__pow5mult>
 800a458:	9b05      	ldr	r3, [sp, #20]
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	4606      	mov	r6, r0
 800a45e:	dd76      	ble.n	800a54e <_dtoa_r+0x8de>
 800a460:	2300      	movs	r3, #0
 800a462:	9306      	str	r3, [sp, #24]
 800a464:	6933      	ldr	r3, [r6, #16]
 800a466:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a46a:	6918      	ldr	r0, [r3, #16]
 800a46c:	f001 f8a4 	bl	800b5b8 <__hi0bits>
 800a470:	f1c0 0020 	rsb	r0, r0, #32
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	4418      	add	r0, r3
 800a478:	f010 001f 	ands.w	r0, r0, #31
 800a47c:	f000 8086 	beq.w	800a58c <_dtoa_r+0x91c>
 800a480:	f1c0 0320 	rsb	r3, r0, #32
 800a484:	2b04      	cmp	r3, #4
 800a486:	dd7f      	ble.n	800a588 <_dtoa_r+0x918>
 800a488:	f1c0 001c 	rsb	r0, r0, #28
 800a48c:	9b04      	ldr	r3, [sp, #16]
 800a48e:	4403      	add	r3, r0
 800a490:	4480      	add	r8, r0
 800a492:	4405      	add	r5, r0
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	f1b8 0f00 	cmp.w	r8, #0
 800a49a:	dd05      	ble.n	800a4a8 <_dtoa_r+0x838>
 800a49c:	4659      	mov	r1, fp
 800a49e:	4642      	mov	r2, r8
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f001 f9ef 	bl	800b884 <__lshift>
 800a4a6:	4683      	mov	fp, r0
 800a4a8:	9b04      	ldr	r3, [sp, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dd05      	ble.n	800a4ba <_dtoa_r+0x84a>
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	f001 f9e6 	bl	800b884 <__lshift>
 800a4b8:	4606      	mov	r6, r0
 800a4ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d069      	beq.n	800a594 <_dtoa_r+0x924>
 800a4c0:	4631      	mov	r1, r6
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f001 fa4a 	bl	800b95c <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	da63      	bge.n	800a594 <_dtoa_r+0x924>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4659      	mov	r1, fp
 800a4d0:	220a      	movs	r2, #10
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 ffdc 	bl	800b490 <__multadd>
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4de:	4683      	mov	fp, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 818f 	beq.w	800a804 <_dtoa_r+0xb94>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	220a      	movs	r2, #10
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 ffcf 	bl	800b490 <__multadd>
 800a4f2:	f1b9 0f00 	cmp.w	r9, #0
 800a4f6:	4607      	mov	r7, r0
 800a4f8:	f300 808e 	bgt.w	800a618 <_dtoa_r+0x9a8>
 800a4fc:	9b05      	ldr	r3, [sp, #20]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	dc50      	bgt.n	800a5a4 <_dtoa_r+0x934>
 800a502:	e089      	b.n	800a618 <_dtoa_r+0x9a8>
 800a504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a50a:	e75d      	b.n	800a3c8 <_dtoa_r+0x758>
 800a50c:	9b01      	ldr	r3, [sp, #4]
 800a50e:	1e5e      	subs	r6, r3, #1
 800a510:	9b06      	ldr	r3, [sp, #24]
 800a512:	42b3      	cmp	r3, r6
 800a514:	bfbf      	itttt	lt
 800a516:	9b06      	ldrlt	r3, [sp, #24]
 800a518:	9606      	strlt	r6, [sp, #24]
 800a51a:	1af2      	sublt	r2, r6, r3
 800a51c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a51e:	bfb6      	itet	lt
 800a520:	189b      	addlt	r3, r3, r2
 800a522:	1b9e      	subge	r6, r3, r6
 800a524:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a526:	9b01      	ldr	r3, [sp, #4]
 800a528:	bfb8      	it	lt
 800a52a:	2600      	movlt	r6, #0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfb5      	itete	lt
 800a530:	eba8 0503 	sublt.w	r5, r8, r3
 800a534:	9b01      	ldrge	r3, [sp, #4]
 800a536:	2300      	movlt	r3, #0
 800a538:	4645      	movge	r5, r8
 800a53a:	e747      	b.n	800a3cc <_dtoa_r+0x75c>
 800a53c:	9e06      	ldr	r6, [sp, #24]
 800a53e:	9f08      	ldr	r7, [sp, #32]
 800a540:	4645      	mov	r5, r8
 800a542:	e74c      	b.n	800a3de <_dtoa_r+0x76e>
 800a544:	9a06      	ldr	r2, [sp, #24]
 800a546:	e775      	b.n	800a434 <_dtoa_r+0x7c4>
 800a548:	9b05      	ldr	r3, [sp, #20]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	dc18      	bgt.n	800a580 <_dtoa_r+0x910>
 800a54e:	9b02      	ldr	r3, [sp, #8]
 800a550:	b9b3      	cbnz	r3, 800a580 <_dtoa_r+0x910>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a558:	b9a3      	cbnz	r3, 800a584 <_dtoa_r+0x914>
 800a55a:	9b03      	ldr	r3, [sp, #12]
 800a55c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a560:	0d1b      	lsrs	r3, r3, #20
 800a562:	051b      	lsls	r3, r3, #20
 800a564:	b12b      	cbz	r3, 800a572 <_dtoa_r+0x902>
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	9304      	str	r3, [sp, #16]
 800a56c:	f108 0801 	add.w	r8, r8, #1
 800a570:	2301      	movs	r3, #1
 800a572:	9306      	str	r3, [sp, #24]
 800a574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a576:	2b00      	cmp	r3, #0
 800a578:	f47f af74 	bne.w	800a464 <_dtoa_r+0x7f4>
 800a57c:	2001      	movs	r0, #1
 800a57e:	e779      	b.n	800a474 <_dtoa_r+0x804>
 800a580:	2300      	movs	r3, #0
 800a582:	e7f6      	b.n	800a572 <_dtoa_r+0x902>
 800a584:	9b02      	ldr	r3, [sp, #8]
 800a586:	e7f4      	b.n	800a572 <_dtoa_r+0x902>
 800a588:	d085      	beq.n	800a496 <_dtoa_r+0x826>
 800a58a:	4618      	mov	r0, r3
 800a58c:	301c      	adds	r0, #28
 800a58e:	e77d      	b.n	800a48c <_dtoa_r+0x81c>
 800a590:	40240000 	.word	0x40240000
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	dc38      	bgt.n	800a60c <_dtoa_r+0x99c>
 800a59a:	9b05      	ldr	r3, [sp, #20]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	dd35      	ble.n	800a60c <_dtoa_r+0x99c>
 800a5a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	d10d      	bne.n	800a5c6 <_dtoa_r+0x956>
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	2205      	movs	r2, #5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 ff6d 	bl	800b490 <__multadd>
 800a5b6:	4601      	mov	r1, r0
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	4658      	mov	r0, fp
 800a5bc:	f001 f9ce 	bl	800b95c <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	f73f adbd 	bgt.w	800a140 <_dtoa_r+0x4d0>
 800a5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c8:	9d00      	ldr	r5, [sp, #0]
 800a5ca:	ea6f 0a03 	mvn.w	sl, r3
 800a5ce:	f04f 0800 	mov.w	r8, #0
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 ff39 	bl	800b44c <_Bfree>
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	f43f aeb4 	beq.w	800a348 <_dtoa_r+0x6d8>
 800a5e0:	f1b8 0f00 	cmp.w	r8, #0
 800a5e4:	d005      	beq.n	800a5f2 <_dtoa_r+0x982>
 800a5e6:	45b8      	cmp	r8, r7
 800a5e8:	d003      	beq.n	800a5f2 <_dtoa_r+0x982>
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 ff2d 	bl	800b44c <_Bfree>
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f000 ff29 	bl	800b44c <_Bfree>
 800a5fa:	e6a5      	b.n	800a348 <_dtoa_r+0x6d8>
 800a5fc:	2600      	movs	r6, #0
 800a5fe:	4637      	mov	r7, r6
 800a600:	e7e1      	b.n	800a5c6 <_dtoa_r+0x956>
 800a602:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a608:	4637      	mov	r7, r6
 800a60a:	e599      	b.n	800a140 <_dtoa_r+0x4d0>
 800a60c:	9b08      	ldr	r3, [sp, #32]
 800a60e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 80fd 	beq.w	800a812 <_dtoa_r+0xba2>
 800a618:	2d00      	cmp	r5, #0
 800a61a:	dd05      	ble.n	800a628 <_dtoa_r+0x9b8>
 800a61c:	4639      	mov	r1, r7
 800a61e:	462a      	mov	r2, r5
 800a620:	4620      	mov	r0, r4
 800a622:	f001 f92f 	bl	800b884 <__lshift>
 800a626:	4607      	mov	r7, r0
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d05c      	beq.n	800a6e8 <_dtoa_r+0xa78>
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fecb 	bl	800b3cc <_Balloc>
 800a636:	4605      	mov	r5, r0
 800a638:	b928      	cbnz	r0, 800a646 <_dtoa_r+0x9d6>
 800a63a:	4b80      	ldr	r3, [pc, #512]	; (800a83c <_dtoa_r+0xbcc>)
 800a63c:	4602      	mov	r2, r0
 800a63e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a642:	f7ff bb2e 	b.w	8009ca2 <_dtoa_r+0x32>
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	3202      	adds	r2, #2
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	f107 010c 	add.w	r1, r7, #12
 800a650:	300c      	adds	r0, #12
 800a652:	f7fd f9c3 	bl	80079dc <memcpy>
 800a656:	2201      	movs	r2, #1
 800a658:	4629      	mov	r1, r5
 800a65a:	4620      	mov	r0, r4
 800a65c:	f001 f912 	bl	800b884 <__lshift>
 800a660:	9b00      	ldr	r3, [sp, #0]
 800a662:	3301      	adds	r3, #1
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	9b00      	ldr	r3, [sp, #0]
 800a668:	444b      	add	r3, r9
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	9b02      	ldr	r3, [sp, #8]
 800a66e:	f003 0301 	and.w	r3, r3, #1
 800a672:	46b8      	mov	r8, r7
 800a674:	9306      	str	r3, [sp, #24]
 800a676:	4607      	mov	r7, r0
 800a678:	9b01      	ldr	r3, [sp, #4]
 800a67a:	4631      	mov	r1, r6
 800a67c:	3b01      	subs	r3, #1
 800a67e:	4658      	mov	r0, fp
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	f7ff fa69 	bl	8009b58 <quorem>
 800a686:	4603      	mov	r3, r0
 800a688:	3330      	adds	r3, #48	; 0x30
 800a68a:	9004      	str	r0, [sp, #16]
 800a68c:	4641      	mov	r1, r8
 800a68e:	4658      	mov	r0, fp
 800a690:	9308      	str	r3, [sp, #32]
 800a692:	f001 f963 	bl	800b95c <__mcmp>
 800a696:	463a      	mov	r2, r7
 800a698:	4681      	mov	r9, r0
 800a69a:	4631      	mov	r1, r6
 800a69c:	4620      	mov	r0, r4
 800a69e:	f001 f979 	bl	800b994 <__mdiff>
 800a6a2:	68c2      	ldr	r2, [r0, #12]
 800a6a4:	9b08      	ldr	r3, [sp, #32]
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	bb02      	cbnz	r2, 800a6ec <_dtoa_r+0xa7c>
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	4658      	mov	r0, fp
 800a6ae:	f001 f955 	bl	800b95c <__mcmp>
 800a6b2:	9b08      	ldr	r3, [sp, #32]
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a6be:	f000 fec5 	bl	800b44c <_Bfree>
 800a6c2:	9b05      	ldr	r3, [sp, #20]
 800a6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c6:	9d01      	ldr	r5, [sp, #4]
 800a6c8:	ea43 0102 	orr.w	r1, r3, r2
 800a6cc:	9b06      	ldr	r3, [sp, #24]
 800a6ce:	430b      	orrs	r3, r1
 800a6d0:	9b08      	ldr	r3, [sp, #32]
 800a6d2:	d10d      	bne.n	800a6f0 <_dtoa_r+0xa80>
 800a6d4:	2b39      	cmp	r3, #57	; 0x39
 800a6d6:	d029      	beq.n	800a72c <_dtoa_r+0xabc>
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	dd01      	ble.n	800a6e2 <_dtoa_r+0xa72>
 800a6de:	9b04      	ldr	r3, [sp, #16]
 800a6e0:	3331      	adds	r3, #49	; 0x31
 800a6e2:	9a02      	ldr	r2, [sp, #8]
 800a6e4:	7013      	strb	r3, [r2, #0]
 800a6e6:	e774      	b.n	800a5d2 <_dtoa_r+0x962>
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	e7b9      	b.n	800a660 <_dtoa_r+0x9f0>
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	e7e2      	b.n	800a6b6 <_dtoa_r+0xa46>
 800a6f0:	f1b9 0f00 	cmp.w	r9, #0
 800a6f4:	db06      	blt.n	800a704 <_dtoa_r+0xa94>
 800a6f6:	9905      	ldr	r1, [sp, #20]
 800a6f8:	ea41 0909 	orr.w	r9, r1, r9
 800a6fc:	9906      	ldr	r1, [sp, #24]
 800a6fe:	ea59 0101 	orrs.w	r1, r9, r1
 800a702:	d120      	bne.n	800a746 <_dtoa_r+0xad6>
 800a704:	2a00      	cmp	r2, #0
 800a706:	ddec      	ble.n	800a6e2 <_dtoa_r+0xa72>
 800a708:	4659      	mov	r1, fp
 800a70a:	2201      	movs	r2, #1
 800a70c:	4620      	mov	r0, r4
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	f001 f8b8 	bl	800b884 <__lshift>
 800a714:	4631      	mov	r1, r6
 800a716:	4683      	mov	fp, r0
 800a718:	f001 f920 	bl	800b95c <__mcmp>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	dc02      	bgt.n	800a728 <_dtoa_r+0xab8>
 800a722:	d1de      	bne.n	800a6e2 <_dtoa_r+0xa72>
 800a724:	07da      	lsls	r2, r3, #31
 800a726:	d5dc      	bpl.n	800a6e2 <_dtoa_r+0xa72>
 800a728:	2b39      	cmp	r3, #57	; 0x39
 800a72a:	d1d8      	bne.n	800a6de <_dtoa_r+0xa6e>
 800a72c:	9a02      	ldr	r2, [sp, #8]
 800a72e:	2339      	movs	r3, #57	; 0x39
 800a730:	7013      	strb	r3, [r2, #0]
 800a732:	462b      	mov	r3, r5
 800a734:	461d      	mov	r5, r3
 800a736:	3b01      	subs	r3, #1
 800a738:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a73c:	2a39      	cmp	r2, #57	; 0x39
 800a73e:	d050      	beq.n	800a7e2 <_dtoa_r+0xb72>
 800a740:	3201      	adds	r2, #1
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	e745      	b.n	800a5d2 <_dtoa_r+0x962>
 800a746:	2a00      	cmp	r2, #0
 800a748:	dd03      	ble.n	800a752 <_dtoa_r+0xae2>
 800a74a:	2b39      	cmp	r3, #57	; 0x39
 800a74c:	d0ee      	beq.n	800a72c <_dtoa_r+0xabc>
 800a74e:	3301      	adds	r3, #1
 800a750:	e7c7      	b.n	800a6e2 <_dtoa_r+0xa72>
 800a752:	9a01      	ldr	r2, [sp, #4]
 800a754:	9907      	ldr	r1, [sp, #28]
 800a756:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a75a:	428a      	cmp	r2, r1
 800a75c:	d02a      	beq.n	800a7b4 <_dtoa_r+0xb44>
 800a75e:	4659      	mov	r1, fp
 800a760:	2300      	movs	r3, #0
 800a762:	220a      	movs	r2, #10
 800a764:	4620      	mov	r0, r4
 800a766:	f000 fe93 	bl	800b490 <__multadd>
 800a76a:	45b8      	cmp	r8, r7
 800a76c:	4683      	mov	fp, r0
 800a76e:	f04f 0300 	mov.w	r3, #0
 800a772:	f04f 020a 	mov.w	r2, #10
 800a776:	4641      	mov	r1, r8
 800a778:	4620      	mov	r0, r4
 800a77a:	d107      	bne.n	800a78c <_dtoa_r+0xb1c>
 800a77c:	f000 fe88 	bl	800b490 <__multadd>
 800a780:	4680      	mov	r8, r0
 800a782:	4607      	mov	r7, r0
 800a784:	9b01      	ldr	r3, [sp, #4]
 800a786:	3301      	adds	r3, #1
 800a788:	9301      	str	r3, [sp, #4]
 800a78a:	e775      	b.n	800a678 <_dtoa_r+0xa08>
 800a78c:	f000 fe80 	bl	800b490 <__multadd>
 800a790:	4639      	mov	r1, r7
 800a792:	4680      	mov	r8, r0
 800a794:	2300      	movs	r3, #0
 800a796:	220a      	movs	r2, #10
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fe79 	bl	800b490 <__multadd>
 800a79e:	4607      	mov	r7, r0
 800a7a0:	e7f0      	b.n	800a784 <_dtoa_r+0xb14>
 800a7a2:	f1b9 0f00 	cmp.w	r9, #0
 800a7a6:	9a00      	ldr	r2, [sp, #0]
 800a7a8:	bfcc      	ite	gt
 800a7aa:	464d      	movgt	r5, r9
 800a7ac:	2501      	movle	r5, #1
 800a7ae:	4415      	add	r5, r2
 800a7b0:	f04f 0800 	mov.w	r8, #0
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	f001 f862 	bl	800b884 <__lshift>
 800a7c0:	4631      	mov	r1, r6
 800a7c2:	4683      	mov	fp, r0
 800a7c4:	f001 f8ca 	bl	800b95c <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	dcb2      	bgt.n	800a732 <_dtoa_r+0xac2>
 800a7cc:	d102      	bne.n	800a7d4 <_dtoa_r+0xb64>
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	07db      	lsls	r3, r3, #31
 800a7d2:	d4ae      	bmi.n	800a732 <_dtoa_r+0xac2>
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	461d      	mov	r5, r3
 800a7d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7dc:	2a30      	cmp	r2, #48	; 0x30
 800a7de:	d0fa      	beq.n	800a7d6 <_dtoa_r+0xb66>
 800a7e0:	e6f7      	b.n	800a5d2 <_dtoa_r+0x962>
 800a7e2:	9a00      	ldr	r2, [sp, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d1a5      	bne.n	800a734 <_dtoa_r+0xac4>
 800a7e8:	f10a 0a01 	add.w	sl, sl, #1
 800a7ec:	2331      	movs	r3, #49	; 0x31
 800a7ee:	e779      	b.n	800a6e4 <_dtoa_r+0xa74>
 800a7f0:	4b13      	ldr	r3, [pc, #76]	; (800a840 <_dtoa_r+0xbd0>)
 800a7f2:	f7ff baaf 	b.w	8009d54 <_dtoa_r+0xe4>
 800a7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f47f aa86 	bne.w	8009d0a <_dtoa_r+0x9a>
 800a7fe:	4b11      	ldr	r3, [pc, #68]	; (800a844 <_dtoa_r+0xbd4>)
 800a800:	f7ff baa8 	b.w	8009d54 <_dtoa_r+0xe4>
 800a804:	f1b9 0f00 	cmp.w	r9, #0
 800a808:	dc03      	bgt.n	800a812 <_dtoa_r+0xba2>
 800a80a:	9b05      	ldr	r3, [sp, #20]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	f73f aec9 	bgt.w	800a5a4 <_dtoa_r+0x934>
 800a812:	9d00      	ldr	r5, [sp, #0]
 800a814:	4631      	mov	r1, r6
 800a816:	4658      	mov	r0, fp
 800a818:	f7ff f99e 	bl	8009b58 <quorem>
 800a81c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a820:	f805 3b01 	strb.w	r3, [r5], #1
 800a824:	9a00      	ldr	r2, [sp, #0]
 800a826:	1aaa      	subs	r2, r5, r2
 800a828:	4591      	cmp	r9, r2
 800a82a:	ddba      	ble.n	800a7a2 <_dtoa_r+0xb32>
 800a82c:	4659      	mov	r1, fp
 800a82e:	2300      	movs	r3, #0
 800a830:	220a      	movs	r2, #10
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fe2c 	bl	800b490 <__multadd>
 800a838:	4683      	mov	fp, r0
 800a83a:	e7eb      	b.n	800a814 <_dtoa_r+0xba4>
 800a83c:	0800eecc 	.word	0x0800eecc
 800a840:	0800f131 	.word	0x0800f131
 800a844:	0800ee49 	.word	0x0800ee49

0800a848 <__sflush_r>:
 800a848:	898a      	ldrh	r2, [r1, #12]
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	4605      	mov	r5, r0
 800a850:	0710      	lsls	r0, r2, #28
 800a852:	460c      	mov	r4, r1
 800a854:	d458      	bmi.n	800a908 <__sflush_r+0xc0>
 800a856:	684b      	ldr	r3, [r1, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc05      	bgt.n	800a868 <__sflush_r+0x20>
 800a85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dc02      	bgt.n	800a868 <__sflush_r+0x20>
 800a862:	2000      	movs	r0, #0
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a86a:	2e00      	cmp	r6, #0
 800a86c:	d0f9      	beq.n	800a862 <__sflush_r+0x1a>
 800a86e:	2300      	movs	r3, #0
 800a870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a874:	682f      	ldr	r7, [r5, #0]
 800a876:	602b      	str	r3, [r5, #0]
 800a878:	d032      	beq.n	800a8e0 <__sflush_r+0x98>
 800a87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	075a      	lsls	r2, r3, #29
 800a880:	d505      	bpl.n	800a88e <__sflush_r+0x46>
 800a882:	6863      	ldr	r3, [r4, #4]
 800a884:	1ac0      	subs	r0, r0, r3
 800a886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a888:	b10b      	cbz	r3, 800a88e <__sflush_r+0x46>
 800a88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a88c:	1ac0      	subs	r0, r0, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	4602      	mov	r2, r0
 800a892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a894:	6a21      	ldr	r1, [r4, #32]
 800a896:	4628      	mov	r0, r5
 800a898:	47b0      	blx	r6
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	89a3      	ldrh	r3, [r4, #12]
 800a89e:	d106      	bne.n	800a8ae <__sflush_r+0x66>
 800a8a0:	6829      	ldr	r1, [r5, #0]
 800a8a2:	291d      	cmp	r1, #29
 800a8a4:	d82c      	bhi.n	800a900 <__sflush_r+0xb8>
 800a8a6:	4a2a      	ldr	r2, [pc, #168]	; (800a950 <__sflush_r+0x108>)
 800a8a8:	40ca      	lsrs	r2, r1
 800a8aa:	07d6      	lsls	r6, r2, #31
 800a8ac:	d528      	bpl.n	800a900 <__sflush_r+0xb8>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	6062      	str	r2, [r4, #4]
 800a8b2:	04d9      	lsls	r1, r3, #19
 800a8b4:	6922      	ldr	r2, [r4, #16]
 800a8b6:	6022      	str	r2, [r4, #0]
 800a8b8:	d504      	bpl.n	800a8c4 <__sflush_r+0x7c>
 800a8ba:	1c42      	adds	r2, r0, #1
 800a8bc:	d101      	bne.n	800a8c2 <__sflush_r+0x7a>
 800a8be:	682b      	ldr	r3, [r5, #0]
 800a8c0:	b903      	cbnz	r3, 800a8c4 <__sflush_r+0x7c>
 800a8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800a8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c6:	602f      	str	r7, [r5, #0]
 800a8c8:	2900      	cmp	r1, #0
 800a8ca:	d0ca      	beq.n	800a862 <__sflush_r+0x1a>
 800a8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	d002      	beq.n	800a8da <__sflush_r+0x92>
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f7fd f897 	bl	8007a08 <_free_r>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800a8de:	e7c1      	b.n	800a864 <__sflush_r+0x1c>
 800a8e0:	6a21      	ldr	r1, [r4, #32]
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b0      	blx	r6
 800a8e8:	1c41      	adds	r1, r0, #1
 800a8ea:	d1c7      	bne.n	800a87c <__sflush_r+0x34>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0c4      	beq.n	800a87c <__sflush_r+0x34>
 800a8f2:	2b1d      	cmp	r3, #29
 800a8f4:	d001      	beq.n	800a8fa <__sflush_r+0xb2>
 800a8f6:	2b16      	cmp	r3, #22
 800a8f8:	d101      	bne.n	800a8fe <__sflush_r+0xb6>
 800a8fa:	602f      	str	r7, [r5, #0]
 800a8fc:	e7b1      	b.n	800a862 <__sflush_r+0x1a>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	e7ad      	b.n	800a864 <__sflush_r+0x1c>
 800a908:	690f      	ldr	r7, [r1, #16]
 800a90a:	2f00      	cmp	r7, #0
 800a90c:	d0a9      	beq.n	800a862 <__sflush_r+0x1a>
 800a90e:	0793      	lsls	r3, r2, #30
 800a910:	680e      	ldr	r6, [r1, #0]
 800a912:	bf08      	it	eq
 800a914:	694b      	ldreq	r3, [r1, #20]
 800a916:	600f      	str	r7, [r1, #0]
 800a918:	bf18      	it	ne
 800a91a:	2300      	movne	r3, #0
 800a91c:	eba6 0807 	sub.w	r8, r6, r7
 800a920:	608b      	str	r3, [r1, #8]
 800a922:	f1b8 0f00 	cmp.w	r8, #0
 800a926:	dd9c      	ble.n	800a862 <__sflush_r+0x1a>
 800a928:	6a21      	ldr	r1, [r4, #32]
 800a92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a92c:	4643      	mov	r3, r8
 800a92e:	463a      	mov	r2, r7
 800a930:	4628      	mov	r0, r5
 800a932:	47b0      	blx	r6
 800a934:	2800      	cmp	r0, #0
 800a936:	dc06      	bgt.n	800a946 <__sflush_r+0xfe>
 800a938:	89a3      	ldrh	r3, [r4, #12]
 800a93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	f04f 30ff 	mov.w	r0, #4294967295
 800a944:	e78e      	b.n	800a864 <__sflush_r+0x1c>
 800a946:	4407      	add	r7, r0
 800a948:	eba8 0800 	sub.w	r8, r8, r0
 800a94c:	e7e9      	b.n	800a922 <__sflush_r+0xda>
 800a94e:	bf00      	nop
 800a950:	20400001 	.word	0x20400001

0800a954 <_fflush_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	690b      	ldr	r3, [r1, #16]
 800a958:	4605      	mov	r5, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	b913      	cbnz	r3, 800a964 <_fflush_r+0x10>
 800a95e:	2500      	movs	r5, #0
 800a960:	4628      	mov	r0, r5
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	b118      	cbz	r0, 800a96e <_fflush_r+0x1a>
 800a966:	6983      	ldr	r3, [r0, #24]
 800a968:	b90b      	cbnz	r3, 800a96e <_fflush_r+0x1a>
 800a96a:	f000 f887 	bl	800aa7c <__sinit>
 800a96e:	4b14      	ldr	r3, [pc, #80]	; (800a9c0 <_fflush_r+0x6c>)
 800a970:	429c      	cmp	r4, r3
 800a972:	d11b      	bne.n	800a9ac <_fflush_r+0x58>
 800a974:	686c      	ldr	r4, [r5, #4]
 800a976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0ef      	beq.n	800a95e <_fflush_r+0xa>
 800a97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a980:	07d0      	lsls	r0, r2, #31
 800a982:	d404      	bmi.n	800a98e <_fflush_r+0x3a>
 800a984:	0599      	lsls	r1, r3, #22
 800a986:	d402      	bmi.n	800a98e <_fflush_r+0x3a>
 800a988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98a:	f000 fc88 	bl	800b29e <__retarget_lock_acquire_recursive>
 800a98e:	4628      	mov	r0, r5
 800a990:	4621      	mov	r1, r4
 800a992:	f7ff ff59 	bl	800a848 <__sflush_r>
 800a996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a998:	07da      	lsls	r2, r3, #31
 800a99a:	4605      	mov	r5, r0
 800a99c:	d4e0      	bmi.n	800a960 <_fflush_r+0xc>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	059b      	lsls	r3, r3, #22
 800a9a2:	d4dd      	bmi.n	800a960 <_fflush_r+0xc>
 800a9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9a6:	f000 fc7b 	bl	800b2a0 <__retarget_lock_release_recursive>
 800a9aa:	e7d9      	b.n	800a960 <_fflush_r+0xc>
 800a9ac:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <_fflush_r+0x70>)
 800a9ae:	429c      	cmp	r4, r3
 800a9b0:	d101      	bne.n	800a9b6 <_fflush_r+0x62>
 800a9b2:	68ac      	ldr	r4, [r5, #8]
 800a9b4:	e7df      	b.n	800a976 <_fflush_r+0x22>
 800a9b6:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <_fflush_r+0x74>)
 800a9b8:	429c      	cmp	r4, r3
 800a9ba:	bf08      	it	eq
 800a9bc:	68ec      	ldreq	r4, [r5, #12]
 800a9be:	e7da      	b.n	800a976 <_fflush_r+0x22>
 800a9c0:	0800ef00 	.word	0x0800ef00
 800a9c4:	0800ef20 	.word	0x0800ef20
 800a9c8:	0800eee0 	.word	0x0800eee0

0800a9cc <std>:
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9da:	6083      	str	r3, [r0, #8]
 800a9dc:	8181      	strh	r1, [r0, #12]
 800a9de:	6643      	str	r3, [r0, #100]	; 0x64
 800a9e0:	81c2      	strh	r2, [r0, #14]
 800a9e2:	6183      	str	r3, [r0, #24]
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	2208      	movs	r2, #8
 800a9e8:	305c      	adds	r0, #92	; 0x5c
 800a9ea:	f7fd f805 	bl	80079f8 <memset>
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <std+0x38>)
 800a9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <std+0x3c>)
 800a9f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9f6:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <std+0x40>)
 800a9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9fa:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <std+0x44>)
 800a9fc:	6224      	str	r4, [r4, #32]
 800a9fe:	6323      	str	r3, [r4, #48]	; 0x30
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	bf00      	nop
 800aa04:	08008ab9 	.word	0x08008ab9
 800aa08:	08008adf 	.word	0x08008adf
 800aa0c:	08008b17 	.word	0x08008b17
 800aa10:	08008b3b 	.word	0x08008b3b

0800aa14 <_cleanup_r>:
 800aa14:	4901      	ldr	r1, [pc, #4]	; (800aa1c <_cleanup_r+0x8>)
 800aa16:	f000 b8af 	b.w	800ab78 <_fwalk_reent>
 800aa1a:	bf00      	nop
 800aa1c:	0800a955 	.word	0x0800a955

0800aa20 <__sfmoreglue>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	1e4a      	subs	r2, r1, #1
 800aa24:	2568      	movs	r5, #104	; 0x68
 800aa26:	4355      	muls	r5, r2
 800aa28:	460e      	mov	r6, r1
 800aa2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa2e:	f7fd f83b 	bl	8007aa8 <_malloc_r>
 800aa32:	4604      	mov	r4, r0
 800aa34:	b140      	cbz	r0, 800aa48 <__sfmoreglue+0x28>
 800aa36:	2100      	movs	r1, #0
 800aa38:	e9c0 1600 	strd	r1, r6, [r0]
 800aa3c:	300c      	adds	r0, #12
 800aa3e:	60a0      	str	r0, [r4, #8]
 800aa40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa44:	f7fc ffd8 	bl	80079f8 <memset>
 800aa48:	4620      	mov	r0, r4
 800aa4a:	bd70      	pop	{r4, r5, r6, pc}

0800aa4c <__sfp_lock_acquire>:
 800aa4c:	4801      	ldr	r0, [pc, #4]	; (800aa54 <__sfp_lock_acquire+0x8>)
 800aa4e:	f000 bc26 	b.w	800b29e <__retarget_lock_acquire_recursive>
 800aa52:	bf00      	nop
 800aa54:	2000185c 	.word	0x2000185c

0800aa58 <__sfp_lock_release>:
 800aa58:	4801      	ldr	r0, [pc, #4]	; (800aa60 <__sfp_lock_release+0x8>)
 800aa5a:	f000 bc21 	b.w	800b2a0 <__retarget_lock_release_recursive>
 800aa5e:	bf00      	nop
 800aa60:	2000185c 	.word	0x2000185c

0800aa64 <__sinit_lock_acquire>:
 800aa64:	4801      	ldr	r0, [pc, #4]	; (800aa6c <__sinit_lock_acquire+0x8>)
 800aa66:	f000 bc1a 	b.w	800b29e <__retarget_lock_acquire_recursive>
 800aa6a:	bf00      	nop
 800aa6c:	20001857 	.word	0x20001857

0800aa70 <__sinit_lock_release>:
 800aa70:	4801      	ldr	r0, [pc, #4]	; (800aa78 <__sinit_lock_release+0x8>)
 800aa72:	f000 bc15 	b.w	800b2a0 <__retarget_lock_release_recursive>
 800aa76:	bf00      	nop
 800aa78:	20001857 	.word	0x20001857

0800aa7c <__sinit>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4604      	mov	r4, r0
 800aa80:	f7ff fff0 	bl	800aa64 <__sinit_lock_acquire>
 800aa84:	69a3      	ldr	r3, [r4, #24]
 800aa86:	b11b      	cbz	r3, 800aa90 <__sinit+0x14>
 800aa88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa8c:	f7ff bff0 	b.w	800aa70 <__sinit_lock_release>
 800aa90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa94:	6523      	str	r3, [r4, #80]	; 0x50
 800aa96:	4b13      	ldr	r3, [pc, #76]	; (800aae4 <__sinit+0x68>)
 800aa98:	4a13      	ldr	r2, [pc, #76]	; (800aae8 <__sinit+0x6c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa9e:	42a3      	cmp	r3, r4
 800aaa0:	bf04      	itt	eq
 800aaa2:	2301      	moveq	r3, #1
 800aaa4:	61a3      	streq	r3, [r4, #24]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 f820 	bl	800aaec <__sfp>
 800aaac:	6060      	str	r0, [r4, #4]
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f81c 	bl	800aaec <__sfp>
 800aab4:	60a0      	str	r0, [r4, #8]
 800aab6:	4620      	mov	r0, r4
 800aab8:	f000 f818 	bl	800aaec <__sfp>
 800aabc:	2200      	movs	r2, #0
 800aabe:	60e0      	str	r0, [r4, #12]
 800aac0:	2104      	movs	r1, #4
 800aac2:	6860      	ldr	r0, [r4, #4]
 800aac4:	f7ff ff82 	bl	800a9cc <std>
 800aac8:	68a0      	ldr	r0, [r4, #8]
 800aaca:	2201      	movs	r2, #1
 800aacc:	2109      	movs	r1, #9
 800aace:	f7ff ff7d 	bl	800a9cc <std>
 800aad2:	68e0      	ldr	r0, [r4, #12]
 800aad4:	2202      	movs	r2, #2
 800aad6:	2112      	movs	r1, #18
 800aad8:	f7ff ff78 	bl	800a9cc <std>
 800aadc:	2301      	movs	r3, #1
 800aade:	61a3      	str	r3, [r4, #24]
 800aae0:	e7d2      	b.n	800aa88 <__sinit+0xc>
 800aae2:	bf00      	nop
 800aae4:	0800ecbc 	.word	0x0800ecbc
 800aae8:	0800aa15 	.word	0x0800aa15

0800aaec <__sfp>:
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	4607      	mov	r7, r0
 800aaf0:	f7ff ffac 	bl	800aa4c <__sfp_lock_acquire>
 800aaf4:	4b1e      	ldr	r3, [pc, #120]	; (800ab70 <__sfp+0x84>)
 800aaf6:	681e      	ldr	r6, [r3, #0]
 800aaf8:	69b3      	ldr	r3, [r6, #24]
 800aafa:	b913      	cbnz	r3, 800ab02 <__sfp+0x16>
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff ffbd 	bl	800aa7c <__sinit>
 800ab02:	3648      	adds	r6, #72	; 0x48
 800ab04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	d503      	bpl.n	800ab14 <__sfp+0x28>
 800ab0c:	6833      	ldr	r3, [r6, #0]
 800ab0e:	b30b      	cbz	r3, 800ab54 <__sfp+0x68>
 800ab10:	6836      	ldr	r6, [r6, #0]
 800ab12:	e7f7      	b.n	800ab04 <__sfp+0x18>
 800ab14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ab18:	b9d5      	cbnz	r5, 800ab50 <__sfp+0x64>
 800ab1a:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <__sfp+0x88>)
 800ab1c:	60e3      	str	r3, [r4, #12]
 800ab1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab22:	6665      	str	r5, [r4, #100]	; 0x64
 800ab24:	f000 fbba 	bl	800b29c <__retarget_lock_init_recursive>
 800ab28:	f7ff ff96 	bl	800aa58 <__sfp_lock_release>
 800ab2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ab30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ab34:	6025      	str	r5, [r4, #0]
 800ab36:	61a5      	str	r5, [r4, #24]
 800ab38:	2208      	movs	r2, #8
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab40:	f7fc ff5a 	bl	80079f8 <memset>
 800ab44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	3468      	adds	r4, #104	; 0x68
 800ab52:	e7d9      	b.n	800ab08 <__sfp+0x1c>
 800ab54:	2104      	movs	r1, #4
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff ff62 	bl	800aa20 <__sfmoreglue>
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	6030      	str	r0, [r6, #0]
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d1d5      	bne.n	800ab10 <__sfp+0x24>
 800ab64:	f7ff ff78 	bl	800aa58 <__sfp_lock_release>
 800ab68:	230c      	movs	r3, #12
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	e7ee      	b.n	800ab4c <__sfp+0x60>
 800ab6e:	bf00      	nop
 800ab70:	0800ecbc 	.word	0x0800ecbc
 800ab74:	ffff0001 	.word	0xffff0001

0800ab78 <_fwalk_reent>:
 800ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	4688      	mov	r8, r1
 800ab80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab84:	2700      	movs	r7, #0
 800ab86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab8a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab8e:	d505      	bpl.n	800ab9c <_fwalk_reent+0x24>
 800ab90:	6824      	ldr	r4, [r4, #0]
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d1f7      	bne.n	800ab86 <_fwalk_reent+0xe>
 800ab96:	4638      	mov	r0, r7
 800ab98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9c:	89ab      	ldrh	r3, [r5, #12]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d907      	bls.n	800abb2 <_fwalk_reent+0x3a>
 800aba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aba6:	3301      	adds	r3, #1
 800aba8:	d003      	beq.n	800abb2 <_fwalk_reent+0x3a>
 800abaa:	4629      	mov	r1, r5
 800abac:	4630      	mov	r0, r6
 800abae:	47c0      	blx	r8
 800abb0:	4307      	orrs	r7, r0
 800abb2:	3568      	adds	r5, #104	; 0x68
 800abb4:	e7e9      	b.n	800ab8a <_fwalk_reent+0x12>

0800abb6 <rshift>:
 800abb6:	6903      	ldr	r3, [r0, #16]
 800abb8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abc4:	f100 0414 	add.w	r4, r0, #20
 800abc8:	dd45      	ble.n	800ac56 <rshift+0xa0>
 800abca:	f011 011f 	ands.w	r1, r1, #31
 800abce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abd2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abd6:	d10c      	bne.n	800abf2 <rshift+0x3c>
 800abd8:	f100 0710 	add.w	r7, r0, #16
 800abdc:	4629      	mov	r1, r5
 800abde:	42b1      	cmp	r1, r6
 800abe0:	d334      	bcc.n	800ac4c <rshift+0x96>
 800abe2:	1a9b      	subs	r3, r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	1eea      	subs	r2, r5, #3
 800abe8:	4296      	cmp	r6, r2
 800abea:	bf38      	it	cc
 800abec:	2300      	movcc	r3, #0
 800abee:	4423      	add	r3, r4
 800abf0:	e015      	b.n	800ac1e <rshift+0x68>
 800abf2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abf6:	f1c1 0820 	rsb	r8, r1, #32
 800abfa:	40cf      	lsrs	r7, r1
 800abfc:	f105 0e04 	add.w	lr, r5, #4
 800ac00:	46a1      	mov	r9, r4
 800ac02:	4576      	cmp	r6, lr
 800ac04:	46f4      	mov	ip, lr
 800ac06:	d815      	bhi.n	800ac34 <rshift+0x7e>
 800ac08:	1a9b      	subs	r3, r3, r2
 800ac0a:	009a      	lsls	r2, r3, #2
 800ac0c:	3a04      	subs	r2, #4
 800ac0e:	3501      	adds	r5, #1
 800ac10:	42ae      	cmp	r6, r5
 800ac12:	bf38      	it	cc
 800ac14:	2200      	movcc	r2, #0
 800ac16:	18a3      	adds	r3, r4, r2
 800ac18:	50a7      	str	r7, [r4, r2]
 800ac1a:	b107      	cbz	r7, 800ac1e <rshift+0x68>
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	1b1a      	subs	r2, r3, r4
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac26:	bf08      	it	eq
 800ac28:	2300      	moveq	r3, #0
 800ac2a:	6102      	str	r2, [r0, #16]
 800ac2c:	bf08      	it	eq
 800ac2e:	6143      	streq	r3, [r0, #20]
 800ac30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac34:	f8dc c000 	ldr.w	ip, [ip]
 800ac38:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac3c:	ea4c 0707 	orr.w	r7, ip, r7
 800ac40:	f849 7b04 	str.w	r7, [r9], #4
 800ac44:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac48:	40cf      	lsrs	r7, r1
 800ac4a:	e7da      	b.n	800ac02 <rshift+0x4c>
 800ac4c:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac50:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac54:	e7c3      	b.n	800abde <rshift+0x28>
 800ac56:	4623      	mov	r3, r4
 800ac58:	e7e1      	b.n	800ac1e <rshift+0x68>

0800ac5a <__hexdig_fun>:
 800ac5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d802      	bhi.n	800ac68 <__hexdig_fun+0xe>
 800ac62:	3820      	subs	r0, #32
 800ac64:	b2c0      	uxtb	r0, r0
 800ac66:	4770      	bx	lr
 800ac68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d801      	bhi.n	800ac74 <__hexdig_fun+0x1a>
 800ac70:	3847      	subs	r0, #71	; 0x47
 800ac72:	e7f7      	b.n	800ac64 <__hexdig_fun+0xa>
 800ac74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ac78:	2b05      	cmp	r3, #5
 800ac7a:	d801      	bhi.n	800ac80 <__hexdig_fun+0x26>
 800ac7c:	3827      	subs	r0, #39	; 0x27
 800ac7e:	e7f1      	b.n	800ac64 <__hexdig_fun+0xa>
 800ac80:	2000      	movs	r0, #0
 800ac82:	4770      	bx	lr

0800ac84 <__gethex>:
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	ed2d 8b02 	vpush	{d8}
 800ac8c:	b089      	sub	sp, #36	; 0x24
 800ac8e:	ee08 0a10 	vmov	s16, r0
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	4bbc      	ldr	r3, [pc, #752]	; (800af88 <__gethex+0x304>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	468b      	mov	fp, r1
 800ac9e:	4690      	mov	r8, r2
 800aca0:	f7f5 fa9e 	bl	80001e0 <strlen>
 800aca4:	9b01      	ldr	r3, [sp, #4]
 800aca6:	f8db 2000 	ldr.w	r2, [fp]
 800acaa:	4403      	add	r3, r0
 800acac:	4682      	mov	sl, r0
 800acae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	1c93      	adds	r3, r2, #2
 800acb6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800acba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800acbe:	32fe      	adds	r2, #254	; 0xfe
 800acc0:	18d1      	adds	r1, r2, r3
 800acc2:	461f      	mov	r7, r3
 800acc4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acc8:	9100      	str	r1, [sp, #0]
 800acca:	2830      	cmp	r0, #48	; 0x30
 800accc:	d0f8      	beq.n	800acc0 <__gethex+0x3c>
 800acce:	f7ff ffc4 	bl	800ac5a <__hexdig_fun>
 800acd2:	4604      	mov	r4, r0
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d13a      	bne.n	800ad4e <__gethex+0xca>
 800acd8:	9901      	ldr	r1, [sp, #4]
 800acda:	4652      	mov	r2, sl
 800acdc:	4638      	mov	r0, r7
 800acde:	f001 fe69 	bl	800c9b4 <strncmp>
 800ace2:	4605      	mov	r5, r0
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d168      	bne.n	800adba <__gethex+0x136>
 800ace8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800acec:	eb07 060a 	add.w	r6, r7, sl
 800acf0:	f7ff ffb3 	bl	800ac5a <__hexdig_fun>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d062      	beq.n	800adbe <__gethex+0x13a>
 800acf8:	4633      	mov	r3, r6
 800acfa:	7818      	ldrb	r0, [r3, #0]
 800acfc:	2830      	cmp	r0, #48	; 0x30
 800acfe:	461f      	mov	r7, r3
 800ad00:	f103 0301 	add.w	r3, r3, #1
 800ad04:	d0f9      	beq.n	800acfa <__gethex+0x76>
 800ad06:	f7ff ffa8 	bl	800ac5a <__hexdig_fun>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	fab0 f480 	clz	r4, r0
 800ad10:	0964      	lsrs	r4, r4, #5
 800ad12:	4635      	mov	r5, r6
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	463a      	mov	r2, r7
 800ad18:	4616      	mov	r6, r2
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	7830      	ldrb	r0, [r6, #0]
 800ad1e:	f7ff ff9c 	bl	800ac5a <__hexdig_fun>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d1f8      	bne.n	800ad18 <__gethex+0x94>
 800ad26:	9901      	ldr	r1, [sp, #4]
 800ad28:	4652      	mov	r2, sl
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f001 fe42 	bl	800c9b4 <strncmp>
 800ad30:	b980      	cbnz	r0, 800ad54 <__gethex+0xd0>
 800ad32:	b94d      	cbnz	r5, 800ad48 <__gethex+0xc4>
 800ad34:	eb06 050a 	add.w	r5, r6, sl
 800ad38:	462a      	mov	r2, r5
 800ad3a:	4616      	mov	r6, r2
 800ad3c:	3201      	adds	r2, #1
 800ad3e:	7830      	ldrb	r0, [r6, #0]
 800ad40:	f7ff ff8b 	bl	800ac5a <__hexdig_fun>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d1f8      	bne.n	800ad3a <__gethex+0xb6>
 800ad48:	1bad      	subs	r5, r5, r6
 800ad4a:	00ad      	lsls	r5, r5, #2
 800ad4c:	e004      	b.n	800ad58 <__gethex+0xd4>
 800ad4e:	2400      	movs	r4, #0
 800ad50:	4625      	mov	r5, r4
 800ad52:	e7e0      	b.n	800ad16 <__gethex+0x92>
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	d1f7      	bne.n	800ad48 <__gethex+0xc4>
 800ad58:	7833      	ldrb	r3, [r6, #0]
 800ad5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad5e:	2b50      	cmp	r3, #80	; 0x50
 800ad60:	d13b      	bne.n	800adda <__gethex+0x156>
 800ad62:	7873      	ldrb	r3, [r6, #1]
 800ad64:	2b2b      	cmp	r3, #43	; 0x2b
 800ad66:	d02c      	beq.n	800adc2 <__gethex+0x13e>
 800ad68:	2b2d      	cmp	r3, #45	; 0x2d
 800ad6a:	d02e      	beq.n	800adca <__gethex+0x146>
 800ad6c:	1c71      	adds	r1, r6, #1
 800ad6e:	f04f 0900 	mov.w	r9, #0
 800ad72:	7808      	ldrb	r0, [r1, #0]
 800ad74:	f7ff ff71 	bl	800ac5a <__hexdig_fun>
 800ad78:	1e43      	subs	r3, r0, #1
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b18      	cmp	r3, #24
 800ad7e:	d82c      	bhi.n	800adda <__gethex+0x156>
 800ad80:	f1a0 0210 	sub.w	r2, r0, #16
 800ad84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad88:	f7ff ff67 	bl	800ac5a <__hexdig_fun>
 800ad8c:	1e43      	subs	r3, r0, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b18      	cmp	r3, #24
 800ad92:	d91d      	bls.n	800add0 <__gethex+0x14c>
 800ad94:	f1b9 0f00 	cmp.w	r9, #0
 800ad98:	d000      	beq.n	800ad9c <__gethex+0x118>
 800ad9a:	4252      	negs	r2, r2
 800ad9c:	4415      	add	r5, r2
 800ad9e:	f8cb 1000 	str.w	r1, [fp]
 800ada2:	b1e4      	cbz	r4, 800adde <__gethex+0x15a>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bf14      	ite	ne
 800adaa:	2700      	movne	r7, #0
 800adac:	2706      	moveq	r7, #6
 800adae:	4638      	mov	r0, r7
 800adb0:	b009      	add	sp, #36	; 0x24
 800adb2:	ecbd 8b02 	vpop	{d8}
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	463e      	mov	r6, r7
 800adbc:	4625      	mov	r5, r4
 800adbe:	2401      	movs	r4, #1
 800adc0:	e7ca      	b.n	800ad58 <__gethex+0xd4>
 800adc2:	f04f 0900 	mov.w	r9, #0
 800adc6:	1cb1      	adds	r1, r6, #2
 800adc8:	e7d3      	b.n	800ad72 <__gethex+0xee>
 800adca:	f04f 0901 	mov.w	r9, #1
 800adce:	e7fa      	b.n	800adc6 <__gethex+0x142>
 800add0:	230a      	movs	r3, #10
 800add2:	fb03 0202 	mla	r2, r3, r2, r0
 800add6:	3a10      	subs	r2, #16
 800add8:	e7d4      	b.n	800ad84 <__gethex+0x100>
 800adda:	4631      	mov	r1, r6
 800addc:	e7df      	b.n	800ad9e <__gethex+0x11a>
 800adde:	1bf3      	subs	r3, r6, r7
 800ade0:	3b01      	subs	r3, #1
 800ade2:	4621      	mov	r1, r4
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	dc0b      	bgt.n	800ae00 <__gethex+0x17c>
 800ade8:	ee18 0a10 	vmov	r0, s16
 800adec:	f000 faee 	bl	800b3cc <_Balloc>
 800adf0:	4604      	mov	r4, r0
 800adf2:	b940      	cbnz	r0, 800ae06 <__gethex+0x182>
 800adf4:	4b65      	ldr	r3, [pc, #404]	; (800af8c <__gethex+0x308>)
 800adf6:	4602      	mov	r2, r0
 800adf8:	21de      	movs	r1, #222	; 0xde
 800adfa:	4865      	ldr	r0, [pc, #404]	; (800af90 <__gethex+0x30c>)
 800adfc:	f001 feb2 	bl	800cb64 <__assert_func>
 800ae00:	3101      	adds	r1, #1
 800ae02:	105b      	asrs	r3, r3, #1
 800ae04:	e7ee      	b.n	800ade4 <__gethex+0x160>
 800ae06:	f100 0914 	add.w	r9, r0, #20
 800ae0a:	f04f 0b00 	mov.w	fp, #0
 800ae0e:	f1ca 0301 	rsb	r3, sl, #1
 800ae12:	f8cd 9008 	str.w	r9, [sp, #8]
 800ae16:	f8cd b000 	str.w	fp, [sp]
 800ae1a:	9306      	str	r3, [sp, #24]
 800ae1c:	42b7      	cmp	r7, r6
 800ae1e:	d340      	bcc.n	800aea2 <__gethex+0x21e>
 800ae20:	9802      	ldr	r0, [sp, #8]
 800ae22:	9b00      	ldr	r3, [sp, #0]
 800ae24:	f840 3b04 	str.w	r3, [r0], #4
 800ae28:	eba0 0009 	sub.w	r0, r0, r9
 800ae2c:	1080      	asrs	r0, r0, #2
 800ae2e:	0146      	lsls	r6, r0, #5
 800ae30:	6120      	str	r0, [r4, #16]
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fbc0 	bl	800b5b8 <__hi0bits>
 800ae38:	1a30      	subs	r0, r6, r0
 800ae3a:	f8d8 6000 	ldr.w	r6, [r8]
 800ae3e:	42b0      	cmp	r0, r6
 800ae40:	dd63      	ble.n	800af0a <__gethex+0x286>
 800ae42:	1b87      	subs	r7, r0, r6
 800ae44:	4639      	mov	r1, r7
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 ff5a 	bl	800bd00 <__any_on>
 800ae4c:	4682      	mov	sl, r0
 800ae4e:	b1a8      	cbz	r0, 800ae7c <__gethex+0x1f8>
 800ae50:	1e7b      	subs	r3, r7, #1
 800ae52:	1159      	asrs	r1, r3, #5
 800ae54:	f003 021f 	and.w	r2, r3, #31
 800ae58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ae5c:	f04f 0a01 	mov.w	sl, #1
 800ae60:	fa0a f202 	lsl.w	r2, sl, r2
 800ae64:	420a      	tst	r2, r1
 800ae66:	d009      	beq.n	800ae7c <__gethex+0x1f8>
 800ae68:	4553      	cmp	r3, sl
 800ae6a:	dd05      	ble.n	800ae78 <__gethex+0x1f4>
 800ae6c:	1eb9      	subs	r1, r7, #2
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 ff46 	bl	800bd00 <__any_on>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d145      	bne.n	800af04 <__gethex+0x280>
 800ae78:	f04f 0a02 	mov.w	sl, #2
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f7ff fe99 	bl	800abb6 <rshift>
 800ae84:	443d      	add	r5, r7
 800ae86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae8a:	42ab      	cmp	r3, r5
 800ae8c:	da4c      	bge.n	800af28 <__gethex+0x2a4>
 800ae8e:	ee18 0a10 	vmov	r0, s16
 800ae92:	4621      	mov	r1, r4
 800ae94:	f000 fada 	bl	800b44c <_Bfree>
 800ae98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	27a3      	movs	r7, #163	; 0xa3
 800aea0:	e785      	b.n	800adae <__gethex+0x12a>
 800aea2:	1e73      	subs	r3, r6, #1
 800aea4:	9a05      	ldr	r2, [sp, #20]
 800aea6:	9303      	str	r3, [sp, #12]
 800aea8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d019      	beq.n	800aee4 <__gethex+0x260>
 800aeb0:	f1bb 0f20 	cmp.w	fp, #32
 800aeb4:	d107      	bne.n	800aec6 <__gethex+0x242>
 800aeb6:	9b02      	ldr	r3, [sp, #8]
 800aeb8:	9a00      	ldr	r2, [sp, #0]
 800aeba:	f843 2b04 	str.w	r2, [r3], #4
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	2300      	movs	r3, #0
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	469b      	mov	fp, r3
 800aec6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aeca:	f7ff fec6 	bl	800ac5a <__hexdig_fun>
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	f000 000f 	and.w	r0, r0, #15
 800aed4:	fa00 f00b 	lsl.w	r0, r0, fp
 800aed8:	4303      	orrs	r3, r0
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	f10b 0b04 	add.w	fp, fp, #4
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	e00d      	b.n	800af00 <__gethex+0x27c>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	9a06      	ldr	r2, [sp, #24]
 800aee8:	4413      	add	r3, r2
 800aeea:	42bb      	cmp	r3, r7
 800aeec:	d3e0      	bcc.n	800aeb0 <__gethex+0x22c>
 800aeee:	4618      	mov	r0, r3
 800aef0:	9901      	ldr	r1, [sp, #4]
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	4652      	mov	r2, sl
 800aef6:	f001 fd5d 	bl	800c9b4 <strncmp>
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d1d7      	bne.n	800aeb0 <__gethex+0x22c>
 800af00:	461e      	mov	r6, r3
 800af02:	e78b      	b.n	800ae1c <__gethex+0x198>
 800af04:	f04f 0a03 	mov.w	sl, #3
 800af08:	e7b8      	b.n	800ae7c <__gethex+0x1f8>
 800af0a:	da0a      	bge.n	800af22 <__gethex+0x29e>
 800af0c:	1a37      	subs	r7, r6, r0
 800af0e:	4621      	mov	r1, r4
 800af10:	ee18 0a10 	vmov	r0, s16
 800af14:	463a      	mov	r2, r7
 800af16:	f000 fcb5 	bl	800b884 <__lshift>
 800af1a:	1bed      	subs	r5, r5, r7
 800af1c:	4604      	mov	r4, r0
 800af1e:	f100 0914 	add.w	r9, r0, #20
 800af22:	f04f 0a00 	mov.w	sl, #0
 800af26:	e7ae      	b.n	800ae86 <__gethex+0x202>
 800af28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af2c:	42a8      	cmp	r0, r5
 800af2e:	dd72      	ble.n	800b016 <__gethex+0x392>
 800af30:	1b45      	subs	r5, r0, r5
 800af32:	42ae      	cmp	r6, r5
 800af34:	dc36      	bgt.n	800afa4 <__gethex+0x320>
 800af36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d02a      	beq.n	800af94 <__gethex+0x310>
 800af3e:	2b03      	cmp	r3, #3
 800af40:	d02c      	beq.n	800af9c <__gethex+0x318>
 800af42:	2b01      	cmp	r3, #1
 800af44:	d115      	bne.n	800af72 <__gethex+0x2ee>
 800af46:	42ae      	cmp	r6, r5
 800af48:	d113      	bne.n	800af72 <__gethex+0x2ee>
 800af4a:	2e01      	cmp	r6, #1
 800af4c:	d10b      	bne.n	800af66 <__gethex+0x2e2>
 800af4e:	9a04      	ldr	r2, [sp, #16]
 800af50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	2301      	movs	r3, #1
 800af58:	6123      	str	r3, [r4, #16]
 800af5a:	f8c9 3000 	str.w	r3, [r9]
 800af5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af60:	2762      	movs	r7, #98	; 0x62
 800af62:	601c      	str	r4, [r3, #0]
 800af64:	e723      	b.n	800adae <__gethex+0x12a>
 800af66:	1e71      	subs	r1, r6, #1
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 fec9 	bl	800bd00 <__any_on>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d1ed      	bne.n	800af4e <__gethex+0x2ca>
 800af72:	ee18 0a10 	vmov	r0, s16
 800af76:	4621      	mov	r1, r4
 800af78:	f000 fa68 	bl	800b44c <_Bfree>
 800af7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800af7e:	2300      	movs	r3, #0
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	2750      	movs	r7, #80	; 0x50
 800af84:	e713      	b.n	800adae <__gethex+0x12a>
 800af86:	bf00      	nop
 800af88:	0800efac 	.word	0x0800efac
 800af8c:	0800eecc 	.word	0x0800eecc
 800af90:	0800ef40 	.word	0x0800ef40
 800af94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1eb      	bne.n	800af72 <__gethex+0x2ee>
 800af9a:	e7d8      	b.n	800af4e <__gethex+0x2ca>
 800af9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d1d5      	bne.n	800af4e <__gethex+0x2ca>
 800afa2:	e7e6      	b.n	800af72 <__gethex+0x2ee>
 800afa4:	1e6f      	subs	r7, r5, #1
 800afa6:	f1ba 0f00 	cmp.w	sl, #0
 800afaa:	d131      	bne.n	800b010 <__gethex+0x38c>
 800afac:	b127      	cbz	r7, 800afb8 <__gethex+0x334>
 800afae:	4639      	mov	r1, r7
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fea5 	bl	800bd00 <__any_on>
 800afb6:	4682      	mov	sl, r0
 800afb8:	117b      	asrs	r3, r7, #5
 800afba:	2101      	movs	r1, #1
 800afbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800afc0:	f007 071f 	and.w	r7, r7, #31
 800afc4:	fa01 f707 	lsl.w	r7, r1, r7
 800afc8:	421f      	tst	r7, r3
 800afca:	4629      	mov	r1, r5
 800afcc:	4620      	mov	r0, r4
 800afce:	bf18      	it	ne
 800afd0:	f04a 0a02 	orrne.w	sl, sl, #2
 800afd4:	1b76      	subs	r6, r6, r5
 800afd6:	f7ff fdee 	bl	800abb6 <rshift>
 800afda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800afde:	2702      	movs	r7, #2
 800afe0:	f1ba 0f00 	cmp.w	sl, #0
 800afe4:	d048      	beq.n	800b078 <__gethex+0x3f4>
 800afe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d015      	beq.n	800b01a <__gethex+0x396>
 800afee:	2b03      	cmp	r3, #3
 800aff0:	d017      	beq.n	800b022 <__gethex+0x39e>
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d109      	bne.n	800b00a <__gethex+0x386>
 800aff6:	f01a 0f02 	tst.w	sl, #2
 800affa:	d006      	beq.n	800b00a <__gethex+0x386>
 800affc:	f8d9 0000 	ldr.w	r0, [r9]
 800b000:	ea4a 0a00 	orr.w	sl, sl, r0
 800b004:	f01a 0f01 	tst.w	sl, #1
 800b008:	d10e      	bne.n	800b028 <__gethex+0x3a4>
 800b00a:	f047 0710 	orr.w	r7, r7, #16
 800b00e:	e033      	b.n	800b078 <__gethex+0x3f4>
 800b010:	f04f 0a01 	mov.w	sl, #1
 800b014:	e7d0      	b.n	800afb8 <__gethex+0x334>
 800b016:	2701      	movs	r7, #1
 800b018:	e7e2      	b.n	800afe0 <__gethex+0x35c>
 800b01a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b01c:	f1c3 0301 	rsb	r3, r3, #1
 800b020:	9315      	str	r3, [sp, #84]	; 0x54
 800b022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0f0      	beq.n	800b00a <__gethex+0x386>
 800b028:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b02c:	f104 0314 	add.w	r3, r4, #20
 800b030:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b034:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b038:	f04f 0c00 	mov.w	ip, #0
 800b03c:	4618      	mov	r0, r3
 800b03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b042:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b046:	d01c      	beq.n	800b082 <__gethex+0x3fe>
 800b048:	3201      	adds	r2, #1
 800b04a:	6002      	str	r2, [r0, #0]
 800b04c:	2f02      	cmp	r7, #2
 800b04e:	f104 0314 	add.w	r3, r4, #20
 800b052:	d13f      	bne.n	800b0d4 <__gethex+0x450>
 800b054:	f8d8 2000 	ldr.w	r2, [r8]
 800b058:	3a01      	subs	r2, #1
 800b05a:	42b2      	cmp	r2, r6
 800b05c:	d10a      	bne.n	800b074 <__gethex+0x3f0>
 800b05e:	1171      	asrs	r1, r6, #5
 800b060:	2201      	movs	r2, #1
 800b062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b066:	f006 061f 	and.w	r6, r6, #31
 800b06a:	fa02 f606 	lsl.w	r6, r2, r6
 800b06e:	421e      	tst	r6, r3
 800b070:	bf18      	it	ne
 800b072:	4617      	movne	r7, r2
 800b074:	f047 0720 	orr.w	r7, r7, #32
 800b078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b07a:	601c      	str	r4, [r3, #0]
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	601d      	str	r5, [r3, #0]
 800b080:	e695      	b.n	800adae <__gethex+0x12a>
 800b082:	4299      	cmp	r1, r3
 800b084:	f843 cc04 	str.w	ip, [r3, #-4]
 800b088:	d8d8      	bhi.n	800b03c <__gethex+0x3b8>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	459b      	cmp	fp, r3
 800b08e:	db19      	blt.n	800b0c4 <__gethex+0x440>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	ee18 0a10 	vmov	r0, s16
 800b096:	3101      	adds	r1, #1
 800b098:	f000 f998 	bl	800b3cc <_Balloc>
 800b09c:	4681      	mov	r9, r0
 800b09e:	b918      	cbnz	r0, 800b0a8 <__gethex+0x424>
 800b0a0:	4b1a      	ldr	r3, [pc, #104]	; (800b10c <__gethex+0x488>)
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	2184      	movs	r1, #132	; 0x84
 800b0a6:	e6a8      	b.n	800adfa <__gethex+0x176>
 800b0a8:	6922      	ldr	r2, [r4, #16]
 800b0aa:	3202      	adds	r2, #2
 800b0ac:	f104 010c 	add.w	r1, r4, #12
 800b0b0:	0092      	lsls	r2, r2, #2
 800b0b2:	300c      	adds	r0, #12
 800b0b4:	f7fc fc92 	bl	80079dc <memcpy>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	ee18 0a10 	vmov	r0, s16
 800b0be:	f000 f9c5 	bl	800b44c <_Bfree>
 800b0c2:	464c      	mov	r4, r9
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0cc:	6122      	str	r2, [r4, #16]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	615a      	str	r2, [r3, #20]
 800b0d2:	e7bb      	b.n	800b04c <__gethex+0x3c8>
 800b0d4:	6922      	ldr	r2, [r4, #16]
 800b0d6:	455a      	cmp	r2, fp
 800b0d8:	dd0b      	ble.n	800b0f2 <__gethex+0x46e>
 800b0da:	2101      	movs	r1, #1
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7ff fd6a 	bl	800abb6 <rshift>
 800b0e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0e6:	3501      	adds	r5, #1
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	f6ff aed0 	blt.w	800ae8e <__gethex+0x20a>
 800b0ee:	2701      	movs	r7, #1
 800b0f0:	e7c0      	b.n	800b074 <__gethex+0x3f0>
 800b0f2:	f016 061f 	ands.w	r6, r6, #31
 800b0f6:	d0fa      	beq.n	800b0ee <__gethex+0x46a>
 800b0f8:	449a      	add	sl, r3
 800b0fa:	f1c6 0620 	rsb	r6, r6, #32
 800b0fe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b102:	f000 fa59 	bl	800b5b8 <__hi0bits>
 800b106:	42b0      	cmp	r0, r6
 800b108:	dbe7      	blt.n	800b0da <__gethex+0x456>
 800b10a:	e7f0      	b.n	800b0ee <__gethex+0x46a>
 800b10c:	0800eecc 	.word	0x0800eecc

0800b110 <L_shift>:
 800b110:	f1c2 0208 	rsb	r2, r2, #8
 800b114:	0092      	lsls	r2, r2, #2
 800b116:	b570      	push	{r4, r5, r6, lr}
 800b118:	f1c2 0620 	rsb	r6, r2, #32
 800b11c:	6843      	ldr	r3, [r0, #4]
 800b11e:	6804      	ldr	r4, [r0, #0]
 800b120:	fa03 f506 	lsl.w	r5, r3, r6
 800b124:	432c      	orrs	r4, r5
 800b126:	40d3      	lsrs	r3, r2
 800b128:	6004      	str	r4, [r0, #0]
 800b12a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b12e:	4288      	cmp	r0, r1
 800b130:	d3f4      	bcc.n	800b11c <L_shift+0xc>
 800b132:	bd70      	pop	{r4, r5, r6, pc}

0800b134 <__match>:
 800b134:	b530      	push	{r4, r5, lr}
 800b136:	6803      	ldr	r3, [r0, #0]
 800b138:	3301      	adds	r3, #1
 800b13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b13e:	b914      	cbnz	r4, 800b146 <__match+0x12>
 800b140:	6003      	str	r3, [r0, #0]
 800b142:	2001      	movs	r0, #1
 800b144:	bd30      	pop	{r4, r5, pc}
 800b146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b14a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b14e:	2d19      	cmp	r5, #25
 800b150:	bf98      	it	ls
 800b152:	3220      	addls	r2, #32
 800b154:	42a2      	cmp	r2, r4
 800b156:	d0f0      	beq.n	800b13a <__match+0x6>
 800b158:	2000      	movs	r0, #0
 800b15a:	e7f3      	b.n	800b144 <__match+0x10>

0800b15c <__hexnan>:
 800b15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	680b      	ldr	r3, [r1, #0]
 800b162:	6801      	ldr	r1, [r0, #0]
 800b164:	115e      	asrs	r6, r3, #5
 800b166:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b16a:	f013 031f 	ands.w	r3, r3, #31
 800b16e:	b087      	sub	sp, #28
 800b170:	bf18      	it	ne
 800b172:	3604      	addne	r6, #4
 800b174:	2500      	movs	r5, #0
 800b176:	1f37      	subs	r7, r6, #4
 800b178:	4682      	mov	sl, r0
 800b17a:	4690      	mov	r8, r2
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	f846 5c04 	str.w	r5, [r6, #-4]
 800b182:	46b9      	mov	r9, r7
 800b184:	463c      	mov	r4, r7
 800b186:	9502      	str	r5, [sp, #8]
 800b188:	46ab      	mov	fp, r5
 800b18a:	784a      	ldrb	r2, [r1, #1]
 800b18c:	1c4b      	adds	r3, r1, #1
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	b342      	cbz	r2, 800b1e4 <__hexnan+0x88>
 800b192:	4610      	mov	r0, r2
 800b194:	9105      	str	r1, [sp, #20]
 800b196:	9204      	str	r2, [sp, #16]
 800b198:	f7ff fd5f 	bl	800ac5a <__hexdig_fun>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d14f      	bne.n	800b240 <__hexnan+0xe4>
 800b1a0:	9a04      	ldr	r2, [sp, #16]
 800b1a2:	9905      	ldr	r1, [sp, #20]
 800b1a4:	2a20      	cmp	r2, #32
 800b1a6:	d818      	bhi.n	800b1da <__hexnan+0x7e>
 800b1a8:	9b02      	ldr	r3, [sp, #8]
 800b1aa:	459b      	cmp	fp, r3
 800b1ac:	dd13      	ble.n	800b1d6 <__hexnan+0x7a>
 800b1ae:	454c      	cmp	r4, r9
 800b1b0:	d206      	bcs.n	800b1c0 <__hexnan+0x64>
 800b1b2:	2d07      	cmp	r5, #7
 800b1b4:	dc04      	bgt.n	800b1c0 <__hexnan+0x64>
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4649      	mov	r1, r9
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f7ff ffa8 	bl	800b110 <L_shift>
 800b1c0:	4544      	cmp	r4, r8
 800b1c2:	d950      	bls.n	800b266 <__hexnan+0x10a>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f1a4 0904 	sub.w	r9, r4, #4
 800b1ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1ce:	f8cd b008 	str.w	fp, [sp, #8]
 800b1d2:	464c      	mov	r4, r9
 800b1d4:	461d      	mov	r5, r3
 800b1d6:	9903      	ldr	r1, [sp, #12]
 800b1d8:	e7d7      	b.n	800b18a <__hexnan+0x2e>
 800b1da:	2a29      	cmp	r2, #41	; 0x29
 800b1dc:	d156      	bne.n	800b28c <__hexnan+0x130>
 800b1de:	3102      	adds	r1, #2
 800b1e0:	f8ca 1000 	str.w	r1, [sl]
 800b1e4:	f1bb 0f00 	cmp.w	fp, #0
 800b1e8:	d050      	beq.n	800b28c <__hexnan+0x130>
 800b1ea:	454c      	cmp	r4, r9
 800b1ec:	d206      	bcs.n	800b1fc <__hexnan+0xa0>
 800b1ee:	2d07      	cmp	r5, #7
 800b1f0:	dc04      	bgt.n	800b1fc <__hexnan+0xa0>
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7ff ff8a 	bl	800b110 <L_shift>
 800b1fc:	4544      	cmp	r4, r8
 800b1fe:	d934      	bls.n	800b26a <__hexnan+0x10e>
 800b200:	f1a8 0204 	sub.w	r2, r8, #4
 800b204:	4623      	mov	r3, r4
 800b206:	f853 1b04 	ldr.w	r1, [r3], #4
 800b20a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b20e:	429f      	cmp	r7, r3
 800b210:	d2f9      	bcs.n	800b206 <__hexnan+0xaa>
 800b212:	1b3b      	subs	r3, r7, r4
 800b214:	f023 0303 	bic.w	r3, r3, #3
 800b218:	3304      	adds	r3, #4
 800b21a:	3401      	adds	r4, #1
 800b21c:	3e03      	subs	r6, #3
 800b21e:	42b4      	cmp	r4, r6
 800b220:	bf88      	it	hi
 800b222:	2304      	movhi	r3, #4
 800b224:	4443      	add	r3, r8
 800b226:	2200      	movs	r2, #0
 800b228:	f843 2b04 	str.w	r2, [r3], #4
 800b22c:	429f      	cmp	r7, r3
 800b22e:	d2fb      	bcs.n	800b228 <__hexnan+0xcc>
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	b91b      	cbnz	r3, 800b23c <__hexnan+0xe0>
 800b234:	4547      	cmp	r7, r8
 800b236:	d127      	bne.n	800b288 <__hexnan+0x12c>
 800b238:	2301      	movs	r3, #1
 800b23a:	603b      	str	r3, [r7, #0]
 800b23c:	2005      	movs	r0, #5
 800b23e:	e026      	b.n	800b28e <__hexnan+0x132>
 800b240:	3501      	adds	r5, #1
 800b242:	2d08      	cmp	r5, #8
 800b244:	f10b 0b01 	add.w	fp, fp, #1
 800b248:	dd06      	ble.n	800b258 <__hexnan+0xfc>
 800b24a:	4544      	cmp	r4, r8
 800b24c:	d9c3      	bls.n	800b1d6 <__hexnan+0x7a>
 800b24e:	2300      	movs	r3, #0
 800b250:	f844 3c04 	str.w	r3, [r4, #-4]
 800b254:	2501      	movs	r5, #1
 800b256:	3c04      	subs	r4, #4
 800b258:	6822      	ldr	r2, [r4, #0]
 800b25a:	f000 000f 	and.w	r0, r0, #15
 800b25e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b262:	6022      	str	r2, [r4, #0]
 800b264:	e7b7      	b.n	800b1d6 <__hexnan+0x7a>
 800b266:	2508      	movs	r5, #8
 800b268:	e7b5      	b.n	800b1d6 <__hexnan+0x7a>
 800b26a:	9b01      	ldr	r3, [sp, #4]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0df      	beq.n	800b230 <__hexnan+0xd4>
 800b270:	f04f 32ff 	mov.w	r2, #4294967295
 800b274:	f1c3 0320 	rsb	r3, r3, #32
 800b278:	fa22 f303 	lsr.w	r3, r2, r3
 800b27c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b280:	401a      	ands	r2, r3
 800b282:	f846 2c04 	str.w	r2, [r6, #-4]
 800b286:	e7d3      	b.n	800b230 <__hexnan+0xd4>
 800b288:	3f04      	subs	r7, #4
 800b28a:	e7d1      	b.n	800b230 <__hexnan+0xd4>
 800b28c:	2004      	movs	r0, #4
 800b28e:	b007      	add	sp, #28
 800b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b294 <_localeconv_r>:
 800b294:	4800      	ldr	r0, [pc, #0]	; (800b298 <_localeconv_r+0x4>)
 800b296:	4770      	bx	lr
 800b298:	200001c8 	.word	0x200001c8

0800b29c <__retarget_lock_init_recursive>:
 800b29c:	4770      	bx	lr

0800b29e <__retarget_lock_acquire_recursive>:
 800b29e:	4770      	bx	lr

0800b2a0 <__retarget_lock_release_recursive>:
 800b2a0:	4770      	bx	lr
	...

0800b2a4 <_lseek_r>:
 800b2a4:	b538      	push	{r3, r4, r5, lr}
 800b2a6:	4d07      	ldr	r5, [pc, #28]	; (800b2c4 <_lseek_r+0x20>)
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	4608      	mov	r0, r1
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	602a      	str	r2, [r5, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	f7f8 fb1c 	bl	80038f0 <_lseek>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_lseek_r+0x1e>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_lseek_r+0x1e>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	20001860 	.word	0x20001860

0800b2c8 <__swhatbuf_r>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	460e      	mov	r6, r1
 800b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	b096      	sub	sp, #88	; 0x58
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	461d      	mov	r5, r3
 800b2d8:	da07      	bge.n	800b2ea <__swhatbuf_r+0x22>
 800b2da:	2300      	movs	r3, #0
 800b2dc:	602b      	str	r3, [r5, #0]
 800b2de:	89b3      	ldrh	r3, [r6, #12]
 800b2e0:	061a      	lsls	r2, r3, #24
 800b2e2:	d410      	bmi.n	800b306 <__swhatbuf_r+0x3e>
 800b2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2e8:	e00e      	b.n	800b308 <__swhatbuf_r+0x40>
 800b2ea:	466a      	mov	r2, sp
 800b2ec:	f001 fc6a 	bl	800cbc4 <_fstat_r>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	dbf2      	blt.n	800b2da <__swhatbuf_r+0x12>
 800b2f4:	9a01      	ldr	r2, [sp, #4]
 800b2f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b2fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b2fe:	425a      	negs	r2, r3
 800b300:	415a      	adcs	r2, r3
 800b302:	602a      	str	r2, [r5, #0]
 800b304:	e7ee      	b.n	800b2e4 <__swhatbuf_r+0x1c>
 800b306:	2340      	movs	r3, #64	; 0x40
 800b308:	2000      	movs	r0, #0
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	b016      	add	sp, #88	; 0x58
 800b30e:	bd70      	pop	{r4, r5, r6, pc}

0800b310 <__smakebuf_r>:
 800b310:	898b      	ldrh	r3, [r1, #12]
 800b312:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b314:	079d      	lsls	r5, r3, #30
 800b316:	4606      	mov	r6, r0
 800b318:	460c      	mov	r4, r1
 800b31a:	d507      	bpl.n	800b32c <__smakebuf_r+0x1c>
 800b31c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	6123      	str	r3, [r4, #16]
 800b324:	2301      	movs	r3, #1
 800b326:	6163      	str	r3, [r4, #20]
 800b328:	b002      	add	sp, #8
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	ab01      	add	r3, sp, #4
 800b32e:	466a      	mov	r2, sp
 800b330:	f7ff ffca 	bl	800b2c8 <__swhatbuf_r>
 800b334:	9900      	ldr	r1, [sp, #0]
 800b336:	4605      	mov	r5, r0
 800b338:	4630      	mov	r0, r6
 800b33a:	f7fc fbb5 	bl	8007aa8 <_malloc_r>
 800b33e:	b948      	cbnz	r0, 800b354 <__smakebuf_r+0x44>
 800b340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b344:	059a      	lsls	r2, r3, #22
 800b346:	d4ef      	bmi.n	800b328 <__smakebuf_r+0x18>
 800b348:	f023 0303 	bic.w	r3, r3, #3
 800b34c:	f043 0302 	orr.w	r3, r3, #2
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	e7e3      	b.n	800b31c <__smakebuf_r+0xc>
 800b354:	4b0d      	ldr	r3, [pc, #52]	; (800b38c <__smakebuf_r+0x7c>)
 800b356:	62b3      	str	r3, [r6, #40]	; 0x28
 800b358:	89a3      	ldrh	r3, [r4, #12]
 800b35a:	6020      	str	r0, [r4, #0]
 800b35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	9b00      	ldr	r3, [sp, #0]
 800b364:	6163      	str	r3, [r4, #20]
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	6120      	str	r0, [r4, #16]
 800b36a:	b15b      	cbz	r3, 800b384 <__smakebuf_r+0x74>
 800b36c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b370:	4630      	mov	r0, r6
 800b372:	f001 fc39 	bl	800cbe8 <_isatty_r>
 800b376:	b128      	cbz	r0, 800b384 <__smakebuf_r+0x74>
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	f023 0303 	bic.w	r3, r3, #3
 800b37e:	f043 0301 	orr.w	r3, r3, #1
 800b382:	81a3      	strh	r3, [r4, #12]
 800b384:	89a0      	ldrh	r0, [r4, #12]
 800b386:	4305      	orrs	r5, r0
 800b388:	81a5      	strh	r5, [r4, #12]
 800b38a:	e7cd      	b.n	800b328 <__smakebuf_r+0x18>
 800b38c:	0800aa15 	.word	0x0800aa15

0800b390 <__ascii_mbtowc>:
 800b390:	b082      	sub	sp, #8
 800b392:	b901      	cbnz	r1, 800b396 <__ascii_mbtowc+0x6>
 800b394:	a901      	add	r1, sp, #4
 800b396:	b142      	cbz	r2, 800b3aa <__ascii_mbtowc+0x1a>
 800b398:	b14b      	cbz	r3, 800b3ae <__ascii_mbtowc+0x1e>
 800b39a:	7813      	ldrb	r3, [r2, #0]
 800b39c:	600b      	str	r3, [r1, #0]
 800b39e:	7812      	ldrb	r2, [r2, #0]
 800b3a0:	1e10      	subs	r0, r2, #0
 800b3a2:	bf18      	it	ne
 800b3a4:	2001      	movne	r0, #1
 800b3a6:	b002      	add	sp, #8
 800b3a8:	4770      	bx	lr
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	e7fb      	b.n	800b3a6 <__ascii_mbtowc+0x16>
 800b3ae:	f06f 0001 	mvn.w	r0, #1
 800b3b2:	e7f8      	b.n	800b3a6 <__ascii_mbtowc+0x16>

0800b3b4 <__malloc_lock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	; (800b3bc <__malloc_lock+0x8>)
 800b3b6:	f7ff bf72 	b.w	800b29e <__retarget_lock_acquire_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	20001858 	.word	0x20001858

0800b3c0 <__malloc_unlock>:
 800b3c0:	4801      	ldr	r0, [pc, #4]	; (800b3c8 <__malloc_unlock+0x8>)
 800b3c2:	f7ff bf6d 	b.w	800b2a0 <__retarget_lock_release_recursive>
 800b3c6:	bf00      	nop
 800b3c8:	20001858 	.word	0x20001858

0800b3cc <_Balloc>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	b976      	cbnz	r6, 800b3f4 <_Balloc+0x28>
 800b3d6:	2010      	movs	r0, #16
 800b3d8:	f7fc faf0 	bl	80079bc <malloc>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	6260      	str	r0, [r4, #36]	; 0x24
 800b3e0:	b920      	cbnz	r0, 800b3ec <_Balloc+0x20>
 800b3e2:	4b18      	ldr	r3, [pc, #96]	; (800b444 <_Balloc+0x78>)
 800b3e4:	4818      	ldr	r0, [pc, #96]	; (800b448 <_Balloc+0x7c>)
 800b3e6:	2166      	movs	r1, #102	; 0x66
 800b3e8:	f001 fbbc 	bl	800cb64 <__assert_func>
 800b3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3f0:	6006      	str	r6, [r0, #0]
 800b3f2:	60c6      	str	r6, [r0, #12]
 800b3f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3f6:	68f3      	ldr	r3, [r6, #12]
 800b3f8:	b183      	cbz	r3, 800b41c <_Balloc+0x50>
 800b3fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b402:	b9b8      	cbnz	r0, 800b434 <_Balloc+0x68>
 800b404:	2101      	movs	r1, #1
 800b406:	fa01 f605 	lsl.w	r6, r1, r5
 800b40a:	1d72      	adds	r2, r6, #5
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 fc97 	bl	800bd42 <_calloc_r>
 800b414:	b160      	cbz	r0, 800b430 <_Balloc+0x64>
 800b416:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b41a:	e00e      	b.n	800b43a <_Balloc+0x6e>
 800b41c:	2221      	movs	r2, #33	; 0x21
 800b41e:	2104      	movs	r1, #4
 800b420:	4620      	mov	r0, r4
 800b422:	f000 fc8e 	bl	800bd42 <_calloc_r>
 800b426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b428:	60f0      	str	r0, [r6, #12]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e4      	bne.n	800b3fa <_Balloc+0x2e>
 800b430:	2000      	movs	r0, #0
 800b432:	bd70      	pop	{r4, r5, r6, pc}
 800b434:	6802      	ldr	r2, [r0, #0]
 800b436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b43a:	2300      	movs	r3, #0
 800b43c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b440:	e7f7      	b.n	800b432 <_Balloc+0x66>
 800b442:	bf00      	nop
 800b444:	0800ee56 	.word	0x0800ee56
 800b448:	0800efc0 	.word	0x0800efc0

0800b44c <_Bfree>:
 800b44c:	b570      	push	{r4, r5, r6, lr}
 800b44e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b450:	4605      	mov	r5, r0
 800b452:	460c      	mov	r4, r1
 800b454:	b976      	cbnz	r6, 800b474 <_Bfree+0x28>
 800b456:	2010      	movs	r0, #16
 800b458:	f7fc fab0 	bl	80079bc <malloc>
 800b45c:	4602      	mov	r2, r0
 800b45e:	6268      	str	r0, [r5, #36]	; 0x24
 800b460:	b920      	cbnz	r0, 800b46c <_Bfree+0x20>
 800b462:	4b09      	ldr	r3, [pc, #36]	; (800b488 <_Bfree+0x3c>)
 800b464:	4809      	ldr	r0, [pc, #36]	; (800b48c <_Bfree+0x40>)
 800b466:	218a      	movs	r1, #138	; 0x8a
 800b468:	f001 fb7c 	bl	800cb64 <__assert_func>
 800b46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b470:	6006      	str	r6, [r0, #0]
 800b472:	60c6      	str	r6, [r0, #12]
 800b474:	b13c      	cbz	r4, 800b486 <_Bfree+0x3a>
 800b476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b478:	6862      	ldr	r2, [r4, #4]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b480:	6021      	str	r1, [r4, #0]
 800b482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	0800ee56 	.word	0x0800ee56
 800b48c:	0800efc0 	.word	0x0800efc0

0800b490 <__multadd>:
 800b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	690e      	ldr	r6, [r1, #16]
 800b496:	4607      	mov	r7, r0
 800b498:	4698      	mov	r8, r3
 800b49a:	460c      	mov	r4, r1
 800b49c:	f101 0014 	add.w	r0, r1, #20
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	6805      	ldr	r5, [r0, #0]
 800b4a4:	b2a9      	uxth	r1, r5
 800b4a6:	fb02 8101 	mla	r1, r2, r1, r8
 800b4aa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b4ae:	0c2d      	lsrs	r5, r5, #16
 800b4b0:	fb02 c505 	mla	r5, r2, r5, ip
 800b4b4:	b289      	uxth	r1, r1
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b4bc:	429e      	cmp	r6, r3
 800b4be:	f840 1b04 	str.w	r1, [r0], #4
 800b4c2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b4c6:	dcec      	bgt.n	800b4a2 <__multadd+0x12>
 800b4c8:	f1b8 0f00 	cmp.w	r8, #0
 800b4cc:	d022      	beq.n	800b514 <__multadd+0x84>
 800b4ce:	68a3      	ldr	r3, [r4, #8]
 800b4d0:	42b3      	cmp	r3, r6
 800b4d2:	dc19      	bgt.n	800b508 <__multadd+0x78>
 800b4d4:	6861      	ldr	r1, [r4, #4]
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	3101      	adds	r1, #1
 800b4da:	f7ff ff77 	bl	800b3cc <_Balloc>
 800b4de:	4605      	mov	r5, r0
 800b4e0:	b928      	cbnz	r0, 800b4ee <__multadd+0x5e>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <__multadd+0x8c>)
 800b4e6:	480e      	ldr	r0, [pc, #56]	; (800b520 <__multadd+0x90>)
 800b4e8:	21b5      	movs	r1, #181	; 0xb5
 800b4ea:	f001 fb3b 	bl	800cb64 <__assert_func>
 800b4ee:	6922      	ldr	r2, [r4, #16]
 800b4f0:	3202      	adds	r2, #2
 800b4f2:	f104 010c 	add.w	r1, r4, #12
 800b4f6:	0092      	lsls	r2, r2, #2
 800b4f8:	300c      	adds	r0, #12
 800b4fa:	f7fc fa6f 	bl	80079dc <memcpy>
 800b4fe:	4621      	mov	r1, r4
 800b500:	4638      	mov	r0, r7
 800b502:	f7ff ffa3 	bl	800b44c <_Bfree>
 800b506:	462c      	mov	r4, r5
 800b508:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b50c:	3601      	adds	r6, #1
 800b50e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b512:	6126      	str	r6, [r4, #16]
 800b514:	4620      	mov	r0, r4
 800b516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b51a:	bf00      	nop
 800b51c:	0800eecc 	.word	0x0800eecc
 800b520:	0800efc0 	.word	0x0800efc0

0800b524 <__s2b>:
 800b524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b528:	460c      	mov	r4, r1
 800b52a:	4615      	mov	r5, r2
 800b52c:	461f      	mov	r7, r3
 800b52e:	2209      	movs	r2, #9
 800b530:	3308      	adds	r3, #8
 800b532:	4606      	mov	r6, r0
 800b534:	fb93 f3f2 	sdiv	r3, r3, r2
 800b538:	2100      	movs	r1, #0
 800b53a:	2201      	movs	r2, #1
 800b53c:	429a      	cmp	r2, r3
 800b53e:	db09      	blt.n	800b554 <__s2b+0x30>
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff ff43 	bl	800b3cc <_Balloc>
 800b546:	b940      	cbnz	r0, 800b55a <__s2b+0x36>
 800b548:	4602      	mov	r2, r0
 800b54a:	4b19      	ldr	r3, [pc, #100]	; (800b5b0 <__s2b+0x8c>)
 800b54c:	4819      	ldr	r0, [pc, #100]	; (800b5b4 <__s2b+0x90>)
 800b54e:	21ce      	movs	r1, #206	; 0xce
 800b550:	f001 fb08 	bl	800cb64 <__assert_func>
 800b554:	0052      	lsls	r2, r2, #1
 800b556:	3101      	adds	r1, #1
 800b558:	e7f0      	b.n	800b53c <__s2b+0x18>
 800b55a:	9b08      	ldr	r3, [sp, #32]
 800b55c:	6143      	str	r3, [r0, #20]
 800b55e:	2d09      	cmp	r5, #9
 800b560:	f04f 0301 	mov.w	r3, #1
 800b564:	6103      	str	r3, [r0, #16]
 800b566:	dd16      	ble.n	800b596 <__s2b+0x72>
 800b568:	f104 0909 	add.w	r9, r4, #9
 800b56c:	46c8      	mov	r8, r9
 800b56e:	442c      	add	r4, r5
 800b570:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b574:	4601      	mov	r1, r0
 800b576:	3b30      	subs	r3, #48	; 0x30
 800b578:	220a      	movs	r2, #10
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ff88 	bl	800b490 <__multadd>
 800b580:	45a0      	cmp	r8, r4
 800b582:	d1f5      	bne.n	800b570 <__s2b+0x4c>
 800b584:	f1a5 0408 	sub.w	r4, r5, #8
 800b588:	444c      	add	r4, r9
 800b58a:	1b2d      	subs	r5, r5, r4
 800b58c:	1963      	adds	r3, r4, r5
 800b58e:	42bb      	cmp	r3, r7
 800b590:	db04      	blt.n	800b59c <__s2b+0x78>
 800b592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b596:	340a      	adds	r4, #10
 800b598:	2509      	movs	r5, #9
 800b59a:	e7f6      	b.n	800b58a <__s2b+0x66>
 800b59c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	3b30      	subs	r3, #48	; 0x30
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f7ff ff72 	bl	800b490 <__multadd>
 800b5ac:	e7ee      	b.n	800b58c <__s2b+0x68>
 800b5ae:	bf00      	nop
 800b5b0:	0800eecc 	.word	0x0800eecc
 800b5b4:	0800efc0 	.word	0x0800efc0

0800b5b8 <__hi0bits>:
 800b5b8:	0c03      	lsrs	r3, r0, #16
 800b5ba:	041b      	lsls	r3, r3, #16
 800b5bc:	b9d3      	cbnz	r3, 800b5f4 <__hi0bits+0x3c>
 800b5be:	0400      	lsls	r0, r0, #16
 800b5c0:	2310      	movs	r3, #16
 800b5c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5c6:	bf04      	itt	eq
 800b5c8:	0200      	lsleq	r0, r0, #8
 800b5ca:	3308      	addeq	r3, #8
 800b5cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5d0:	bf04      	itt	eq
 800b5d2:	0100      	lsleq	r0, r0, #4
 800b5d4:	3304      	addeq	r3, #4
 800b5d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5da:	bf04      	itt	eq
 800b5dc:	0080      	lsleq	r0, r0, #2
 800b5de:	3302      	addeq	r3, #2
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	db05      	blt.n	800b5f0 <__hi0bits+0x38>
 800b5e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5e8:	f103 0301 	add.w	r3, r3, #1
 800b5ec:	bf08      	it	eq
 800b5ee:	2320      	moveq	r3, #32
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	4770      	bx	lr
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	e7e4      	b.n	800b5c2 <__hi0bits+0xa>

0800b5f8 <__lo0bits>:
 800b5f8:	6803      	ldr	r3, [r0, #0]
 800b5fa:	f013 0207 	ands.w	r2, r3, #7
 800b5fe:	4601      	mov	r1, r0
 800b600:	d00b      	beq.n	800b61a <__lo0bits+0x22>
 800b602:	07da      	lsls	r2, r3, #31
 800b604:	d424      	bmi.n	800b650 <__lo0bits+0x58>
 800b606:	0798      	lsls	r0, r3, #30
 800b608:	bf49      	itett	mi
 800b60a:	085b      	lsrmi	r3, r3, #1
 800b60c:	089b      	lsrpl	r3, r3, #2
 800b60e:	2001      	movmi	r0, #1
 800b610:	600b      	strmi	r3, [r1, #0]
 800b612:	bf5c      	itt	pl
 800b614:	600b      	strpl	r3, [r1, #0]
 800b616:	2002      	movpl	r0, #2
 800b618:	4770      	bx	lr
 800b61a:	b298      	uxth	r0, r3
 800b61c:	b9b0      	cbnz	r0, 800b64c <__lo0bits+0x54>
 800b61e:	0c1b      	lsrs	r3, r3, #16
 800b620:	2010      	movs	r0, #16
 800b622:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b626:	bf04      	itt	eq
 800b628:	0a1b      	lsreq	r3, r3, #8
 800b62a:	3008      	addeq	r0, #8
 800b62c:	071a      	lsls	r2, r3, #28
 800b62e:	bf04      	itt	eq
 800b630:	091b      	lsreq	r3, r3, #4
 800b632:	3004      	addeq	r0, #4
 800b634:	079a      	lsls	r2, r3, #30
 800b636:	bf04      	itt	eq
 800b638:	089b      	lsreq	r3, r3, #2
 800b63a:	3002      	addeq	r0, #2
 800b63c:	07da      	lsls	r2, r3, #31
 800b63e:	d403      	bmi.n	800b648 <__lo0bits+0x50>
 800b640:	085b      	lsrs	r3, r3, #1
 800b642:	f100 0001 	add.w	r0, r0, #1
 800b646:	d005      	beq.n	800b654 <__lo0bits+0x5c>
 800b648:	600b      	str	r3, [r1, #0]
 800b64a:	4770      	bx	lr
 800b64c:	4610      	mov	r0, r2
 800b64e:	e7e8      	b.n	800b622 <__lo0bits+0x2a>
 800b650:	2000      	movs	r0, #0
 800b652:	4770      	bx	lr
 800b654:	2020      	movs	r0, #32
 800b656:	4770      	bx	lr

0800b658 <__i2b>:
 800b658:	b510      	push	{r4, lr}
 800b65a:	460c      	mov	r4, r1
 800b65c:	2101      	movs	r1, #1
 800b65e:	f7ff feb5 	bl	800b3cc <_Balloc>
 800b662:	4602      	mov	r2, r0
 800b664:	b928      	cbnz	r0, 800b672 <__i2b+0x1a>
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <__i2b+0x24>)
 800b668:	4805      	ldr	r0, [pc, #20]	; (800b680 <__i2b+0x28>)
 800b66a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b66e:	f001 fa79 	bl	800cb64 <__assert_func>
 800b672:	2301      	movs	r3, #1
 800b674:	6144      	str	r4, [r0, #20]
 800b676:	6103      	str	r3, [r0, #16]
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	bf00      	nop
 800b67c:	0800eecc 	.word	0x0800eecc
 800b680:	0800efc0 	.word	0x0800efc0

0800b684 <__multiply>:
 800b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b688:	4614      	mov	r4, r2
 800b68a:	690a      	ldr	r2, [r1, #16]
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	429a      	cmp	r2, r3
 800b690:	bfb8      	it	lt
 800b692:	460b      	movlt	r3, r1
 800b694:	460d      	mov	r5, r1
 800b696:	bfbc      	itt	lt
 800b698:	4625      	movlt	r5, r4
 800b69a:	461c      	movlt	r4, r3
 800b69c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b6a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6a4:	68ab      	ldr	r3, [r5, #8]
 800b6a6:	6869      	ldr	r1, [r5, #4]
 800b6a8:	eb0a 0709 	add.w	r7, sl, r9
 800b6ac:	42bb      	cmp	r3, r7
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	bfb8      	it	lt
 800b6b2:	3101      	addlt	r1, #1
 800b6b4:	f7ff fe8a 	bl	800b3cc <_Balloc>
 800b6b8:	b930      	cbnz	r0, 800b6c8 <__multiply+0x44>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	4b42      	ldr	r3, [pc, #264]	; (800b7c8 <__multiply+0x144>)
 800b6be:	4843      	ldr	r0, [pc, #268]	; (800b7cc <__multiply+0x148>)
 800b6c0:	f240 115d 	movw	r1, #349	; 0x15d
 800b6c4:	f001 fa4e 	bl	800cb64 <__assert_func>
 800b6c8:	f100 0614 	add.w	r6, r0, #20
 800b6cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b6d0:	4633      	mov	r3, r6
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	4543      	cmp	r3, r8
 800b6d6:	d31e      	bcc.n	800b716 <__multiply+0x92>
 800b6d8:	f105 0c14 	add.w	ip, r5, #20
 800b6dc:	f104 0314 	add.w	r3, r4, #20
 800b6e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b6e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b6e8:	9202      	str	r2, [sp, #8]
 800b6ea:	ebac 0205 	sub.w	r2, ip, r5
 800b6ee:	3a15      	subs	r2, #21
 800b6f0:	f022 0203 	bic.w	r2, r2, #3
 800b6f4:	3204      	adds	r2, #4
 800b6f6:	f105 0115 	add.w	r1, r5, #21
 800b6fa:	458c      	cmp	ip, r1
 800b6fc:	bf38      	it	cc
 800b6fe:	2204      	movcc	r2, #4
 800b700:	9201      	str	r2, [sp, #4]
 800b702:	9a02      	ldr	r2, [sp, #8]
 800b704:	9303      	str	r3, [sp, #12]
 800b706:	429a      	cmp	r2, r3
 800b708:	d808      	bhi.n	800b71c <__multiply+0x98>
 800b70a:	2f00      	cmp	r7, #0
 800b70c:	dc55      	bgt.n	800b7ba <__multiply+0x136>
 800b70e:	6107      	str	r7, [r0, #16]
 800b710:	b005      	add	sp, #20
 800b712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b716:	f843 2b04 	str.w	r2, [r3], #4
 800b71a:	e7db      	b.n	800b6d4 <__multiply+0x50>
 800b71c:	f8b3 a000 	ldrh.w	sl, [r3]
 800b720:	f1ba 0f00 	cmp.w	sl, #0
 800b724:	d020      	beq.n	800b768 <__multiply+0xe4>
 800b726:	f105 0e14 	add.w	lr, r5, #20
 800b72a:	46b1      	mov	r9, r6
 800b72c:	2200      	movs	r2, #0
 800b72e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b732:	f8d9 b000 	ldr.w	fp, [r9]
 800b736:	b2a1      	uxth	r1, r4
 800b738:	fa1f fb8b 	uxth.w	fp, fp
 800b73c:	fb0a b101 	mla	r1, sl, r1, fp
 800b740:	4411      	add	r1, r2
 800b742:	f8d9 2000 	ldr.w	r2, [r9]
 800b746:	0c24      	lsrs	r4, r4, #16
 800b748:	0c12      	lsrs	r2, r2, #16
 800b74a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b74e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b752:	b289      	uxth	r1, r1
 800b754:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b758:	45f4      	cmp	ip, lr
 800b75a:	f849 1b04 	str.w	r1, [r9], #4
 800b75e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b762:	d8e4      	bhi.n	800b72e <__multiply+0xaa>
 800b764:	9901      	ldr	r1, [sp, #4]
 800b766:	5072      	str	r2, [r6, r1]
 800b768:	9a03      	ldr	r2, [sp, #12]
 800b76a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b76e:	3304      	adds	r3, #4
 800b770:	f1b9 0f00 	cmp.w	r9, #0
 800b774:	d01f      	beq.n	800b7b6 <__multiply+0x132>
 800b776:	6834      	ldr	r4, [r6, #0]
 800b778:	f105 0114 	add.w	r1, r5, #20
 800b77c:	46b6      	mov	lr, r6
 800b77e:	f04f 0a00 	mov.w	sl, #0
 800b782:	880a      	ldrh	r2, [r1, #0]
 800b784:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b788:	fb09 b202 	mla	r2, r9, r2, fp
 800b78c:	4492      	add	sl, r2
 800b78e:	b2a4      	uxth	r4, r4
 800b790:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b794:	f84e 4b04 	str.w	r4, [lr], #4
 800b798:	f851 4b04 	ldr.w	r4, [r1], #4
 800b79c:	f8be 2000 	ldrh.w	r2, [lr]
 800b7a0:	0c24      	lsrs	r4, r4, #16
 800b7a2:	fb09 2404 	mla	r4, r9, r4, r2
 800b7a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b7aa:	458c      	cmp	ip, r1
 800b7ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7b0:	d8e7      	bhi.n	800b782 <__multiply+0xfe>
 800b7b2:	9a01      	ldr	r2, [sp, #4]
 800b7b4:	50b4      	str	r4, [r6, r2]
 800b7b6:	3604      	adds	r6, #4
 800b7b8:	e7a3      	b.n	800b702 <__multiply+0x7e>
 800b7ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1a5      	bne.n	800b70e <__multiply+0x8a>
 800b7c2:	3f01      	subs	r7, #1
 800b7c4:	e7a1      	b.n	800b70a <__multiply+0x86>
 800b7c6:	bf00      	nop
 800b7c8:	0800eecc 	.word	0x0800eecc
 800b7cc:	0800efc0 	.word	0x0800efc0

0800b7d0 <__pow5mult>:
 800b7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7d4:	4615      	mov	r5, r2
 800b7d6:	f012 0203 	ands.w	r2, r2, #3
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	d007      	beq.n	800b7f0 <__pow5mult+0x20>
 800b7e0:	4c25      	ldr	r4, [pc, #148]	; (800b878 <__pow5mult+0xa8>)
 800b7e2:	3a01      	subs	r2, #1
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7ea:	f7ff fe51 	bl	800b490 <__multadd>
 800b7ee:	4607      	mov	r7, r0
 800b7f0:	10ad      	asrs	r5, r5, #2
 800b7f2:	d03d      	beq.n	800b870 <__pow5mult+0xa0>
 800b7f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7f6:	b97c      	cbnz	r4, 800b818 <__pow5mult+0x48>
 800b7f8:	2010      	movs	r0, #16
 800b7fa:	f7fc f8df 	bl	80079bc <malloc>
 800b7fe:	4602      	mov	r2, r0
 800b800:	6270      	str	r0, [r6, #36]	; 0x24
 800b802:	b928      	cbnz	r0, 800b810 <__pow5mult+0x40>
 800b804:	4b1d      	ldr	r3, [pc, #116]	; (800b87c <__pow5mult+0xac>)
 800b806:	481e      	ldr	r0, [pc, #120]	; (800b880 <__pow5mult+0xb0>)
 800b808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b80c:	f001 f9aa 	bl	800cb64 <__assert_func>
 800b810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b814:	6004      	str	r4, [r0, #0]
 800b816:	60c4      	str	r4, [r0, #12]
 800b818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b81c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b820:	b94c      	cbnz	r4, 800b836 <__pow5mult+0x66>
 800b822:	f240 2171 	movw	r1, #625	; 0x271
 800b826:	4630      	mov	r0, r6
 800b828:	f7ff ff16 	bl	800b658 <__i2b>
 800b82c:	2300      	movs	r3, #0
 800b82e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b832:	4604      	mov	r4, r0
 800b834:	6003      	str	r3, [r0, #0]
 800b836:	f04f 0900 	mov.w	r9, #0
 800b83a:	07eb      	lsls	r3, r5, #31
 800b83c:	d50a      	bpl.n	800b854 <__pow5mult+0x84>
 800b83e:	4639      	mov	r1, r7
 800b840:	4622      	mov	r2, r4
 800b842:	4630      	mov	r0, r6
 800b844:	f7ff ff1e 	bl	800b684 <__multiply>
 800b848:	4639      	mov	r1, r7
 800b84a:	4680      	mov	r8, r0
 800b84c:	4630      	mov	r0, r6
 800b84e:	f7ff fdfd 	bl	800b44c <_Bfree>
 800b852:	4647      	mov	r7, r8
 800b854:	106d      	asrs	r5, r5, #1
 800b856:	d00b      	beq.n	800b870 <__pow5mult+0xa0>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	b938      	cbnz	r0, 800b86c <__pow5mult+0x9c>
 800b85c:	4622      	mov	r2, r4
 800b85e:	4621      	mov	r1, r4
 800b860:	4630      	mov	r0, r6
 800b862:	f7ff ff0f 	bl	800b684 <__multiply>
 800b866:	6020      	str	r0, [r4, #0]
 800b868:	f8c0 9000 	str.w	r9, [r0]
 800b86c:	4604      	mov	r4, r0
 800b86e:	e7e4      	b.n	800b83a <__pow5mult+0x6a>
 800b870:	4638      	mov	r0, r7
 800b872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b876:	bf00      	nop
 800b878:	0800f110 	.word	0x0800f110
 800b87c:	0800ee56 	.word	0x0800ee56
 800b880:	0800efc0 	.word	0x0800efc0

0800b884 <__lshift>:
 800b884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b888:	460c      	mov	r4, r1
 800b88a:	6849      	ldr	r1, [r1, #4]
 800b88c:	6923      	ldr	r3, [r4, #16]
 800b88e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	4607      	mov	r7, r0
 800b896:	4691      	mov	r9, r2
 800b898:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b89c:	f108 0601 	add.w	r6, r8, #1
 800b8a0:	42b3      	cmp	r3, r6
 800b8a2:	db0b      	blt.n	800b8bc <__lshift+0x38>
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	f7ff fd91 	bl	800b3cc <_Balloc>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b948      	cbnz	r0, 800b8c2 <__lshift+0x3e>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	4b28      	ldr	r3, [pc, #160]	; (800b954 <__lshift+0xd0>)
 800b8b2:	4829      	ldr	r0, [pc, #164]	; (800b958 <__lshift+0xd4>)
 800b8b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8b8:	f001 f954 	bl	800cb64 <__assert_func>
 800b8bc:	3101      	adds	r1, #1
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	e7ee      	b.n	800b8a0 <__lshift+0x1c>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f100 0114 	add.w	r1, r0, #20
 800b8c8:	f100 0210 	add.w	r2, r0, #16
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	4553      	cmp	r3, sl
 800b8d0:	db33      	blt.n	800b93a <__lshift+0xb6>
 800b8d2:	6920      	ldr	r0, [r4, #16]
 800b8d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8d8:	f104 0314 	add.w	r3, r4, #20
 800b8dc:	f019 091f 	ands.w	r9, r9, #31
 800b8e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8e8:	d02b      	beq.n	800b942 <__lshift+0xbe>
 800b8ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ee:	468a      	mov	sl, r1
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	6818      	ldr	r0, [r3, #0]
 800b8f4:	fa00 f009 	lsl.w	r0, r0, r9
 800b8f8:	4302      	orrs	r2, r0
 800b8fa:	f84a 2b04 	str.w	r2, [sl], #4
 800b8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b902:	459c      	cmp	ip, r3
 800b904:	fa22 f20e 	lsr.w	r2, r2, lr
 800b908:	d8f3      	bhi.n	800b8f2 <__lshift+0x6e>
 800b90a:	ebac 0304 	sub.w	r3, ip, r4
 800b90e:	3b15      	subs	r3, #21
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	3304      	adds	r3, #4
 800b916:	f104 0015 	add.w	r0, r4, #21
 800b91a:	4584      	cmp	ip, r0
 800b91c:	bf38      	it	cc
 800b91e:	2304      	movcc	r3, #4
 800b920:	50ca      	str	r2, [r1, r3]
 800b922:	b10a      	cbz	r2, 800b928 <__lshift+0xa4>
 800b924:	f108 0602 	add.w	r6, r8, #2
 800b928:	3e01      	subs	r6, #1
 800b92a:	4638      	mov	r0, r7
 800b92c:	612e      	str	r6, [r5, #16]
 800b92e:	4621      	mov	r1, r4
 800b930:	f7ff fd8c 	bl	800b44c <_Bfree>
 800b934:	4628      	mov	r0, r5
 800b936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b93a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b93e:	3301      	adds	r3, #1
 800b940:	e7c5      	b.n	800b8ce <__lshift+0x4a>
 800b942:	3904      	subs	r1, #4
 800b944:	f853 2b04 	ldr.w	r2, [r3], #4
 800b948:	f841 2f04 	str.w	r2, [r1, #4]!
 800b94c:	459c      	cmp	ip, r3
 800b94e:	d8f9      	bhi.n	800b944 <__lshift+0xc0>
 800b950:	e7ea      	b.n	800b928 <__lshift+0xa4>
 800b952:	bf00      	nop
 800b954:	0800eecc 	.word	0x0800eecc
 800b958:	0800efc0 	.word	0x0800efc0

0800b95c <__mcmp>:
 800b95c:	b530      	push	{r4, r5, lr}
 800b95e:	6902      	ldr	r2, [r0, #16]
 800b960:	690c      	ldr	r4, [r1, #16]
 800b962:	1b12      	subs	r2, r2, r4
 800b964:	d10e      	bne.n	800b984 <__mcmp+0x28>
 800b966:	f100 0314 	add.w	r3, r0, #20
 800b96a:	3114      	adds	r1, #20
 800b96c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b970:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b974:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b978:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b97c:	42a5      	cmp	r5, r4
 800b97e:	d003      	beq.n	800b988 <__mcmp+0x2c>
 800b980:	d305      	bcc.n	800b98e <__mcmp+0x32>
 800b982:	2201      	movs	r2, #1
 800b984:	4610      	mov	r0, r2
 800b986:	bd30      	pop	{r4, r5, pc}
 800b988:	4283      	cmp	r3, r0
 800b98a:	d3f3      	bcc.n	800b974 <__mcmp+0x18>
 800b98c:	e7fa      	b.n	800b984 <__mcmp+0x28>
 800b98e:	f04f 32ff 	mov.w	r2, #4294967295
 800b992:	e7f7      	b.n	800b984 <__mcmp+0x28>

0800b994 <__mdiff>:
 800b994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	460c      	mov	r4, r1
 800b99a:	4606      	mov	r6, r0
 800b99c:	4611      	mov	r1, r2
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4617      	mov	r7, r2
 800b9a2:	f7ff ffdb 	bl	800b95c <__mcmp>
 800b9a6:	1e05      	subs	r5, r0, #0
 800b9a8:	d110      	bne.n	800b9cc <__mdiff+0x38>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff fd0d 	bl	800b3cc <_Balloc>
 800b9b2:	b930      	cbnz	r0, 800b9c2 <__mdiff+0x2e>
 800b9b4:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <__mdiff+0x108>)
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	f240 2132 	movw	r1, #562	; 0x232
 800b9bc:	4838      	ldr	r0, [pc, #224]	; (800baa0 <__mdiff+0x10c>)
 800b9be:	f001 f8d1 	bl	800cb64 <__assert_func>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	bfa4      	itt	ge
 800b9ce:	463b      	movge	r3, r7
 800b9d0:	4627      	movge	r7, r4
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	bfa6      	itte	ge
 800b9d8:	461c      	movge	r4, r3
 800b9da:	2500      	movge	r5, #0
 800b9dc:	2501      	movlt	r5, #1
 800b9de:	f7ff fcf5 	bl	800b3cc <_Balloc>
 800b9e2:	b920      	cbnz	r0, 800b9ee <__mdiff+0x5a>
 800b9e4:	4b2d      	ldr	r3, [pc, #180]	; (800ba9c <__mdiff+0x108>)
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b9ec:	e7e6      	b.n	800b9bc <__mdiff+0x28>
 800b9ee:	693e      	ldr	r6, [r7, #16]
 800b9f0:	60c5      	str	r5, [r0, #12]
 800b9f2:	6925      	ldr	r5, [r4, #16]
 800b9f4:	f107 0114 	add.w	r1, r7, #20
 800b9f8:	f104 0914 	add.w	r9, r4, #20
 800b9fc:	f100 0e14 	add.w	lr, r0, #20
 800ba00:	f107 0210 	add.w	r2, r7, #16
 800ba04:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ba08:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ba0c:	46f2      	mov	sl, lr
 800ba0e:	2700      	movs	r7, #0
 800ba10:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba18:	fa1f f883 	uxth.w	r8, r3
 800ba1c:	fa17 f78b 	uxtah	r7, r7, fp
 800ba20:	0c1b      	lsrs	r3, r3, #16
 800ba22:	eba7 0808 	sub.w	r8, r7, r8
 800ba26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba2e:	fa1f f888 	uxth.w	r8, r8
 800ba32:	141f      	asrs	r7, r3, #16
 800ba34:	454d      	cmp	r5, r9
 800ba36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba3a:	f84a 3b04 	str.w	r3, [sl], #4
 800ba3e:	d8e7      	bhi.n	800ba10 <__mdiff+0x7c>
 800ba40:	1b2b      	subs	r3, r5, r4
 800ba42:	3b15      	subs	r3, #21
 800ba44:	f023 0303 	bic.w	r3, r3, #3
 800ba48:	3304      	adds	r3, #4
 800ba4a:	3415      	adds	r4, #21
 800ba4c:	42a5      	cmp	r5, r4
 800ba4e:	bf38      	it	cc
 800ba50:	2304      	movcc	r3, #4
 800ba52:	4419      	add	r1, r3
 800ba54:	4473      	add	r3, lr
 800ba56:	469e      	mov	lr, r3
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4565      	cmp	r5, ip
 800ba5c:	d30e      	bcc.n	800ba7c <__mdiff+0xe8>
 800ba5e:	f10c 0203 	add.w	r2, ip, #3
 800ba62:	1a52      	subs	r2, r2, r1
 800ba64:	f022 0203 	bic.w	r2, r2, #3
 800ba68:	3903      	subs	r1, #3
 800ba6a:	458c      	cmp	ip, r1
 800ba6c:	bf38      	it	cc
 800ba6e:	2200      	movcc	r2, #0
 800ba70:	441a      	add	r2, r3
 800ba72:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ba76:	b17b      	cbz	r3, 800ba98 <__mdiff+0x104>
 800ba78:	6106      	str	r6, [r0, #16]
 800ba7a:	e7a5      	b.n	800b9c8 <__mdiff+0x34>
 800ba7c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba80:	fa17 f488 	uxtah	r4, r7, r8
 800ba84:	1422      	asrs	r2, r4, #16
 800ba86:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ba8a:	b2a4      	uxth	r4, r4
 800ba8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ba90:	f84e 4b04 	str.w	r4, [lr], #4
 800ba94:	1417      	asrs	r7, r2, #16
 800ba96:	e7e0      	b.n	800ba5a <__mdiff+0xc6>
 800ba98:	3e01      	subs	r6, #1
 800ba9a:	e7ea      	b.n	800ba72 <__mdiff+0xde>
 800ba9c:	0800eecc 	.word	0x0800eecc
 800baa0:	0800efc0 	.word	0x0800efc0

0800baa4 <__ulp>:
 800baa4:	b082      	sub	sp, #8
 800baa6:	ed8d 0b00 	vstr	d0, [sp]
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	4912      	ldr	r1, [pc, #72]	; (800baf8 <__ulp+0x54>)
 800baae:	4019      	ands	r1, r3
 800bab0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bab4:	2900      	cmp	r1, #0
 800bab6:	dd05      	ble.n	800bac4 <__ulp+0x20>
 800bab8:	2200      	movs	r2, #0
 800baba:	460b      	mov	r3, r1
 800babc:	ec43 2b10 	vmov	d0, r2, r3
 800bac0:	b002      	add	sp, #8
 800bac2:	4770      	bx	lr
 800bac4:	4249      	negs	r1, r1
 800bac6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800baca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bace:	f04f 0200 	mov.w	r2, #0
 800bad2:	f04f 0300 	mov.w	r3, #0
 800bad6:	da04      	bge.n	800bae2 <__ulp+0x3e>
 800bad8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800badc:	fa41 f300 	asr.w	r3, r1, r0
 800bae0:	e7ec      	b.n	800babc <__ulp+0x18>
 800bae2:	f1a0 0114 	sub.w	r1, r0, #20
 800bae6:	291e      	cmp	r1, #30
 800bae8:	bfda      	itte	le
 800baea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800baee:	fa20 f101 	lsrle.w	r1, r0, r1
 800baf2:	2101      	movgt	r1, #1
 800baf4:	460a      	mov	r2, r1
 800baf6:	e7e1      	b.n	800babc <__ulp+0x18>
 800baf8:	7ff00000 	.word	0x7ff00000

0800bafc <__b2d>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	6905      	ldr	r5, [r0, #16]
 800bb00:	f100 0714 	add.w	r7, r0, #20
 800bb04:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bb08:	1f2e      	subs	r6, r5, #4
 800bb0a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff fd52 	bl	800b5b8 <__hi0bits>
 800bb14:	f1c0 0320 	rsb	r3, r0, #32
 800bb18:	280a      	cmp	r0, #10
 800bb1a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bb98 <__b2d+0x9c>
 800bb1e:	600b      	str	r3, [r1, #0]
 800bb20:	dc14      	bgt.n	800bb4c <__b2d+0x50>
 800bb22:	f1c0 0e0b 	rsb	lr, r0, #11
 800bb26:	fa24 f10e 	lsr.w	r1, r4, lr
 800bb2a:	42b7      	cmp	r7, r6
 800bb2c:	ea41 030c 	orr.w	r3, r1, ip
 800bb30:	bf34      	ite	cc
 800bb32:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bb36:	2100      	movcs	r1, #0
 800bb38:	3015      	adds	r0, #21
 800bb3a:	fa04 f000 	lsl.w	r0, r4, r0
 800bb3e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bb42:	ea40 0201 	orr.w	r2, r0, r1
 800bb46:	ec43 2b10 	vmov	d0, r2, r3
 800bb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb4c:	42b7      	cmp	r7, r6
 800bb4e:	bf3a      	itte	cc
 800bb50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bb54:	f1a5 0608 	subcc.w	r6, r5, #8
 800bb58:	2100      	movcs	r1, #0
 800bb5a:	380b      	subs	r0, #11
 800bb5c:	d017      	beq.n	800bb8e <__b2d+0x92>
 800bb5e:	f1c0 0c20 	rsb	ip, r0, #32
 800bb62:	fa04 f500 	lsl.w	r5, r4, r0
 800bb66:	42be      	cmp	r6, r7
 800bb68:	fa21 f40c 	lsr.w	r4, r1, ip
 800bb6c:	ea45 0504 	orr.w	r5, r5, r4
 800bb70:	bf8c      	ite	hi
 800bb72:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bb76:	2400      	movls	r4, #0
 800bb78:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bb7c:	fa01 f000 	lsl.w	r0, r1, r0
 800bb80:	fa24 f40c 	lsr.w	r4, r4, ip
 800bb84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bb88:	ea40 0204 	orr.w	r2, r0, r4
 800bb8c:	e7db      	b.n	800bb46 <__b2d+0x4a>
 800bb8e:	ea44 030c 	orr.w	r3, r4, ip
 800bb92:	460a      	mov	r2, r1
 800bb94:	e7d7      	b.n	800bb46 <__b2d+0x4a>
 800bb96:	bf00      	nop
 800bb98:	3ff00000 	.word	0x3ff00000

0800bb9c <__d2b>:
 800bb9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bba0:	4689      	mov	r9, r1
 800bba2:	2101      	movs	r1, #1
 800bba4:	ec57 6b10 	vmov	r6, r7, d0
 800bba8:	4690      	mov	r8, r2
 800bbaa:	f7ff fc0f 	bl	800b3cc <_Balloc>
 800bbae:	4604      	mov	r4, r0
 800bbb0:	b930      	cbnz	r0, 800bbc0 <__d2b+0x24>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	4b25      	ldr	r3, [pc, #148]	; (800bc4c <__d2b+0xb0>)
 800bbb6:	4826      	ldr	r0, [pc, #152]	; (800bc50 <__d2b+0xb4>)
 800bbb8:	f240 310a 	movw	r1, #778	; 0x30a
 800bbbc:	f000 ffd2 	bl	800cb64 <__assert_func>
 800bbc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bbc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bbc8:	bb35      	cbnz	r5, 800bc18 <__d2b+0x7c>
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	d028      	beq.n	800bc22 <__d2b+0x86>
 800bbd0:	4668      	mov	r0, sp
 800bbd2:	9600      	str	r6, [sp, #0]
 800bbd4:	f7ff fd10 	bl	800b5f8 <__lo0bits>
 800bbd8:	9900      	ldr	r1, [sp, #0]
 800bbda:	b300      	cbz	r0, 800bc1e <__d2b+0x82>
 800bbdc:	9a01      	ldr	r2, [sp, #4]
 800bbde:	f1c0 0320 	rsb	r3, r0, #32
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	430b      	orrs	r3, r1
 800bbe8:	40c2      	lsrs	r2, r0
 800bbea:	6163      	str	r3, [r4, #20]
 800bbec:	9201      	str	r2, [sp, #4]
 800bbee:	9b01      	ldr	r3, [sp, #4]
 800bbf0:	61a3      	str	r3, [r4, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	bf14      	ite	ne
 800bbf6:	2202      	movne	r2, #2
 800bbf8:	2201      	moveq	r2, #1
 800bbfa:	6122      	str	r2, [r4, #16]
 800bbfc:	b1d5      	cbz	r5, 800bc34 <__d2b+0x98>
 800bbfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc02:	4405      	add	r5, r0
 800bc04:	f8c9 5000 	str.w	r5, [r9]
 800bc08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc0c:	f8c8 0000 	str.w	r0, [r8]
 800bc10:	4620      	mov	r0, r4
 800bc12:	b003      	add	sp, #12
 800bc14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc1c:	e7d5      	b.n	800bbca <__d2b+0x2e>
 800bc1e:	6161      	str	r1, [r4, #20]
 800bc20:	e7e5      	b.n	800bbee <__d2b+0x52>
 800bc22:	a801      	add	r0, sp, #4
 800bc24:	f7ff fce8 	bl	800b5f8 <__lo0bits>
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	6163      	str	r3, [r4, #20]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	6122      	str	r2, [r4, #16]
 800bc30:	3020      	adds	r0, #32
 800bc32:	e7e3      	b.n	800bbfc <__d2b+0x60>
 800bc34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc3c:	f8c9 0000 	str.w	r0, [r9]
 800bc40:	6918      	ldr	r0, [r3, #16]
 800bc42:	f7ff fcb9 	bl	800b5b8 <__hi0bits>
 800bc46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc4a:	e7df      	b.n	800bc0c <__d2b+0x70>
 800bc4c:	0800eecc 	.word	0x0800eecc
 800bc50:	0800efc0 	.word	0x0800efc0

0800bc54 <__ratio>:
 800bc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4688      	mov	r8, r1
 800bc5a:	4669      	mov	r1, sp
 800bc5c:	4681      	mov	r9, r0
 800bc5e:	f7ff ff4d 	bl	800bafc <__b2d>
 800bc62:	a901      	add	r1, sp, #4
 800bc64:	4640      	mov	r0, r8
 800bc66:	ec55 4b10 	vmov	r4, r5, d0
 800bc6a:	f7ff ff47 	bl	800bafc <__b2d>
 800bc6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bc72:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bc76:	eba3 0c02 	sub.w	ip, r3, r2
 800bc7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc7e:	1a9b      	subs	r3, r3, r2
 800bc80:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc84:	ec51 0b10 	vmov	r0, r1, d0
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	bfd6      	itet	le
 800bc8c:	460a      	movle	r2, r1
 800bc8e:	462a      	movgt	r2, r5
 800bc90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc94:	468b      	mov	fp, r1
 800bc96:	462f      	mov	r7, r5
 800bc98:	bfd4      	ite	le
 800bc9a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bca2:	4620      	mov	r0, r4
 800bca4:	ee10 2a10 	vmov	r2, s0
 800bca8:	465b      	mov	r3, fp
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 fdd6 	bl	800085c <__aeabi_ddiv>
 800bcb0:	ec41 0b10 	vmov	d0, r0, r1
 800bcb4:	b003      	add	sp, #12
 800bcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcba <__copybits>:
 800bcba:	3901      	subs	r1, #1
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	1149      	asrs	r1, r1, #5
 800bcc0:	6914      	ldr	r4, [r2, #16]
 800bcc2:	3101      	adds	r1, #1
 800bcc4:	f102 0314 	add.w	r3, r2, #20
 800bcc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bccc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bcd0:	1f05      	subs	r5, r0, #4
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	d30c      	bcc.n	800bcf0 <__copybits+0x36>
 800bcd6:	1aa3      	subs	r3, r4, r2
 800bcd8:	3b11      	subs	r3, #17
 800bcda:	f023 0303 	bic.w	r3, r3, #3
 800bcde:	3211      	adds	r2, #17
 800bce0:	42a2      	cmp	r2, r4
 800bce2:	bf88      	it	hi
 800bce4:	2300      	movhi	r3, #0
 800bce6:	4418      	add	r0, r3
 800bce8:	2300      	movs	r3, #0
 800bcea:	4288      	cmp	r0, r1
 800bcec:	d305      	bcc.n	800bcfa <__copybits+0x40>
 800bcee:	bd70      	pop	{r4, r5, r6, pc}
 800bcf0:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcf4:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcf8:	e7eb      	b.n	800bcd2 <__copybits+0x18>
 800bcfa:	f840 3b04 	str.w	r3, [r0], #4
 800bcfe:	e7f4      	b.n	800bcea <__copybits+0x30>

0800bd00 <__any_on>:
 800bd00:	f100 0214 	add.w	r2, r0, #20
 800bd04:	6900      	ldr	r0, [r0, #16]
 800bd06:	114b      	asrs	r3, r1, #5
 800bd08:	4298      	cmp	r0, r3
 800bd0a:	b510      	push	{r4, lr}
 800bd0c:	db11      	blt.n	800bd32 <__any_on+0x32>
 800bd0e:	dd0a      	ble.n	800bd26 <__any_on+0x26>
 800bd10:	f011 011f 	ands.w	r1, r1, #31
 800bd14:	d007      	beq.n	800bd26 <__any_on+0x26>
 800bd16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bd1a:	fa24 f001 	lsr.w	r0, r4, r1
 800bd1e:	fa00 f101 	lsl.w	r1, r0, r1
 800bd22:	428c      	cmp	r4, r1
 800bd24:	d10b      	bne.n	800bd3e <__any_on+0x3e>
 800bd26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d803      	bhi.n	800bd36 <__any_on+0x36>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	bd10      	pop	{r4, pc}
 800bd32:	4603      	mov	r3, r0
 800bd34:	e7f7      	b.n	800bd26 <__any_on+0x26>
 800bd36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd3a:	2900      	cmp	r1, #0
 800bd3c:	d0f5      	beq.n	800bd2a <__any_on+0x2a>
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7f6      	b.n	800bd30 <__any_on+0x30>

0800bd42 <_calloc_r>:
 800bd42:	b513      	push	{r0, r1, r4, lr}
 800bd44:	434a      	muls	r2, r1
 800bd46:	4611      	mov	r1, r2
 800bd48:	9201      	str	r2, [sp, #4]
 800bd4a:	f7fb fead 	bl	8007aa8 <_malloc_r>
 800bd4e:	4604      	mov	r4, r0
 800bd50:	b118      	cbz	r0, 800bd5a <_calloc_r+0x18>
 800bd52:	9a01      	ldr	r2, [sp, #4]
 800bd54:	2100      	movs	r1, #0
 800bd56:	f7fb fe4f 	bl	80079f8 <memset>
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd10      	pop	{r4, pc}

0800bd60 <__ssputs_r>:
 800bd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd64:	688e      	ldr	r6, [r1, #8]
 800bd66:	429e      	cmp	r6, r3
 800bd68:	4682      	mov	sl, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4690      	mov	r8, r2
 800bd6e:	461f      	mov	r7, r3
 800bd70:	d838      	bhi.n	800bde4 <__ssputs_r+0x84>
 800bd72:	898a      	ldrh	r2, [r1, #12]
 800bd74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd78:	d032      	beq.n	800bde0 <__ssputs_r+0x80>
 800bd7a:	6825      	ldr	r5, [r4, #0]
 800bd7c:	6909      	ldr	r1, [r1, #16]
 800bd7e:	eba5 0901 	sub.w	r9, r5, r1
 800bd82:	6965      	ldr	r5, [r4, #20]
 800bd84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	444b      	add	r3, r9
 800bd90:	106d      	asrs	r5, r5, #1
 800bd92:	429d      	cmp	r5, r3
 800bd94:	bf38      	it	cc
 800bd96:	461d      	movcc	r5, r3
 800bd98:	0553      	lsls	r3, r2, #21
 800bd9a:	d531      	bpl.n	800be00 <__ssputs_r+0xa0>
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	f7fb fe83 	bl	8007aa8 <_malloc_r>
 800bda2:	4606      	mov	r6, r0
 800bda4:	b950      	cbnz	r0, 800bdbc <__ssputs_r+0x5c>
 800bda6:	230c      	movs	r3, #12
 800bda8:	f8ca 3000 	str.w	r3, [sl]
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb2:	81a3      	strh	r3, [r4, #12]
 800bdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdbc:	6921      	ldr	r1, [r4, #16]
 800bdbe:	464a      	mov	r2, r9
 800bdc0:	f7fb fe0c 	bl	80079dc <memcpy>
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdce:	81a3      	strh	r3, [r4, #12]
 800bdd0:	6126      	str	r6, [r4, #16]
 800bdd2:	6165      	str	r5, [r4, #20]
 800bdd4:	444e      	add	r6, r9
 800bdd6:	eba5 0509 	sub.w	r5, r5, r9
 800bdda:	6026      	str	r6, [r4, #0]
 800bddc:	60a5      	str	r5, [r4, #8]
 800bdde:	463e      	mov	r6, r7
 800bde0:	42be      	cmp	r6, r7
 800bde2:	d900      	bls.n	800bde6 <__ssputs_r+0x86>
 800bde4:	463e      	mov	r6, r7
 800bde6:	4632      	mov	r2, r6
 800bde8:	6820      	ldr	r0, [r4, #0]
 800bdea:	4641      	mov	r1, r8
 800bdec:	f000 ff0c 	bl	800cc08 <memmove>
 800bdf0:	68a3      	ldr	r3, [r4, #8]
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	1b9b      	subs	r3, r3, r6
 800bdf6:	4432      	add	r2, r6
 800bdf8:	60a3      	str	r3, [r4, #8]
 800bdfa:	6022      	str	r2, [r4, #0]
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	e7db      	b.n	800bdb8 <__ssputs_r+0x58>
 800be00:	462a      	mov	r2, r5
 800be02:	f000 ff1b 	bl	800cc3c <_realloc_r>
 800be06:	4606      	mov	r6, r0
 800be08:	2800      	cmp	r0, #0
 800be0a:	d1e1      	bne.n	800bdd0 <__ssputs_r+0x70>
 800be0c:	6921      	ldr	r1, [r4, #16]
 800be0e:	4650      	mov	r0, sl
 800be10:	f7fb fdfa 	bl	8007a08 <_free_r>
 800be14:	e7c7      	b.n	800bda6 <__ssputs_r+0x46>
	...

0800be18 <_svfiprintf_r>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4698      	mov	r8, r3
 800be1e:	898b      	ldrh	r3, [r1, #12]
 800be20:	061b      	lsls	r3, r3, #24
 800be22:	b09d      	sub	sp, #116	; 0x74
 800be24:	4607      	mov	r7, r0
 800be26:	460d      	mov	r5, r1
 800be28:	4614      	mov	r4, r2
 800be2a:	d50e      	bpl.n	800be4a <_svfiprintf_r+0x32>
 800be2c:	690b      	ldr	r3, [r1, #16]
 800be2e:	b963      	cbnz	r3, 800be4a <_svfiprintf_r+0x32>
 800be30:	2140      	movs	r1, #64	; 0x40
 800be32:	f7fb fe39 	bl	8007aa8 <_malloc_r>
 800be36:	6028      	str	r0, [r5, #0]
 800be38:	6128      	str	r0, [r5, #16]
 800be3a:	b920      	cbnz	r0, 800be46 <_svfiprintf_r+0x2e>
 800be3c:	230c      	movs	r3, #12
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e0d1      	b.n	800bfea <_svfiprintf_r+0x1d2>
 800be46:	2340      	movs	r3, #64	; 0x40
 800be48:	616b      	str	r3, [r5, #20]
 800be4a:	2300      	movs	r3, #0
 800be4c:	9309      	str	r3, [sp, #36]	; 0x24
 800be4e:	2320      	movs	r3, #32
 800be50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be54:	f8cd 800c 	str.w	r8, [sp, #12]
 800be58:	2330      	movs	r3, #48	; 0x30
 800be5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c004 <_svfiprintf_r+0x1ec>
 800be5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be62:	f04f 0901 	mov.w	r9, #1
 800be66:	4623      	mov	r3, r4
 800be68:	469a      	mov	sl, r3
 800be6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be6e:	b10a      	cbz	r2, 800be74 <_svfiprintf_r+0x5c>
 800be70:	2a25      	cmp	r2, #37	; 0x25
 800be72:	d1f9      	bne.n	800be68 <_svfiprintf_r+0x50>
 800be74:	ebba 0b04 	subs.w	fp, sl, r4
 800be78:	d00b      	beq.n	800be92 <_svfiprintf_r+0x7a>
 800be7a:	465b      	mov	r3, fp
 800be7c:	4622      	mov	r2, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	4638      	mov	r0, r7
 800be82:	f7ff ff6d 	bl	800bd60 <__ssputs_r>
 800be86:	3001      	adds	r0, #1
 800be88:	f000 80aa 	beq.w	800bfe0 <_svfiprintf_r+0x1c8>
 800be8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be8e:	445a      	add	r2, fp
 800be90:	9209      	str	r2, [sp, #36]	; 0x24
 800be92:	f89a 3000 	ldrb.w	r3, [sl]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80a2 	beq.w	800bfe0 <_svfiprintf_r+0x1c8>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea6:	f10a 0a01 	add.w	sl, sl, #1
 800beaa:	9304      	str	r3, [sp, #16]
 800beac:	9307      	str	r3, [sp, #28]
 800beae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beb2:	931a      	str	r3, [sp, #104]	; 0x68
 800beb4:	4654      	mov	r4, sl
 800beb6:	2205      	movs	r2, #5
 800beb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebc:	4851      	ldr	r0, [pc, #324]	; (800c004 <_svfiprintf_r+0x1ec>)
 800bebe:	f7f4 f997 	bl	80001f0 <memchr>
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	b9d8      	cbnz	r0, 800befe <_svfiprintf_r+0xe6>
 800bec6:	06d0      	lsls	r0, r2, #27
 800bec8:	bf44      	itt	mi
 800beca:	2320      	movmi	r3, #32
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed0:	0711      	lsls	r1, r2, #28
 800bed2:	bf44      	itt	mi
 800bed4:	232b      	movmi	r3, #43	; 0x2b
 800bed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beda:	f89a 3000 	ldrb.w	r3, [sl]
 800bede:	2b2a      	cmp	r3, #42	; 0x2a
 800bee0:	d015      	beq.n	800bf0e <_svfiprintf_r+0xf6>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	4654      	mov	r4, sl
 800bee6:	2000      	movs	r0, #0
 800bee8:	f04f 0c0a 	mov.w	ip, #10
 800beec:	4621      	mov	r1, r4
 800beee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef2:	3b30      	subs	r3, #48	; 0x30
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d94e      	bls.n	800bf96 <_svfiprintf_r+0x17e>
 800bef8:	b1b0      	cbz	r0, 800bf28 <_svfiprintf_r+0x110>
 800befa:	9207      	str	r2, [sp, #28]
 800befc:	e014      	b.n	800bf28 <_svfiprintf_r+0x110>
 800befe:	eba0 0308 	sub.w	r3, r0, r8
 800bf02:	fa09 f303 	lsl.w	r3, r9, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	46a2      	mov	sl, r4
 800bf0c:	e7d2      	b.n	800beb4 <_svfiprintf_r+0x9c>
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	1d19      	adds	r1, r3, #4
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	9103      	str	r1, [sp, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bfbb      	ittet	lt
 800bf1a:	425b      	neglt	r3, r3
 800bf1c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf20:	9307      	strge	r3, [sp, #28]
 800bf22:	9307      	strlt	r3, [sp, #28]
 800bf24:	bfb8      	it	lt
 800bf26:	9204      	strlt	r2, [sp, #16]
 800bf28:	7823      	ldrb	r3, [r4, #0]
 800bf2a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2c:	d10c      	bne.n	800bf48 <_svfiprintf_r+0x130>
 800bf2e:	7863      	ldrb	r3, [r4, #1]
 800bf30:	2b2a      	cmp	r3, #42	; 0x2a
 800bf32:	d135      	bne.n	800bfa0 <_svfiprintf_r+0x188>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	9203      	str	r2, [sp, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfb8      	it	lt
 800bf40:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf44:	3402      	adds	r4, #2
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c014 <_svfiprintf_r+0x1fc>
 800bf4c:	7821      	ldrb	r1, [r4, #0]
 800bf4e:	2203      	movs	r2, #3
 800bf50:	4650      	mov	r0, sl
 800bf52:	f7f4 f94d 	bl	80001f0 <memchr>
 800bf56:	b140      	cbz	r0, 800bf6a <_svfiprintf_r+0x152>
 800bf58:	2340      	movs	r3, #64	; 0x40
 800bf5a:	eba0 000a 	sub.w	r0, r0, sl
 800bf5e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	4303      	orrs	r3, r0
 800bf66:	3401      	adds	r4, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6e:	4826      	ldr	r0, [pc, #152]	; (800c008 <_svfiprintf_r+0x1f0>)
 800bf70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf74:	2206      	movs	r2, #6
 800bf76:	f7f4 f93b 	bl	80001f0 <memchr>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d038      	beq.n	800bff0 <_svfiprintf_r+0x1d8>
 800bf7e:	4b23      	ldr	r3, [pc, #140]	; (800c00c <_svfiprintf_r+0x1f4>)
 800bf80:	bb1b      	cbnz	r3, 800bfca <_svfiprintf_r+0x1b2>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	3307      	adds	r3, #7
 800bf86:	f023 0307 	bic.w	r3, r3, #7
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	9303      	str	r3, [sp, #12]
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	4433      	add	r3, r6
 800bf92:	9309      	str	r3, [sp, #36]	; 0x24
 800bf94:	e767      	b.n	800be66 <_svfiprintf_r+0x4e>
 800bf96:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	e7a5      	b.n	800beec <_svfiprintf_r+0xd4>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	3401      	adds	r4, #1
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	f04f 0c0a 	mov.w	ip, #10
 800bfac:	4620      	mov	r0, r4
 800bfae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb2:	3a30      	subs	r2, #48	; 0x30
 800bfb4:	2a09      	cmp	r2, #9
 800bfb6:	d903      	bls.n	800bfc0 <_svfiprintf_r+0x1a8>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0c5      	beq.n	800bf48 <_svfiprintf_r+0x130>
 800bfbc:	9105      	str	r1, [sp, #20]
 800bfbe:	e7c3      	b.n	800bf48 <_svfiprintf_r+0x130>
 800bfc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e7f0      	b.n	800bfac <_svfiprintf_r+0x194>
 800bfca:	ab03      	add	r3, sp, #12
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	462a      	mov	r2, r5
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <_svfiprintf_r+0x1f8>)
 800bfd2:	a904      	add	r1, sp, #16
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7fb fe61 	bl	8007c9c <_printf_float>
 800bfda:	1c42      	adds	r2, r0, #1
 800bfdc:	4606      	mov	r6, r0
 800bfde:	d1d6      	bne.n	800bf8e <_svfiprintf_r+0x176>
 800bfe0:	89ab      	ldrh	r3, [r5, #12]
 800bfe2:	065b      	lsls	r3, r3, #25
 800bfe4:	f53f af2c 	bmi.w	800be40 <_svfiprintf_r+0x28>
 800bfe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfea:	b01d      	add	sp, #116	; 0x74
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <_svfiprintf_r+0x1f8>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7fc f8f2 	bl	80081e4 <_printf_i>
 800c000:	e7eb      	b.n	800bfda <_svfiprintf_r+0x1c2>
 800c002:	bf00      	nop
 800c004:	0800f11c 	.word	0x0800f11c
 800c008:	0800f126 	.word	0x0800f126
 800c00c:	08007c9d 	.word	0x08007c9d
 800c010:	0800bd61 	.word	0x0800bd61
 800c014:	0800f122 	.word	0x0800f122

0800c018 <_sungetc_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	1c4b      	adds	r3, r1, #1
 800c01c:	4614      	mov	r4, r2
 800c01e:	d103      	bne.n	800c028 <_sungetc_r+0x10>
 800c020:	f04f 35ff 	mov.w	r5, #4294967295
 800c024:	4628      	mov	r0, r5
 800c026:	bd38      	pop	{r3, r4, r5, pc}
 800c028:	8993      	ldrh	r3, [r2, #12]
 800c02a:	f023 0320 	bic.w	r3, r3, #32
 800c02e:	8193      	strh	r3, [r2, #12]
 800c030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c032:	6852      	ldr	r2, [r2, #4]
 800c034:	b2cd      	uxtb	r5, r1
 800c036:	b18b      	cbz	r3, 800c05c <_sungetc_r+0x44>
 800c038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c03a:	4293      	cmp	r3, r2
 800c03c:	dd08      	ble.n	800c050 <_sungetc_r+0x38>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	1e5a      	subs	r2, r3, #1
 800c042:	6022      	str	r2, [r4, #0]
 800c044:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c048:	6863      	ldr	r3, [r4, #4]
 800c04a:	3301      	adds	r3, #1
 800c04c:	6063      	str	r3, [r4, #4]
 800c04e:	e7e9      	b.n	800c024 <_sungetc_r+0xc>
 800c050:	4621      	mov	r1, r4
 800c052:	f000 fd3f 	bl	800cad4 <__submore>
 800c056:	2800      	cmp	r0, #0
 800c058:	d0f1      	beq.n	800c03e <_sungetc_r+0x26>
 800c05a:	e7e1      	b.n	800c020 <_sungetc_r+0x8>
 800c05c:	6921      	ldr	r1, [r4, #16]
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	b151      	cbz	r1, 800c078 <_sungetc_r+0x60>
 800c062:	4299      	cmp	r1, r3
 800c064:	d208      	bcs.n	800c078 <_sungetc_r+0x60>
 800c066:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c06a:	42a9      	cmp	r1, r5
 800c06c:	d104      	bne.n	800c078 <_sungetc_r+0x60>
 800c06e:	3b01      	subs	r3, #1
 800c070:	3201      	adds	r2, #1
 800c072:	6023      	str	r3, [r4, #0]
 800c074:	6062      	str	r2, [r4, #4]
 800c076:	e7d5      	b.n	800c024 <_sungetc_r+0xc>
 800c078:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c080:	6363      	str	r3, [r4, #52]	; 0x34
 800c082:	2303      	movs	r3, #3
 800c084:	63a3      	str	r3, [r4, #56]	; 0x38
 800c086:	4623      	mov	r3, r4
 800c088:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	2301      	movs	r3, #1
 800c090:	e7dc      	b.n	800c04c <_sungetc_r+0x34>

0800c092 <__ssrefill_r>:
 800c092:	b510      	push	{r4, lr}
 800c094:	460c      	mov	r4, r1
 800c096:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c098:	b169      	cbz	r1, 800c0b6 <__ssrefill_r+0x24>
 800c09a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c09e:	4299      	cmp	r1, r3
 800c0a0:	d001      	beq.n	800c0a6 <__ssrefill_r+0x14>
 800c0a2:	f7fb fcb1 	bl	8007a08 <_free_r>
 800c0a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0a8:	6063      	str	r3, [r4, #4]
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ae:	b113      	cbz	r3, 800c0b6 <__ssrefill_r+0x24>
 800c0b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c0b2:	6023      	str	r3, [r4, #0]
 800c0b4:	bd10      	pop	{r4, pc}
 800c0b6:	6923      	ldr	r3, [r4, #16]
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	6063      	str	r3, [r4, #4]
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	f043 0320 	orr.w	r3, r3, #32
 800c0c4:	81a3      	strh	r3, [r4, #12]
 800c0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ca:	e7f3      	b.n	800c0b4 <__ssrefill_r+0x22>

0800c0cc <__ssvfiscanf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c0dc:	49b2      	ldr	r1, [pc, #712]	; (800c3a8 <__ssvfiscanf_r+0x2dc>)
 800c0de:	91a0      	str	r1, [sp, #640]	; 0x280
 800c0e0:	f10d 0804 	add.w	r8, sp, #4
 800c0e4:	49b1      	ldr	r1, [pc, #708]	; (800c3ac <__ssvfiscanf_r+0x2e0>)
 800c0e6:	4fb2      	ldr	r7, [pc, #712]	; (800c3b0 <__ssvfiscanf_r+0x2e4>)
 800c0e8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c3b4 <__ssvfiscanf_r+0x2e8>
 800c0ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c0f0:	4606      	mov	r6, r0
 800c0f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	f892 a000 	ldrb.w	sl, [r2]
 800c0fa:	f1ba 0f00 	cmp.w	sl, #0
 800c0fe:	f000 8151 	beq.w	800c3a4 <__ssvfiscanf_r+0x2d8>
 800c102:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c106:	f013 0308 	ands.w	r3, r3, #8
 800c10a:	f102 0501 	add.w	r5, r2, #1
 800c10e:	d019      	beq.n	800c144 <__ssvfiscanf_r+0x78>
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	dd0f      	ble.n	800c136 <__ssvfiscanf_r+0x6a>
 800c116:	6823      	ldr	r3, [r4, #0]
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	5cba      	ldrb	r2, [r7, r2]
 800c11c:	0712      	lsls	r2, r2, #28
 800c11e:	d401      	bmi.n	800c124 <__ssvfiscanf_r+0x58>
 800c120:	462a      	mov	r2, r5
 800c122:	e7e8      	b.n	800c0f6 <__ssvfiscanf_r+0x2a>
 800c124:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c126:	3201      	adds	r2, #1
 800c128:	9245      	str	r2, [sp, #276]	; 0x114
 800c12a:	6862      	ldr	r2, [r4, #4]
 800c12c:	3301      	adds	r3, #1
 800c12e:	3a01      	subs	r2, #1
 800c130:	6062      	str	r2, [r4, #4]
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	e7ec      	b.n	800c110 <__ssvfiscanf_r+0x44>
 800c136:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c138:	4621      	mov	r1, r4
 800c13a:	4630      	mov	r0, r6
 800c13c:	4798      	blx	r3
 800c13e:	2800      	cmp	r0, #0
 800c140:	d0e9      	beq.n	800c116 <__ssvfiscanf_r+0x4a>
 800c142:	e7ed      	b.n	800c120 <__ssvfiscanf_r+0x54>
 800c144:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c148:	f040 8083 	bne.w	800c252 <__ssvfiscanf_r+0x186>
 800c14c:	9341      	str	r3, [sp, #260]	; 0x104
 800c14e:	9343      	str	r3, [sp, #268]	; 0x10c
 800c150:	7853      	ldrb	r3, [r2, #1]
 800c152:	2b2a      	cmp	r3, #42	; 0x2a
 800c154:	bf02      	ittt	eq
 800c156:	2310      	moveq	r3, #16
 800c158:	1c95      	addeq	r5, r2, #2
 800c15a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c15c:	220a      	movs	r2, #10
 800c15e:	46ab      	mov	fp, r5
 800c160:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c164:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c168:	2b09      	cmp	r3, #9
 800c16a:	d91d      	bls.n	800c1a8 <__ssvfiscanf_r+0xdc>
 800c16c:	4891      	ldr	r0, [pc, #580]	; (800c3b4 <__ssvfiscanf_r+0x2e8>)
 800c16e:	2203      	movs	r2, #3
 800c170:	f7f4 f83e 	bl	80001f0 <memchr>
 800c174:	b140      	cbz	r0, 800c188 <__ssvfiscanf_r+0xbc>
 800c176:	2301      	movs	r3, #1
 800c178:	eba0 0009 	sub.w	r0, r0, r9
 800c17c:	fa03 f000 	lsl.w	r0, r3, r0
 800c180:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c182:	4318      	orrs	r0, r3
 800c184:	9041      	str	r0, [sp, #260]	; 0x104
 800c186:	465d      	mov	r5, fp
 800c188:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c18c:	2b78      	cmp	r3, #120	; 0x78
 800c18e:	d806      	bhi.n	800c19e <__ssvfiscanf_r+0xd2>
 800c190:	2b57      	cmp	r3, #87	; 0x57
 800c192:	d810      	bhi.n	800c1b6 <__ssvfiscanf_r+0xea>
 800c194:	2b25      	cmp	r3, #37	; 0x25
 800c196:	d05c      	beq.n	800c252 <__ssvfiscanf_r+0x186>
 800c198:	d856      	bhi.n	800c248 <__ssvfiscanf_r+0x17c>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d074      	beq.n	800c288 <__ssvfiscanf_r+0x1bc>
 800c19e:	2303      	movs	r3, #3
 800c1a0:	9347      	str	r3, [sp, #284]	; 0x11c
 800c1a2:	230a      	movs	r3, #10
 800c1a4:	9342      	str	r3, [sp, #264]	; 0x108
 800c1a6:	e081      	b.n	800c2ac <__ssvfiscanf_r+0x1e0>
 800c1a8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c1aa:	fb02 1303 	mla	r3, r2, r3, r1
 800c1ae:	3b30      	subs	r3, #48	; 0x30
 800c1b0:	9343      	str	r3, [sp, #268]	; 0x10c
 800c1b2:	465d      	mov	r5, fp
 800c1b4:	e7d3      	b.n	800c15e <__ssvfiscanf_r+0x92>
 800c1b6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c1ba:	2a20      	cmp	r2, #32
 800c1bc:	d8ef      	bhi.n	800c19e <__ssvfiscanf_r+0xd2>
 800c1be:	a101      	add	r1, pc, #4	; (adr r1, 800c1c4 <__ssvfiscanf_r+0xf8>)
 800c1c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1c4:	0800c297 	.word	0x0800c297
 800c1c8:	0800c19f 	.word	0x0800c19f
 800c1cc:	0800c19f 	.word	0x0800c19f
 800c1d0:	0800c2f5 	.word	0x0800c2f5
 800c1d4:	0800c19f 	.word	0x0800c19f
 800c1d8:	0800c19f 	.word	0x0800c19f
 800c1dc:	0800c19f 	.word	0x0800c19f
 800c1e0:	0800c19f 	.word	0x0800c19f
 800c1e4:	0800c19f 	.word	0x0800c19f
 800c1e8:	0800c19f 	.word	0x0800c19f
 800c1ec:	0800c19f 	.word	0x0800c19f
 800c1f0:	0800c30b 	.word	0x0800c30b
 800c1f4:	0800c2e1 	.word	0x0800c2e1
 800c1f8:	0800c24f 	.word	0x0800c24f
 800c1fc:	0800c24f 	.word	0x0800c24f
 800c200:	0800c24f 	.word	0x0800c24f
 800c204:	0800c19f 	.word	0x0800c19f
 800c208:	0800c2e5 	.word	0x0800c2e5
 800c20c:	0800c19f 	.word	0x0800c19f
 800c210:	0800c19f 	.word	0x0800c19f
 800c214:	0800c19f 	.word	0x0800c19f
 800c218:	0800c19f 	.word	0x0800c19f
 800c21c:	0800c31b 	.word	0x0800c31b
 800c220:	0800c2ed 	.word	0x0800c2ed
 800c224:	0800c28f 	.word	0x0800c28f
 800c228:	0800c19f 	.word	0x0800c19f
 800c22c:	0800c19f 	.word	0x0800c19f
 800c230:	0800c317 	.word	0x0800c317
 800c234:	0800c19f 	.word	0x0800c19f
 800c238:	0800c2e1 	.word	0x0800c2e1
 800c23c:	0800c19f 	.word	0x0800c19f
 800c240:	0800c19f 	.word	0x0800c19f
 800c244:	0800c297 	.word	0x0800c297
 800c248:	3b45      	subs	r3, #69	; 0x45
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d8a7      	bhi.n	800c19e <__ssvfiscanf_r+0xd2>
 800c24e:	2305      	movs	r3, #5
 800c250:	e02b      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c252:	6863      	ldr	r3, [r4, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	dd0d      	ble.n	800c274 <__ssvfiscanf_r+0x1a8>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	781a      	ldrb	r2, [r3, #0]
 800c25c:	4552      	cmp	r2, sl
 800c25e:	f040 80a1 	bne.w	800c3a4 <__ssvfiscanf_r+0x2d8>
 800c262:	3301      	adds	r3, #1
 800c264:	6862      	ldr	r2, [r4, #4]
 800c266:	6023      	str	r3, [r4, #0]
 800c268:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c26a:	3a01      	subs	r2, #1
 800c26c:	3301      	adds	r3, #1
 800c26e:	6062      	str	r2, [r4, #4]
 800c270:	9345      	str	r3, [sp, #276]	; 0x114
 800c272:	e755      	b.n	800c120 <__ssvfiscanf_r+0x54>
 800c274:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c276:	4621      	mov	r1, r4
 800c278:	4630      	mov	r0, r6
 800c27a:	4798      	blx	r3
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d0eb      	beq.n	800c258 <__ssvfiscanf_r+0x18c>
 800c280:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c282:	2800      	cmp	r0, #0
 800c284:	f040 8084 	bne.w	800c390 <__ssvfiscanf_r+0x2c4>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e086      	b.n	800c39c <__ssvfiscanf_r+0x2d0>
 800c28e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c290:	f042 0220 	orr.w	r2, r2, #32
 800c294:	9241      	str	r2, [sp, #260]	; 0x104
 800c296:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c29c:	9241      	str	r2, [sp, #260]	; 0x104
 800c29e:	2210      	movs	r2, #16
 800c2a0:	2b6f      	cmp	r3, #111	; 0x6f
 800c2a2:	9242      	str	r2, [sp, #264]	; 0x108
 800c2a4:	bf34      	ite	cc
 800c2a6:	2303      	movcc	r3, #3
 800c2a8:	2304      	movcs	r3, #4
 800c2aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800c2ac:	6863      	ldr	r3, [r4, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dd41      	ble.n	800c336 <__ssvfiscanf_r+0x26a>
 800c2b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2b4:	0659      	lsls	r1, r3, #25
 800c2b6:	d404      	bmi.n	800c2c2 <__ssvfiscanf_r+0x1f6>
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	781a      	ldrb	r2, [r3, #0]
 800c2bc:	5cba      	ldrb	r2, [r7, r2]
 800c2be:	0712      	lsls	r2, r2, #28
 800c2c0:	d440      	bmi.n	800c344 <__ssvfiscanf_r+0x278>
 800c2c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	dc4f      	bgt.n	800c368 <__ssvfiscanf_r+0x29c>
 800c2c8:	466b      	mov	r3, sp
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	a941      	add	r1, sp, #260	; 0x104
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f000 f9ce 	bl	800c670 <_scanf_chars>
 800c2d4:	2801      	cmp	r0, #1
 800c2d6:	d065      	beq.n	800c3a4 <__ssvfiscanf_r+0x2d8>
 800c2d8:	2802      	cmp	r0, #2
 800c2da:	f47f af21 	bne.w	800c120 <__ssvfiscanf_r+0x54>
 800c2de:	e7cf      	b.n	800c280 <__ssvfiscanf_r+0x1b4>
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	e7dd      	b.n	800c2a0 <__ssvfiscanf_r+0x1d4>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9342      	str	r3, [sp, #264]	; 0x108
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e7de      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c2ec:	2308      	movs	r3, #8
 800c2ee:	9342      	str	r3, [sp, #264]	; 0x108
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	e7da      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	f000 fb22 	bl	800c940 <__sccl>
 800c2fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c302:	9341      	str	r3, [sp, #260]	; 0x104
 800c304:	4605      	mov	r5, r0
 800c306:	2301      	movs	r3, #1
 800c308:	e7cf      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c30a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c310:	9341      	str	r3, [sp, #260]	; 0x104
 800c312:	2300      	movs	r3, #0
 800c314:	e7c9      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c316:	2302      	movs	r3, #2
 800c318:	e7c7      	b.n	800c2aa <__ssvfiscanf_r+0x1de>
 800c31a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c31c:	06c3      	lsls	r3, r0, #27
 800c31e:	f53f aeff 	bmi.w	800c120 <__ssvfiscanf_r+0x54>
 800c322:	9b00      	ldr	r3, [sp, #0]
 800c324:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c326:	1d19      	adds	r1, r3, #4
 800c328:	9100      	str	r1, [sp, #0]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	07c0      	lsls	r0, r0, #31
 800c32e:	bf4c      	ite	mi
 800c330:	801a      	strhmi	r2, [r3, #0]
 800c332:	601a      	strpl	r2, [r3, #0]
 800c334:	e6f4      	b.n	800c120 <__ssvfiscanf_r+0x54>
 800c336:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c338:	4621      	mov	r1, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	4798      	blx	r3
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0b7      	beq.n	800c2b2 <__ssvfiscanf_r+0x1e6>
 800c342:	e79d      	b.n	800c280 <__ssvfiscanf_r+0x1b4>
 800c344:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c346:	3201      	adds	r2, #1
 800c348:	9245      	str	r2, [sp, #276]	; 0x114
 800c34a:	6862      	ldr	r2, [r4, #4]
 800c34c:	3a01      	subs	r2, #1
 800c34e:	2a00      	cmp	r2, #0
 800c350:	6062      	str	r2, [r4, #4]
 800c352:	dd02      	ble.n	800c35a <__ssvfiscanf_r+0x28e>
 800c354:	3301      	adds	r3, #1
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	e7ae      	b.n	800c2b8 <__ssvfiscanf_r+0x1ec>
 800c35a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c35c:	4621      	mov	r1, r4
 800c35e:	4630      	mov	r0, r6
 800c360:	4798      	blx	r3
 800c362:	2800      	cmp	r0, #0
 800c364:	d0a8      	beq.n	800c2b8 <__ssvfiscanf_r+0x1ec>
 800c366:	e78b      	b.n	800c280 <__ssvfiscanf_r+0x1b4>
 800c368:	2b04      	cmp	r3, #4
 800c36a:	dc06      	bgt.n	800c37a <__ssvfiscanf_r+0x2ae>
 800c36c:	466b      	mov	r3, sp
 800c36e:	4622      	mov	r2, r4
 800c370:	a941      	add	r1, sp, #260	; 0x104
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f9d4 	bl	800c720 <_scanf_i>
 800c378:	e7ac      	b.n	800c2d4 <__ssvfiscanf_r+0x208>
 800c37a:	4b0f      	ldr	r3, [pc, #60]	; (800c3b8 <__ssvfiscanf_r+0x2ec>)
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f43f aecf 	beq.w	800c120 <__ssvfiscanf_r+0x54>
 800c382:	466b      	mov	r3, sp
 800c384:	4622      	mov	r2, r4
 800c386:	a941      	add	r1, sp, #260	; 0x104
 800c388:	4630      	mov	r0, r6
 800c38a:	f7fc f851 	bl	8008430 <_scanf_float>
 800c38e:	e7a1      	b.n	800c2d4 <__ssvfiscanf_r+0x208>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c396:	bf18      	it	ne
 800c398:	f04f 30ff 	movne.w	r0, #4294967295
 800c39c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c3a6:	e7f9      	b.n	800c39c <__ssvfiscanf_r+0x2d0>
 800c3a8:	0800c019 	.word	0x0800c019
 800c3ac:	0800c093 	.word	0x0800c093
 800c3b0:	0800ed49 	.word	0x0800ed49
 800c3b4:	0800f122 	.word	0x0800f122
 800c3b8:	08008431 	.word	0x08008431

0800c3bc <__sfputc_r>:
 800c3bc:	6893      	ldr	r3, [r2, #8]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	b410      	push	{r4}
 800c3c4:	6093      	str	r3, [r2, #8]
 800c3c6:	da08      	bge.n	800c3da <__sfputc_r+0x1e>
 800c3c8:	6994      	ldr	r4, [r2, #24]
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	db01      	blt.n	800c3d2 <__sfputc_r+0x16>
 800c3ce:	290a      	cmp	r1, #10
 800c3d0:	d103      	bne.n	800c3da <__sfputc_r+0x1e>
 800c3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3d6:	f7fd badd 	b.w	8009994 <__swbuf_r>
 800c3da:	6813      	ldr	r3, [r2, #0]
 800c3dc:	1c58      	adds	r0, r3, #1
 800c3de:	6010      	str	r0, [r2, #0]
 800c3e0:	7019      	strb	r1, [r3, #0]
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <__sfputs_r>:
 800c3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	460f      	mov	r7, r1
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	18d5      	adds	r5, r2, r3
 800c3f4:	42ac      	cmp	r4, r5
 800c3f6:	d101      	bne.n	800c3fc <__sfputs_r+0x12>
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e007      	b.n	800c40c <__sfputs_r+0x22>
 800c3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c400:	463a      	mov	r2, r7
 800c402:	4630      	mov	r0, r6
 800c404:	f7ff ffda 	bl	800c3bc <__sfputc_r>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d1f3      	bne.n	800c3f4 <__sfputs_r+0xa>
 800c40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c410 <_vfiprintf_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	460d      	mov	r5, r1
 800c416:	b09d      	sub	sp, #116	; 0x74
 800c418:	4614      	mov	r4, r2
 800c41a:	4698      	mov	r8, r3
 800c41c:	4606      	mov	r6, r0
 800c41e:	b118      	cbz	r0, 800c428 <_vfiprintf_r+0x18>
 800c420:	6983      	ldr	r3, [r0, #24]
 800c422:	b90b      	cbnz	r3, 800c428 <_vfiprintf_r+0x18>
 800c424:	f7fe fb2a 	bl	800aa7c <__sinit>
 800c428:	4b89      	ldr	r3, [pc, #548]	; (800c650 <_vfiprintf_r+0x240>)
 800c42a:	429d      	cmp	r5, r3
 800c42c:	d11b      	bne.n	800c466 <_vfiprintf_r+0x56>
 800c42e:	6875      	ldr	r5, [r6, #4]
 800c430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c432:	07d9      	lsls	r1, r3, #31
 800c434:	d405      	bmi.n	800c442 <_vfiprintf_r+0x32>
 800c436:	89ab      	ldrh	r3, [r5, #12]
 800c438:	059a      	lsls	r2, r3, #22
 800c43a:	d402      	bmi.n	800c442 <_vfiprintf_r+0x32>
 800c43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c43e:	f7fe ff2e 	bl	800b29e <__retarget_lock_acquire_recursive>
 800c442:	89ab      	ldrh	r3, [r5, #12]
 800c444:	071b      	lsls	r3, r3, #28
 800c446:	d501      	bpl.n	800c44c <_vfiprintf_r+0x3c>
 800c448:	692b      	ldr	r3, [r5, #16]
 800c44a:	b9eb      	cbnz	r3, 800c488 <_vfiprintf_r+0x78>
 800c44c:	4629      	mov	r1, r5
 800c44e:	4630      	mov	r0, r6
 800c450:	f7fd fb04 	bl	8009a5c <__swsetup_r>
 800c454:	b1c0      	cbz	r0, 800c488 <_vfiprintf_r+0x78>
 800c456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c458:	07dc      	lsls	r4, r3, #31
 800c45a:	d50e      	bpl.n	800c47a <_vfiprintf_r+0x6a>
 800c45c:	f04f 30ff 	mov.w	r0, #4294967295
 800c460:	b01d      	add	sp, #116	; 0x74
 800c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c466:	4b7b      	ldr	r3, [pc, #492]	; (800c654 <_vfiprintf_r+0x244>)
 800c468:	429d      	cmp	r5, r3
 800c46a:	d101      	bne.n	800c470 <_vfiprintf_r+0x60>
 800c46c:	68b5      	ldr	r5, [r6, #8]
 800c46e:	e7df      	b.n	800c430 <_vfiprintf_r+0x20>
 800c470:	4b79      	ldr	r3, [pc, #484]	; (800c658 <_vfiprintf_r+0x248>)
 800c472:	429d      	cmp	r5, r3
 800c474:	bf08      	it	eq
 800c476:	68f5      	ldreq	r5, [r6, #12]
 800c478:	e7da      	b.n	800c430 <_vfiprintf_r+0x20>
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	0598      	lsls	r0, r3, #22
 800c47e:	d4ed      	bmi.n	800c45c <_vfiprintf_r+0x4c>
 800c480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c482:	f7fe ff0d 	bl	800b2a0 <__retarget_lock_release_recursive>
 800c486:	e7e9      	b.n	800c45c <_vfiprintf_r+0x4c>
 800c488:	2300      	movs	r3, #0
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	2320      	movs	r3, #32
 800c48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c492:	f8cd 800c 	str.w	r8, [sp, #12]
 800c496:	2330      	movs	r3, #48	; 0x30
 800c498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c65c <_vfiprintf_r+0x24c>
 800c49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4a0:	f04f 0901 	mov.w	r9, #1
 800c4a4:	4623      	mov	r3, r4
 800c4a6:	469a      	mov	sl, r3
 800c4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ac:	b10a      	cbz	r2, 800c4b2 <_vfiprintf_r+0xa2>
 800c4ae:	2a25      	cmp	r2, #37	; 0x25
 800c4b0:	d1f9      	bne.n	800c4a6 <_vfiprintf_r+0x96>
 800c4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b6:	d00b      	beq.n	800c4d0 <_vfiprintf_r+0xc0>
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff ff93 	bl	800c3ea <__sfputs_r>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	f000 80aa 	beq.w	800c61e <_vfiprintf_r+0x20e>
 800c4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4cc:	445a      	add	r2, fp
 800c4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 80a2 	beq.w	800c61e <_vfiprintf_r+0x20e>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e4:	f10a 0a01 	add.w	sl, sl, #1
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2205      	movs	r2, #5
 800c4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4fa:	4858      	ldr	r0, [pc, #352]	; (800c65c <_vfiprintf_r+0x24c>)
 800c4fc:	f7f3 fe78 	bl	80001f0 <memchr>
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	b9d8      	cbnz	r0, 800c53c <_vfiprintf_r+0x12c>
 800c504:	06d1      	lsls	r1, r2, #27
 800c506:	bf44      	itt	mi
 800c508:	2320      	movmi	r3, #32
 800c50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c50e:	0713      	lsls	r3, r2, #28
 800c510:	bf44      	itt	mi
 800c512:	232b      	movmi	r3, #43	; 0x2b
 800c514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b2a      	cmp	r3, #42	; 0x2a
 800c51e:	d015      	beq.n	800c54c <_vfiprintf_r+0x13c>
 800c520:	9a07      	ldr	r2, [sp, #28]
 800c522:	4654      	mov	r4, sl
 800c524:	2000      	movs	r0, #0
 800c526:	f04f 0c0a 	mov.w	ip, #10
 800c52a:	4621      	mov	r1, r4
 800c52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c530:	3b30      	subs	r3, #48	; 0x30
 800c532:	2b09      	cmp	r3, #9
 800c534:	d94e      	bls.n	800c5d4 <_vfiprintf_r+0x1c4>
 800c536:	b1b0      	cbz	r0, 800c566 <_vfiprintf_r+0x156>
 800c538:	9207      	str	r2, [sp, #28]
 800c53a:	e014      	b.n	800c566 <_vfiprintf_r+0x156>
 800c53c:	eba0 0308 	sub.w	r3, r0, r8
 800c540:	fa09 f303 	lsl.w	r3, r9, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	46a2      	mov	sl, r4
 800c54a:	e7d2      	b.n	800c4f2 <_vfiprintf_r+0xe2>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	1d19      	adds	r1, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9103      	str	r1, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbb      	ittet	lt
 800c558:	425b      	neglt	r3, r3
 800c55a:	f042 0202 	orrlt.w	r2, r2, #2
 800c55e:	9307      	strge	r3, [sp, #28]
 800c560:	9307      	strlt	r3, [sp, #28]
 800c562:	bfb8      	it	lt
 800c564:	9204      	strlt	r2, [sp, #16]
 800c566:	7823      	ldrb	r3, [r4, #0]
 800c568:	2b2e      	cmp	r3, #46	; 0x2e
 800c56a:	d10c      	bne.n	800c586 <_vfiprintf_r+0x176>
 800c56c:	7863      	ldrb	r3, [r4, #1]
 800c56e:	2b2a      	cmp	r3, #42	; 0x2a
 800c570:	d135      	bne.n	800c5de <_vfiprintf_r+0x1ce>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	9203      	str	r2, [sp, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	bfb8      	it	lt
 800c57e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c582:	3402      	adds	r4, #2
 800c584:	9305      	str	r3, [sp, #20]
 800c586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c66c <_vfiprintf_r+0x25c>
 800c58a:	7821      	ldrb	r1, [r4, #0]
 800c58c:	2203      	movs	r2, #3
 800c58e:	4650      	mov	r0, sl
 800c590:	f7f3 fe2e 	bl	80001f0 <memchr>
 800c594:	b140      	cbz	r0, 800c5a8 <_vfiprintf_r+0x198>
 800c596:	2340      	movs	r3, #64	; 0x40
 800c598:	eba0 000a 	sub.w	r0, r0, sl
 800c59c:	fa03 f000 	lsl.w	r0, r3, r0
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	4303      	orrs	r3, r0
 800c5a4:	3401      	adds	r4, #1
 800c5a6:	9304      	str	r3, [sp, #16]
 800c5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ac:	482c      	ldr	r0, [pc, #176]	; (800c660 <_vfiprintf_r+0x250>)
 800c5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5b2:	2206      	movs	r2, #6
 800c5b4:	f7f3 fe1c 	bl	80001f0 <memchr>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d03f      	beq.n	800c63c <_vfiprintf_r+0x22c>
 800c5bc:	4b29      	ldr	r3, [pc, #164]	; (800c664 <_vfiprintf_r+0x254>)
 800c5be:	bb1b      	cbnz	r3, 800c608 <_vfiprintf_r+0x1f8>
 800c5c0:	9b03      	ldr	r3, [sp, #12]
 800c5c2:	3307      	adds	r3, #7
 800c5c4:	f023 0307 	bic.w	r3, r3, #7
 800c5c8:	3308      	adds	r3, #8
 800c5ca:	9303      	str	r3, [sp, #12]
 800c5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ce:	443b      	add	r3, r7
 800c5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d2:	e767      	b.n	800c4a4 <_vfiprintf_r+0x94>
 800c5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d8:	460c      	mov	r4, r1
 800c5da:	2001      	movs	r0, #1
 800c5dc:	e7a5      	b.n	800c52a <_vfiprintf_r+0x11a>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	3401      	adds	r4, #1
 800c5e2:	9305      	str	r3, [sp, #20]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f04f 0c0a 	mov.w	ip, #10
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5f0:	3a30      	subs	r2, #48	; 0x30
 800c5f2:	2a09      	cmp	r2, #9
 800c5f4:	d903      	bls.n	800c5fe <_vfiprintf_r+0x1ee>
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d0c5      	beq.n	800c586 <_vfiprintf_r+0x176>
 800c5fa:	9105      	str	r1, [sp, #20]
 800c5fc:	e7c3      	b.n	800c586 <_vfiprintf_r+0x176>
 800c5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c602:	4604      	mov	r4, r0
 800c604:	2301      	movs	r3, #1
 800c606:	e7f0      	b.n	800c5ea <_vfiprintf_r+0x1da>
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	462a      	mov	r2, r5
 800c60e:	4b16      	ldr	r3, [pc, #88]	; (800c668 <_vfiprintf_r+0x258>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4630      	mov	r0, r6
 800c614:	f7fb fb42 	bl	8007c9c <_printf_float>
 800c618:	4607      	mov	r7, r0
 800c61a:	1c78      	adds	r0, r7, #1
 800c61c:	d1d6      	bne.n	800c5cc <_vfiprintf_r+0x1bc>
 800c61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c620:	07d9      	lsls	r1, r3, #31
 800c622:	d405      	bmi.n	800c630 <_vfiprintf_r+0x220>
 800c624:	89ab      	ldrh	r3, [r5, #12]
 800c626:	059a      	lsls	r2, r3, #22
 800c628:	d402      	bmi.n	800c630 <_vfiprintf_r+0x220>
 800c62a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c62c:	f7fe fe38 	bl	800b2a0 <__retarget_lock_release_recursive>
 800c630:	89ab      	ldrh	r3, [r5, #12]
 800c632:	065b      	lsls	r3, r3, #25
 800c634:	f53f af12 	bmi.w	800c45c <_vfiprintf_r+0x4c>
 800c638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c63a:	e711      	b.n	800c460 <_vfiprintf_r+0x50>
 800c63c:	ab03      	add	r3, sp, #12
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	462a      	mov	r2, r5
 800c642:	4b09      	ldr	r3, [pc, #36]	; (800c668 <_vfiprintf_r+0x258>)
 800c644:	a904      	add	r1, sp, #16
 800c646:	4630      	mov	r0, r6
 800c648:	f7fb fdcc 	bl	80081e4 <_printf_i>
 800c64c:	e7e4      	b.n	800c618 <_vfiprintf_r+0x208>
 800c64e:	bf00      	nop
 800c650:	0800ef00 	.word	0x0800ef00
 800c654:	0800ef20 	.word	0x0800ef20
 800c658:	0800eee0 	.word	0x0800eee0
 800c65c:	0800f11c 	.word	0x0800f11c
 800c660:	0800f126 	.word	0x0800f126
 800c664:	08007c9d 	.word	0x08007c9d
 800c668:	0800c3eb 	.word	0x0800c3eb
 800c66c:	0800f122 	.word	0x0800f122

0800c670 <_scanf_chars>:
 800c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c674:	4615      	mov	r5, r2
 800c676:	688a      	ldr	r2, [r1, #8]
 800c678:	4680      	mov	r8, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	b932      	cbnz	r2, 800c68c <_scanf_chars+0x1c>
 800c67e:	698a      	ldr	r2, [r1, #24]
 800c680:	2a00      	cmp	r2, #0
 800c682:	bf0c      	ite	eq
 800c684:	2201      	moveq	r2, #1
 800c686:	f04f 32ff 	movne.w	r2, #4294967295
 800c68a:	608a      	str	r2, [r1, #8]
 800c68c:	6822      	ldr	r2, [r4, #0]
 800c68e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c71c <_scanf_chars+0xac>
 800c692:	06d1      	lsls	r1, r2, #27
 800c694:	bf5f      	itttt	pl
 800c696:	681a      	ldrpl	r2, [r3, #0]
 800c698:	1d11      	addpl	r1, r2, #4
 800c69a:	6019      	strpl	r1, [r3, #0]
 800c69c:	6816      	ldrpl	r6, [r2, #0]
 800c69e:	2700      	movs	r7, #0
 800c6a0:	69a0      	ldr	r0, [r4, #24]
 800c6a2:	b188      	cbz	r0, 800c6c8 <_scanf_chars+0x58>
 800c6a4:	2801      	cmp	r0, #1
 800c6a6:	d107      	bne.n	800c6b8 <_scanf_chars+0x48>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	781a      	ldrb	r2, [r3, #0]
 800c6ac:	6963      	ldr	r3, [r4, #20]
 800c6ae:	5c9b      	ldrb	r3, [r3, r2]
 800c6b0:	b953      	cbnz	r3, 800c6c8 <_scanf_chars+0x58>
 800c6b2:	bb27      	cbnz	r7, 800c6fe <_scanf_chars+0x8e>
 800c6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b8:	2802      	cmp	r0, #2
 800c6ba:	d120      	bne.n	800c6fe <_scanf_chars+0x8e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c6c4:	071b      	lsls	r3, r3, #28
 800c6c6:	d41a      	bmi.n	800c6fe <_scanf_chars+0x8e>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	06da      	lsls	r2, r3, #27
 800c6cc:	bf5e      	ittt	pl
 800c6ce:	682b      	ldrpl	r3, [r5, #0]
 800c6d0:	781b      	ldrbpl	r3, [r3, #0]
 800c6d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6d6:	682a      	ldr	r2, [r5, #0]
 800c6d8:	686b      	ldr	r3, [r5, #4]
 800c6da:	3201      	adds	r2, #1
 800c6dc:	602a      	str	r2, [r5, #0]
 800c6de:	68a2      	ldr	r2, [r4, #8]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	3a01      	subs	r2, #1
 800c6e4:	606b      	str	r3, [r5, #4]
 800c6e6:	3701      	adds	r7, #1
 800c6e8:	60a2      	str	r2, [r4, #8]
 800c6ea:	b142      	cbz	r2, 800c6fe <_scanf_chars+0x8e>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dcd7      	bgt.n	800c6a0 <_scanf_chars+0x30>
 800c6f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	4798      	blx	r3
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d0d0      	beq.n	800c6a0 <_scanf_chars+0x30>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	f013 0310 	ands.w	r3, r3, #16
 800c704:	d105      	bne.n	800c712 <_scanf_chars+0xa2>
 800c706:	68e2      	ldr	r2, [r4, #12]
 800c708:	3201      	adds	r2, #1
 800c70a:	60e2      	str	r2, [r4, #12]
 800c70c:	69a2      	ldr	r2, [r4, #24]
 800c70e:	b102      	cbz	r2, 800c712 <_scanf_chars+0xa2>
 800c710:	7033      	strb	r3, [r6, #0]
 800c712:	6923      	ldr	r3, [r4, #16]
 800c714:	441f      	add	r7, r3
 800c716:	6127      	str	r7, [r4, #16]
 800c718:	2000      	movs	r0, #0
 800c71a:	e7cb      	b.n	800c6b4 <_scanf_chars+0x44>
 800c71c:	0800ed49 	.word	0x0800ed49

0800c720 <_scanf_i>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	4698      	mov	r8, r3
 800c726:	4b74      	ldr	r3, [pc, #464]	; (800c8f8 <_scanf_i+0x1d8>)
 800c728:	460c      	mov	r4, r1
 800c72a:	4682      	mov	sl, r0
 800c72c:	4616      	mov	r6, r2
 800c72e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c732:	b087      	sub	sp, #28
 800c734:	ab03      	add	r3, sp, #12
 800c736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c73a:	4b70      	ldr	r3, [pc, #448]	; (800c8fc <_scanf_i+0x1dc>)
 800c73c:	69a1      	ldr	r1, [r4, #24]
 800c73e:	4a70      	ldr	r2, [pc, #448]	; (800c900 <_scanf_i+0x1e0>)
 800c740:	2903      	cmp	r1, #3
 800c742:	bf18      	it	ne
 800c744:	461a      	movne	r2, r3
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	9201      	str	r2, [sp, #4]
 800c74a:	1e5a      	subs	r2, r3, #1
 800c74c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c750:	bf88      	it	hi
 800c752:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c756:	4627      	mov	r7, r4
 800c758:	bf82      	ittt	hi
 800c75a:	eb03 0905 	addhi.w	r9, r3, r5
 800c75e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c762:	60a3      	strhi	r3, [r4, #8]
 800c764:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c768:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c76c:	bf98      	it	ls
 800c76e:	f04f 0900 	movls.w	r9, #0
 800c772:	6023      	str	r3, [r4, #0]
 800c774:	463d      	mov	r5, r7
 800c776:	f04f 0b00 	mov.w	fp, #0
 800c77a:	6831      	ldr	r1, [r6, #0]
 800c77c:	ab03      	add	r3, sp, #12
 800c77e:	7809      	ldrb	r1, [r1, #0]
 800c780:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c784:	2202      	movs	r2, #2
 800c786:	f7f3 fd33 	bl	80001f0 <memchr>
 800c78a:	b328      	cbz	r0, 800c7d8 <_scanf_i+0xb8>
 800c78c:	f1bb 0f01 	cmp.w	fp, #1
 800c790:	d159      	bne.n	800c846 <_scanf_i+0x126>
 800c792:	6862      	ldr	r2, [r4, #4]
 800c794:	b92a      	cbnz	r2, 800c7a2 <_scanf_i+0x82>
 800c796:	6822      	ldr	r2, [r4, #0]
 800c798:	2308      	movs	r3, #8
 800c79a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c79e:	6063      	str	r3, [r4, #4]
 800c7a0:	6022      	str	r2, [r4, #0]
 800c7a2:	6822      	ldr	r2, [r4, #0]
 800c7a4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c7a8:	6022      	str	r2, [r4, #0]
 800c7aa:	68a2      	ldr	r2, [r4, #8]
 800c7ac:	1e51      	subs	r1, r2, #1
 800c7ae:	60a1      	str	r1, [r4, #8]
 800c7b0:	b192      	cbz	r2, 800c7d8 <_scanf_i+0xb8>
 800c7b2:	6832      	ldr	r2, [r6, #0]
 800c7b4:	1c51      	adds	r1, r2, #1
 800c7b6:	6031      	str	r1, [r6, #0]
 800c7b8:	7812      	ldrb	r2, [r2, #0]
 800c7ba:	f805 2b01 	strb.w	r2, [r5], #1
 800c7be:	6872      	ldr	r2, [r6, #4]
 800c7c0:	3a01      	subs	r2, #1
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	6072      	str	r2, [r6, #4]
 800c7c6:	dc07      	bgt.n	800c7d8 <_scanf_i+0xb8>
 800c7c8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	4790      	blx	r2
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 8085 	bne.w	800c8e2 <_scanf_i+0x1c2>
 800c7d8:	f10b 0b01 	add.w	fp, fp, #1
 800c7dc:	f1bb 0f03 	cmp.w	fp, #3
 800c7e0:	d1cb      	bne.n	800c77a <_scanf_i+0x5a>
 800c7e2:	6863      	ldr	r3, [r4, #4]
 800c7e4:	b90b      	cbnz	r3, 800c7ea <_scanf_i+0xca>
 800c7e6:	230a      	movs	r3, #10
 800c7e8:	6063      	str	r3, [r4, #4]
 800c7ea:	6863      	ldr	r3, [r4, #4]
 800c7ec:	4945      	ldr	r1, [pc, #276]	; (800c904 <_scanf_i+0x1e4>)
 800c7ee:	6960      	ldr	r0, [r4, #20]
 800c7f0:	1ac9      	subs	r1, r1, r3
 800c7f2:	f000 f8a5 	bl	800c940 <__sccl>
 800c7f6:	f04f 0b00 	mov.w	fp, #0
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	6822      	ldr	r2, [r4, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d03d      	beq.n	800c87e <_scanf_i+0x15e>
 800c802:	6831      	ldr	r1, [r6, #0]
 800c804:	6960      	ldr	r0, [r4, #20]
 800c806:	f891 c000 	ldrb.w	ip, [r1]
 800c80a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c80e:	2800      	cmp	r0, #0
 800c810:	d035      	beq.n	800c87e <_scanf_i+0x15e>
 800c812:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c816:	d124      	bne.n	800c862 <_scanf_i+0x142>
 800c818:	0510      	lsls	r0, r2, #20
 800c81a:	d522      	bpl.n	800c862 <_scanf_i+0x142>
 800c81c:	f10b 0b01 	add.w	fp, fp, #1
 800c820:	f1b9 0f00 	cmp.w	r9, #0
 800c824:	d003      	beq.n	800c82e <_scanf_i+0x10e>
 800c826:	3301      	adds	r3, #1
 800c828:	f109 39ff 	add.w	r9, r9, #4294967295
 800c82c:	60a3      	str	r3, [r4, #8]
 800c82e:	6873      	ldr	r3, [r6, #4]
 800c830:	3b01      	subs	r3, #1
 800c832:	2b00      	cmp	r3, #0
 800c834:	6073      	str	r3, [r6, #4]
 800c836:	dd1b      	ble.n	800c870 <_scanf_i+0x150>
 800c838:	6833      	ldr	r3, [r6, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	6033      	str	r3, [r6, #0]
 800c83e:	68a3      	ldr	r3, [r4, #8]
 800c840:	3b01      	subs	r3, #1
 800c842:	60a3      	str	r3, [r4, #8]
 800c844:	e7d9      	b.n	800c7fa <_scanf_i+0xda>
 800c846:	f1bb 0f02 	cmp.w	fp, #2
 800c84a:	d1ae      	bne.n	800c7aa <_scanf_i+0x8a>
 800c84c:	6822      	ldr	r2, [r4, #0]
 800c84e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c852:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c856:	d1bf      	bne.n	800c7d8 <_scanf_i+0xb8>
 800c858:	2310      	movs	r3, #16
 800c85a:	6063      	str	r3, [r4, #4]
 800c85c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c860:	e7a2      	b.n	800c7a8 <_scanf_i+0x88>
 800c862:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c866:	6022      	str	r2, [r4, #0]
 800c868:	780b      	ldrb	r3, [r1, #0]
 800c86a:	f805 3b01 	strb.w	r3, [r5], #1
 800c86e:	e7de      	b.n	800c82e <_scanf_i+0x10e>
 800c870:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c874:	4631      	mov	r1, r6
 800c876:	4650      	mov	r0, sl
 800c878:	4798      	blx	r3
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d0df      	beq.n	800c83e <_scanf_i+0x11e>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	05d9      	lsls	r1, r3, #23
 800c882:	d50d      	bpl.n	800c8a0 <_scanf_i+0x180>
 800c884:	42bd      	cmp	r5, r7
 800c886:	d909      	bls.n	800c89c <_scanf_i+0x17c>
 800c888:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c88c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c890:	4632      	mov	r2, r6
 800c892:	4650      	mov	r0, sl
 800c894:	4798      	blx	r3
 800c896:	f105 39ff 	add.w	r9, r5, #4294967295
 800c89a:	464d      	mov	r5, r9
 800c89c:	42bd      	cmp	r5, r7
 800c89e:	d028      	beq.n	800c8f2 <_scanf_i+0x1d2>
 800c8a0:	6822      	ldr	r2, [r4, #0]
 800c8a2:	f012 0210 	ands.w	r2, r2, #16
 800c8a6:	d113      	bne.n	800c8d0 <_scanf_i+0x1b0>
 800c8a8:	702a      	strb	r2, [r5, #0]
 800c8aa:	6863      	ldr	r3, [r4, #4]
 800c8ac:	9e01      	ldr	r6, [sp, #4]
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	47b0      	blx	r6
 800c8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b8:	6821      	ldr	r1, [r4, #0]
 800c8ba:	1d1a      	adds	r2, r3, #4
 800c8bc:	f8c8 2000 	str.w	r2, [r8]
 800c8c0:	f011 0f20 	tst.w	r1, #32
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	d00f      	beq.n	800c8e8 <_scanf_i+0x1c8>
 800c8c8:	6018      	str	r0, [r3, #0]
 800c8ca:	68e3      	ldr	r3, [r4, #12]
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	60e3      	str	r3, [r4, #12]
 800c8d0:	1bed      	subs	r5, r5, r7
 800c8d2:	44ab      	add	fp, r5
 800c8d4:	6925      	ldr	r5, [r4, #16]
 800c8d6:	445d      	add	r5, fp
 800c8d8:	6125      	str	r5, [r4, #16]
 800c8da:	2000      	movs	r0, #0
 800c8dc:	b007      	add	sp, #28
 800c8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8e2:	f04f 0b00 	mov.w	fp, #0
 800c8e6:	e7ca      	b.n	800c87e <_scanf_i+0x15e>
 800c8e8:	07ca      	lsls	r2, r1, #31
 800c8ea:	bf4c      	ite	mi
 800c8ec:	8018      	strhmi	r0, [r3, #0]
 800c8ee:	6018      	strpl	r0, [r3, #0]
 800c8f0:	e7eb      	b.n	800c8ca <_scanf_i+0x1aa>
 800c8f2:	2001      	movs	r0, #1
 800c8f4:	e7f2      	b.n	800c8dc <_scanf_i+0x1bc>
 800c8f6:	bf00      	nop
 800c8f8:	0800dc94 	.word	0x0800dc94
 800c8fc:	0800cad1 	.word	0x0800cad1
 800c900:	080098e1 	.word	0x080098e1
 800c904:	0800f146 	.word	0x0800f146

0800c908 <_read_r>:
 800c908:	b538      	push	{r3, r4, r5, lr}
 800c90a:	4d07      	ldr	r5, [pc, #28]	; (800c928 <_read_r+0x20>)
 800c90c:	4604      	mov	r4, r0
 800c90e:	4608      	mov	r0, r1
 800c910:	4611      	mov	r1, r2
 800c912:	2200      	movs	r2, #0
 800c914:	602a      	str	r2, [r5, #0]
 800c916:	461a      	mov	r2, r3
 800c918:	f7f6 ff8a 	bl	8003830 <_read>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_read_r+0x1e>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_read_r+0x1e>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20001860 	.word	0x20001860
 800c92c:	00000000 	.word	0x00000000

0800c930 <nan>:
 800c930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c938 <nan+0x8>
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	00000000 	.word	0x00000000
 800c93c:	7ff80000 	.word	0x7ff80000

0800c940 <__sccl>:
 800c940:	b570      	push	{r4, r5, r6, lr}
 800c942:	780b      	ldrb	r3, [r1, #0]
 800c944:	4604      	mov	r4, r0
 800c946:	2b5e      	cmp	r3, #94	; 0x5e
 800c948:	bf0b      	itete	eq
 800c94a:	784b      	ldrbeq	r3, [r1, #1]
 800c94c:	1c48      	addne	r0, r1, #1
 800c94e:	1c88      	addeq	r0, r1, #2
 800c950:	2200      	movne	r2, #0
 800c952:	bf08      	it	eq
 800c954:	2201      	moveq	r2, #1
 800c956:	1e61      	subs	r1, r4, #1
 800c958:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c95c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c960:	42a9      	cmp	r1, r5
 800c962:	d1fb      	bne.n	800c95c <__sccl+0x1c>
 800c964:	b90b      	cbnz	r3, 800c96a <__sccl+0x2a>
 800c966:	3801      	subs	r0, #1
 800c968:	bd70      	pop	{r4, r5, r6, pc}
 800c96a:	f082 0101 	eor.w	r1, r2, #1
 800c96e:	54e1      	strb	r1, [r4, r3]
 800c970:	1c42      	adds	r2, r0, #1
 800c972:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c976:	2d2d      	cmp	r5, #45	; 0x2d
 800c978:	f102 36ff 	add.w	r6, r2, #4294967295
 800c97c:	4610      	mov	r0, r2
 800c97e:	d006      	beq.n	800c98e <__sccl+0x4e>
 800c980:	2d5d      	cmp	r5, #93	; 0x5d
 800c982:	d0f1      	beq.n	800c968 <__sccl+0x28>
 800c984:	b90d      	cbnz	r5, 800c98a <__sccl+0x4a>
 800c986:	4630      	mov	r0, r6
 800c988:	e7ee      	b.n	800c968 <__sccl+0x28>
 800c98a:	462b      	mov	r3, r5
 800c98c:	e7ef      	b.n	800c96e <__sccl+0x2e>
 800c98e:	7816      	ldrb	r6, [r2, #0]
 800c990:	2e5d      	cmp	r6, #93	; 0x5d
 800c992:	d0fa      	beq.n	800c98a <__sccl+0x4a>
 800c994:	42b3      	cmp	r3, r6
 800c996:	dcf8      	bgt.n	800c98a <__sccl+0x4a>
 800c998:	4618      	mov	r0, r3
 800c99a:	3001      	adds	r0, #1
 800c99c:	4286      	cmp	r6, r0
 800c99e:	5421      	strb	r1, [r4, r0]
 800c9a0:	dcfb      	bgt.n	800c99a <__sccl+0x5a>
 800c9a2:	43d8      	mvns	r0, r3
 800c9a4:	4430      	add	r0, r6
 800c9a6:	1c5d      	adds	r5, r3, #1
 800c9a8:	42b3      	cmp	r3, r6
 800c9aa:	bfa8      	it	ge
 800c9ac:	2000      	movge	r0, #0
 800c9ae:	182b      	adds	r3, r5, r0
 800c9b0:	3202      	adds	r2, #2
 800c9b2:	e7de      	b.n	800c972 <__sccl+0x32>

0800c9b4 <strncmp>:
 800c9b4:	b510      	push	{r4, lr}
 800c9b6:	b16a      	cbz	r2, 800c9d4 <strncmp+0x20>
 800c9b8:	3901      	subs	r1, #1
 800c9ba:	1884      	adds	r4, r0, r2
 800c9bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d103      	bne.n	800c9d0 <strncmp+0x1c>
 800c9c8:	42a0      	cmp	r0, r4
 800c9ca:	d001      	beq.n	800c9d0 <strncmp+0x1c>
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1f5      	bne.n	800c9bc <strncmp+0x8>
 800c9d0:	1a98      	subs	r0, r3, r2
 800c9d2:	bd10      	pop	{r4, pc}
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	e7fc      	b.n	800c9d2 <strncmp+0x1e>

0800c9d8 <_strtoul_l.isra.0>:
 800c9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	4e3b      	ldr	r6, [pc, #236]	; (800cacc <_strtoul_l.isra.0+0xf4>)
 800c9de:	4686      	mov	lr, r0
 800c9e0:	468c      	mov	ip, r1
 800c9e2:	4660      	mov	r0, ip
 800c9e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c9e8:	5da5      	ldrb	r5, [r4, r6]
 800c9ea:	f015 0508 	ands.w	r5, r5, #8
 800c9ee:	d1f8      	bne.n	800c9e2 <_strtoul_l.isra.0+0xa>
 800c9f0:	2c2d      	cmp	r4, #45	; 0x2d
 800c9f2:	d134      	bne.n	800ca5e <_strtoul_l.isra.0+0x86>
 800c9f4:	f89c 4000 	ldrb.w	r4, [ip]
 800c9f8:	f04f 0801 	mov.w	r8, #1
 800c9fc:	f100 0c02 	add.w	ip, r0, #2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d05e      	beq.n	800cac2 <_strtoul_l.isra.0+0xea>
 800ca04:	2b10      	cmp	r3, #16
 800ca06:	d10c      	bne.n	800ca22 <_strtoul_l.isra.0+0x4a>
 800ca08:	2c30      	cmp	r4, #48	; 0x30
 800ca0a:	d10a      	bne.n	800ca22 <_strtoul_l.isra.0+0x4a>
 800ca0c:	f89c 0000 	ldrb.w	r0, [ip]
 800ca10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ca14:	2858      	cmp	r0, #88	; 0x58
 800ca16:	d14f      	bne.n	800cab8 <_strtoul_l.isra.0+0xe0>
 800ca18:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	f10c 0c02 	add.w	ip, ip, #2
 800ca22:	f04f 37ff 	mov.w	r7, #4294967295
 800ca26:	2500      	movs	r5, #0
 800ca28:	fbb7 f7f3 	udiv	r7, r7, r3
 800ca2c:	fb03 f907 	mul.w	r9, r3, r7
 800ca30:	ea6f 0909 	mvn.w	r9, r9
 800ca34:	4628      	mov	r0, r5
 800ca36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ca3a:	2e09      	cmp	r6, #9
 800ca3c:	d818      	bhi.n	800ca70 <_strtoul_l.isra.0+0x98>
 800ca3e:	4634      	mov	r4, r6
 800ca40:	42a3      	cmp	r3, r4
 800ca42:	dd24      	ble.n	800ca8e <_strtoul_l.isra.0+0xb6>
 800ca44:	2d00      	cmp	r5, #0
 800ca46:	db1f      	blt.n	800ca88 <_strtoul_l.isra.0+0xb0>
 800ca48:	4287      	cmp	r7, r0
 800ca4a:	d31d      	bcc.n	800ca88 <_strtoul_l.isra.0+0xb0>
 800ca4c:	d101      	bne.n	800ca52 <_strtoul_l.isra.0+0x7a>
 800ca4e:	45a1      	cmp	r9, r4
 800ca50:	db1a      	blt.n	800ca88 <_strtoul_l.isra.0+0xb0>
 800ca52:	fb00 4003 	mla	r0, r0, r3, r4
 800ca56:	2501      	movs	r5, #1
 800ca58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ca5c:	e7eb      	b.n	800ca36 <_strtoul_l.isra.0+0x5e>
 800ca5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ca60:	bf08      	it	eq
 800ca62:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ca66:	46a8      	mov	r8, r5
 800ca68:	bf08      	it	eq
 800ca6a:	f100 0c02 	addeq.w	ip, r0, #2
 800ca6e:	e7c7      	b.n	800ca00 <_strtoul_l.isra.0+0x28>
 800ca70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ca74:	2e19      	cmp	r6, #25
 800ca76:	d801      	bhi.n	800ca7c <_strtoul_l.isra.0+0xa4>
 800ca78:	3c37      	subs	r4, #55	; 0x37
 800ca7a:	e7e1      	b.n	800ca40 <_strtoul_l.isra.0+0x68>
 800ca7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ca80:	2e19      	cmp	r6, #25
 800ca82:	d804      	bhi.n	800ca8e <_strtoul_l.isra.0+0xb6>
 800ca84:	3c57      	subs	r4, #87	; 0x57
 800ca86:	e7db      	b.n	800ca40 <_strtoul_l.isra.0+0x68>
 800ca88:	f04f 35ff 	mov.w	r5, #4294967295
 800ca8c:	e7e4      	b.n	800ca58 <_strtoul_l.isra.0+0x80>
 800ca8e:	2d00      	cmp	r5, #0
 800ca90:	da07      	bge.n	800caa2 <_strtoul_l.isra.0+0xca>
 800ca92:	2322      	movs	r3, #34	; 0x22
 800ca94:	f8ce 3000 	str.w	r3, [lr]
 800ca98:	f04f 30ff 	mov.w	r0, #4294967295
 800ca9c:	b942      	cbnz	r2, 800cab0 <_strtoul_l.isra.0+0xd8>
 800ca9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa2:	f1b8 0f00 	cmp.w	r8, #0
 800caa6:	d000      	beq.n	800caaa <_strtoul_l.isra.0+0xd2>
 800caa8:	4240      	negs	r0, r0
 800caaa:	2a00      	cmp	r2, #0
 800caac:	d0f7      	beq.n	800ca9e <_strtoul_l.isra.0+0xc6>
 800caae:	b10d      	cbz	r5, 800cab4 <_strtoul_l.isra.0+0xdc>
 800cab0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	e7f2      	b.n	800ca9e <_strtoul_l.isra.0+0xc6>
 800cab8:	2430      	movs	r4, #48	; 0x30
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1b1      	bne.n	800ca22 <_strtoul_l.isra.0+0x4a>
 800cabe:	2308      	movs	r3, #8
 800cac0:	e7af      	b.n	800ca22 <_strtoul_l.isra.0+0x4a>
 800cac2:	2c30      	cmp	r4, #48	; 0x30
 800cac4:	d0a2      	beq.n	800ca0c <_strtoul_l.isra.0+0x34>
 800cac6:	230a      	movs	r3, #10
 800cac8:	e7ab      	b.n	800ca22 <_strtoul_l.isra.0+0x4a>
 800caca:	bf00      	nop
 800cacc:	0800ed49 	.word	0x0800ed49

0800cad0 <_strtoul_r>:
 800cad0:	f7ff bf82 	b.w	800c9d8 <_strtoul_l.isra.0>

0800cad4 <__submore>:
 800cad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad8:	460c      	mov	r4, r1
 800cada:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cadc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cae0:	4299      	cmp	r1, r3
 800cae2:	d11d      	bne.n	800cb20 <__submore+0x4c>
 800cae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cae8:	f7fa ffde 	bl	8007aa8 <_malloc_r>
 800caec:	b918      	cbnz	r0, 800caf6 <__submore+0x22>
 800caee:	f04f 30ff 	mov.w	r0, #4294967295
 800caf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cafa:	63a3      	str	r3, [r4, #56]	; 0x38
 800cafc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cb00:	6360      	str	r0, [r4, #52]	; 0x34
 800cb02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cb06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cb0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cb0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cb12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cb16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cb1a:	6020      	str	r0, [r4, #0]
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e7e8      	b.n	800caf2 <__submore+0x1e>
 800cb20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cb22:	0077      	lsls	r7, r6, #1
 800cb24:	463a      	mov	r2, r7
 800cb26:	f000 f889 	bl	800cc3c <_realloc_r>
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0de      	beq.n	800caee <__submore+0x1a>
 800cb30:	eb00 0806 	add.w	r8, r0, r6
 800cb34:	4601      	mov	r1, r0
 800cb36:	4632      	mov	r2, r6
 800cb38:	4640      	mov	r0, r8
 800cb3a:	f7fa ff4f 	bl	80079dc <memcpy>
 800cb3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cb42:	f8c4 8000 	str.w	r8, [r4]
 800cb46:	e7e9      	b.n	800cb1c <__submore+0x48>

0800cb48 <__ascii_wctomb>:
 800cb48:	b149      	cbz	r1, 800cb5e <__ascii_wctomb+0x16>
 800cb4a:	2aff      	cmp	r2, #255	; 0xff
 800cb4c:	bf85      	ittet	hi
 800cb4e:	238a      	movhi	r3, #138	; 0x8a
 800cb50:	6003      	strhi	r3, [r0, #0]
 800cb52:	700a      	strbls	r2, [r1, #0]
 800cb54:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb58:	bf98      	it	ls
 800cb5a:	2001      	movls	r0, #1
 800cb5c:	4770      	bx	lr
 800cb5e:	4608      	mov	r0, r1
 800cb60:	4770      	bx	lr
	...

0800cb64 <__assert_func>:
 800cb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb66:	4614      	mov	r4, r2
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b09      	ldr	r3, [pc, #36]	; (800cb90 <__assert_func+0x2c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4605      	mov	r5, r0
 800cb70:	68d8      	ldr	r0, [r3, #12]
 800cb72:	b14c      	cbz	r4, 800cb88 <__assert_func+0x24>
 800cb74:	4b07      	ldr	r3, [pc, #28]	; (800cb94 <__assert_func+0x30>)
 800cb76:	9100      	str	r1, [sp, #0]
 800cb78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb7c:	4906      	ldr	r1, [pc, #24]	; (800cb98 <__assert_func+0x34>)
 800cb7e:	462b      	mov	r3, r5
 800cb80:	f000 f80e 	bl	800cba0 <fiprintf>
 800cb84:	f7fa fee4 	bl	8007950 <abort>
 800cb88:	4b04      	ldr	r3, [pc, #16]	; (800cb9c <__assert_func+0x38>)
 800cb8a:	461c      	mov	r4, r3
 800cb8c:	e7f3      	b.n	800cb76 <__assert_func+0x12>
 800cb8e:	bf00      	nop
 800cb90:	20000070 	.word	0x20000070
 800cb94:	0800f148 	.word	0x0800f148
 800cb98:	0800f155 	.word	0x0800f155
 800cb9c:	0800f183 	.word	0x0800f183

0800cba0 <fiprintf>:
 800cba0:	b40e      	push	{r1, r2, r3}
 800cba2:	b503      	push	{r0, r1, lr}
 800cba4:	4601      	mov	r1, r0
 800cba6:	ab03      	add	r3, sp, #12
 800cba8:	4805      	ldr	r0, [pc, #20]	; (800cbc0 <fiprintf+0x20>)
 800cbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbae:	6800      	ldr	r0, [r0, #0]
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f7ff fc2d 	bl	800c410 <_vfiprintf_r>
 800cbb6:	b002      	add	sp, #8
 800cbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbbc:	b003      	add	sp, #12
 800cbbe:	4770      	bx	lr
 800cbc0:	20000070 	.word	0x20000070

0800cbc4 <_fstat_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d07      	ldr	r5, [pc, #28]	; (800cbe4 <_fstat_r+0x20>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	4611      	mov	r1, r2
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	f7f6 fe72 	bl	80038ba <_fstat>
 800cbd6:	1c43      	adds	r3, r0, #1
 800cbd8:	d102      	bne.n	800cbe0 <_fstat_r+0x1c>
 800cbda:	682b      	ldr	r3, [r5, #0]
 800cbdc:	b103      	cbz	r3, 800cbe0 <_fstat_r+0x1c>
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	bd38      	pop	{r3, r4, r5, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20001860 	.word	0x20001860

0800cbe8 <_isatty_r>:
 800cbe8:	b538      	push	{r3, r4, r5, lr}
 800cbea:	4d06      	ldr	r5, [pc, #24]	; (800cc04 <_isatty_r+0x1c>)
 800cbec:	2300      	movs	r3, #0
 800cbee:	4604      	mov	r4, r0
 800cbf0:	4608      	mov	r0, r1
 800cbf2:	602b      	str	r3, [r5, #0]
 800cbf4:	f7f6 fe71 	bl	80038da <_isatty>
 800cbf8:	1c43      	adds	r3, r0, #1
 800cbfa:	d102      	bne.n	800cc02 <_isatty_r+0x1a>
 800cbfc:	682b      	ldr	r3, [r5, #0]
 800cbfe:	b103      	cbz	r3, 800cc02 <_isatty_r+0x1a>
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	bd38      	pop	{r3, r4, r5, pc}
 800cc04:	20001860 	.word	0x20001860

0800cc08 <memmove>:
 800cc08:	4288      	cmp	r0, r1
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	eb01 0402 	add.w	r4, r1, r2
 800cc10:	d902      	bls.n	800cc18 <memmove+0x10>
 800cc12:	4284      	cmp	r4, r0
 800cc14:	4623      	mov	r3, r4
 800cc16:	d807      	bhi.n	800cc28 <memmove+0x20>
 800cc18:	1e43      	subs	r3, r0, #1
 800cc1a:	42a1      	cmp	r1, r4
 800cc1c:	d008      	beq.n	800cc30 <memmove+0x28>
 800cc1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc26:	e7f8      	b.n	800cc1a <memmove+0x12>
 800cc28:	4402      	add	r2, r0
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	428a      	cmp	r2, r1
 800cc2e:	d100      	bne.n	800cc32 <memmove+0x2a>
 800cc30:	bd10      	pop	{r4, pc}
 800cc32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc3a:	e7f7      	b.n	800cc2c <memmove+0x24>

0800cc3c <_realloc_r>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	4607      	mov	r7, r0
 800cc40:	4614      	mov	r4, r2
 800cc42:	460e      	mov	r6, r1
 800cc44:	b921      	cbnz	r1, 800cc50 <_realloc_r+0x14>
 800cc46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc4a:	4611      	mov	r1, r2
 800cc4c:	f7fa bf2c 	b.w	8007aa8 <_malloc_r>
 800cc50:	b922      	cbnz	r2, 800cc5c <_realloc_r+0x20>
 800cc52:	f7fa fed9 	bl	8007a08 <_free_r>
 800cc56:	4625      	mov	r5, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc5c:	f000 f814 	bl	800cc88 <_malloc_usable_size_r>
 800cc60:	42a0      	cmp	r0, r4
 800cc62:	d20f      	bcs.n	800cc84 <_realloc_r+0x48>
 800cc64:	4621      	mov	r1, r4
 800cc66:	4638      	mov	r0, r7
 800cc68:	f7fa ff1e 	bl	8007aa8 <_malloc_r>
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d0f2      	beq.n	800cc58 <_realloc_r+0x1c>
 800cc72:	4631      	mov	r1, r6
 800cc74:	4622      	mov	r2, r4
 800cc76:	f7fa feb1 	bl	80079dc <memcpy>
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4638      	mov	r0, r7
 800cc7e:	f7fa fec3 	bl	8007a08 <_free_r>
 800cc82:	e7e9      	b.n	800cc58 <_realloc_r+0x1c>
 800cc84:	4635      	mov	r5, r6
 800cc86:	e7e7      	b.n	800cc58 <_realloc_r+0x1c>

0800cc88 <_malloc_usable_size_r>:
 800cc88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc8c:	1f18      	subs	r0, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	bfbc      	itt	lt
 800cc92:	580b      	ldrlt	r3, [r1, r0]
 800cc94:	18c0      	addlt	r0, r0, r3
 800cc96:	4770      	bx	lr

0800cc98 <_init>:
 800cc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc9a:	bf00      	nop
 800cc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9e:	bc08      	pop	{r3}
 800cca0:	469e      	mov	lr, r3
 800cca2:	4770      	bx	lr

0800cca4 <_fini>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	bf00      	nop
 800cca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccaa:	bc08      	pop	{r3}
 800ccac:	469e      	mov	lr, r3
 800ccae:	4770      	bx	lr
